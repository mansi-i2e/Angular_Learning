import {
  CollectionNestedOption,
  DxTemplateHost,
  NestedOption,
  NestedOptionHost,
  extractTemplate
} from "./chunk-QM3RW7EC.js";
import {
  DOCUMENT
} from "./chunk-IQPMALOM.js";
import {
  Component,
  ContentChildren,
  ElementRef,
  Host,
  Inject,
  Input,
  NgModule,
  Output,
  Renderer2,
  SkipSelf,
  forwardRef,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵProvidersFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵgetInheritedFactory,
  ɵɵloadQuery,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵqueryRefresh
} from "./chunk-I3I3ANE2.js";

// node_modules/devextreme-angular/fesm2022/devextreme-angular-ui-nested.mjs
var _c0 = ["*"];
var DxoAdapterComponent = class _DxoAdapterComponent extends NestedOption {
  get applyValidationResults() {
    return this._getOption("applyValidationResults");
  }
  set applyValidationResults(value) {
    this._setOption("applyValidationResults", value);
  }
  get bypass() {
    return this._getOption("bypass");
  }
  set bypass(value) {
    this._setOption("bypass", value);
  }
  get focus() {
    return this._getOption("focus");
  }
  set focus(value) {
    this._setOption("focus", value);
  }
  get getValue() {
    return this._getOption("getValue");
  }
  set getValue(value) {
    this._setOption("getValue", value);
  }
  get reset() {
    return this._getOption("reset");
  }
  set reset(value) {
    this._setOption("reset", value);
  }
  get validationRequestsCallbacks() {
    return this._getOption("validationRequestsCallbacks");
  }
  set validationRequestsCallbacks(value) {
    this._setOption("validationRequestsCallbacks", value);
  }
  get _optionPath() {
    return "adapter";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAdapterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAdapterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAdapterComponent,
    selectors: [["dxo-adapter"]],
    inputs: {
      applyValidationResults: "applyValidationResults",
      bypass: "bypass",
      focus: "focus",
      getValue: "getValue",
      reset: "reset",
      validationRequestsCallbacks: "validationRequestsCallbacks"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAdapterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdapterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-adapter",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    applyValidationResults: [{
      type: Input
    }],
    bypass: [{
      type: Input
    }],
    focus: [{
      type: Input
    }],
    getValue: [{
      type: Input
    }],
    reset: [{
      type: Input
    }],
    validationRequestsCallbacks: [{
      type: Input
    }]
  });
})();
var DxoAdapterModule = class _DxoAdapterModule {
  /** @nocollapse */
  static ɵfac = function DxoAdapterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAdapterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAdapterModule,
    declarations: [DxoAdapterComponent],
    exports: [DxoAdapterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdapterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAdapterComponent],
      exports: [DxoAdapterComponent]
    }]
  }], null, null);
})();
var DxoAdaptiveLayoutComponent = class _DxoAdaptiveLayoutComponent extends NestedOption {
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get keepLabels() {
    return this._getOption("keepLabels");
  }
  set keepLabels(value) {
    this._setOption("keepLabels", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "adaptiveLayout";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAdaptiveLayoutComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAdaptiveLayoutComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAdaptiveLayoutComponent,
    selectors: [["dxo-adaptive-layout"]],
    inputs: {
      height: "height",
      keepLabels: "keepLabels",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAdaptiveLayoutComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdaptiveLayoutComponent, [{
    type: Component,
    args: [{
      selector: "dxo-adaptive-layout",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    height: [{
      type: Input
    }],
    keepLabels: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoAdaptiveLayoutModule = class _DxoAdaptiveLayoutModule {
  /** @nocollapse */
  static ɵfac = function DxoAdaptiveLayoutModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAdaptiveLayoutModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAdaptiveLayoutModule,
    declarations: [DxoAdaptiveLayoutComponent],
    exports: [DxoAdaptiveLayoutComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdaptiveLayoutModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAdaptiveLayoutComponent],
      exports: [DxoAdaptiveLayoutComponent]
    }]
  }], null, null);
})();
var DxoAggregationIntervalComponent = class _DxoAggregationIntervalComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "aggregationInterval";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAggregationIntervalComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAggregationIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAggregationIntervalComponent,
    selectors: [["dxo-aggregation-interval"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAggregationIntervalComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-aggregation-interval",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoAggregationIntervalModule = class _DxoAggregationIntervalModule {
  /** @nocollapse */
  static ɵfac = function DxoAggregationIntervalModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAggregationIntervalModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAggregationIntervalModule,
    declarations: [DxoAggregationIntervalComponent],
    exports: [DxoAggregationIntervalComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAggregationIntervalComponent],
      exports: [DxoAggregationIntervalComponent]
    }]
  }], null, null);
})();
var DxoAggregationComponent = class _DxoAggregationComponent extends NestedOption {
  get calculate() {
    return this._getOption("calculate");
  }
  set calculate(value) {
    this._setOption("calculate", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get method() {
    return this._getOption("method");
  }
  set method(value) {
    this._setOption("method", value);
  }
  get _optionPath() {
    return "aggregation";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAggregationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAggregationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAggregationComponent,
    selectors: [["dxo-aggregation"]],
    inputs: {
      calculate: "calculate",
      enabled: "enabled",
      method: "method"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAggregationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-aggregation",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    calculate: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    method: [{
      type: Input
    }]
  });
})();
var DxoAggregationModule = class _DxoAggregationModule {
  /** @nocollapse */
  static ɵfac = function DxoAggregationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAggregationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAggregationModule,
    declarations: [DxoAggregationComponent],
    exports: [DxoAggregationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAggregationComponent],
      exports: [DxoAggregationComponent]
    }]
  }], null, null);
})();
var DxiAlert = class _DxiAlert extends CollectionNestedOption {
  get id() {
    return this._getOption("id");
  }
  set id(value) {
    this._setOption("id", value);
  }
  get message() {
    return this._getOption("message");
  }
  set message(value) {
    this._setOption("message", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiAlert_BaseFactory;
    return function DxiAlert_Factory(__ngFactoryType__) {
      return (ɵDxiAlert_BaseFactory || (ɵDxiAlert_BaseFactory = ɵɵgetInheritedFactory(_DxiAlert)))(__ngFactoryType__ || _DxiAlert);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiAlert,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiAlert_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAlert, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiAlertComponent = class _DxiAlertComponent extends DxiAlert {
  get _optionPath() {
    return "alerts";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiAlertComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiAlertComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiAlertComponent,
    selectors: [["dxi-alert"]],
    inputs: {
      id: "id",
      message: "message"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiAlertComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAlertComponent, [{
    type: Component,
    args: [{
      selector: "dxi-alert",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["id", "message"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiAlertModule = class _DxiAlertModule {
  /** @nocollapse */
  static ɵfac = function DxiAlertModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiAlertModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiAlertModule,
    declarations: [DxiAlertComponent],
    exports: [DxiAlertComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAlertModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiAlertComponent],
      exports: [DxiAlertComponent]
    }]
  }], null, null);
})();
var DxoAnimationConfig = class _DxoAnimationConfig extends NestedOption {
  get hide() {
    return this._getOption("hide");
  }
  set hide(value) {
    this._setOption("hide", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get duration() {
    return this._getOption("duration");
  }
  set duration(value) {
    this._setOption("duration", value);
  }
  get easing() {
    return this._getOption("easing");
  }
  set easing(value) {
    this._setOption("easing", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get maxPointCountSupported() {
    return this._getOption("maxPointCountSupported");
  }
  set maxPointCountSupported(value) {
    this._setOption("maxPointCountSupported", value);
  }
  get complete() {
    return this._getOption("complete");
  }
  set complete(value) {
    this._setOption("complete", value);
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get from() {
    return this._getOption("from");
  }
  set from(value) {
    this._setOption("from", value);
  }
  get staggerDelay() {
    return this._getOption("staggerDelay");
  }
  set staggerDelay(value) {
    this._setOption("staggerDelay", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get to() {
    return this._getOption("to");
  }
  set to(value) {
    this._setOption("to", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoAnimationConfig_BaseFactory;
    return function DxoAnimationConfig_Factory(__ngFactoryType__) {
      return (ɵDxoAnimationConfig_BaseFactory || (ɵDxoAnimationConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoAnimationConfig)))(__ngFactoryType__ || _DxoAnimationConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAnimationConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAnimationConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoAnimationComponent = class _DxoAnimationComponent extends DxoAnimationConfig {
  get _optionPath() {
    return "animation";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAnimationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAnimationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAnimationComponent,
    selectors: [["dxo-animation"]],
    inputs: {
      hide: "hide",
      show: "show",
      duration: "duration",
      easing: "easing",
      enabled: "enabled",
      maxPointCountSupported: "maxPointCountSupported",
      complete: "complete",
      delay: "delay",
      direction: "direction",
      from: "from",
      staggerDelay: "staggerDelay",
      start: "start",
      to: "to",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAnimationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-animation",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["hide", "show", "duration", "easing", "enabled", "maxPointCountSupported", "complete", "delay", "direction", "from", "staggerDelay", "start", "to", "type"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoAnimationModule = class _DxoAnimationModule {
  /** @nocollapse */
  static ɵfac = function DxoAnimationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAnimationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAnimationModule,
    declarations: [DxoAnimationComponent],
    exports: [DxoAnimationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAnimationComponent],
      exports: [DxoAnimationComponent]
    }]
  }], null, null);
})();
var DxiChartAnnotationConfig = class _DxiChartAnnotationConfig extends CollectionNestedOption {
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get argument() {
    return this._getOption("argument");
  }
  set argument(value) {
    this._setOption("argument", value);
  }
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get arrowWidth() {
    return this._getOption("arrowWidth");
  }
  set arrowWidth(value) {
    this._setOption("arrowWidth", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get description() {
    return this._getOption("description");
  }
  set description(value) {
    this._setOption("description", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get tooltipEnabled() {
    return this._getOption("tooltipEnabled");
  }
  set tooltipEnabled(value) {
    this._setOption("tooltipEnabled", value);
  }
  get tooltipTemplate() {
    return this._getOption("tooltipTemplate");
  }
  set tooltipTemplate(value) {
    this._setOption("tooltipTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get angle() {
    return this._getOption("angle");
  }
  set angle(value) {
    this._setOption("angle", value);
  }
  get radius() {
    return this._getOption("radius");
  }
  set radius(value) {
    this._setOption("radius", value);
  }
  get coordinates() {
    return this._getOption("coordinates");
  }
  set coordinates(value) {
    this._setOption("coordinates", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiChartAnnotationConfig_BaseFactory;
    return function DxiChartAnnotationConfig_Factory(__ngFactoryType__) {
      return (ɵDxiChartAnnotationConfig_BaseFactory || (ɵDxiChartAnnotationConfig_BaseFactory = ɵɵgetInheritedFactory(_DxiChartAnnotationConfig)))(__ngFactoryType__ || _DxiChartAnnotationConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiChartAnnotationConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiChartAnnotationConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChartAnnotationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiAnnotationComponent = class _DxiAnnotationComponent extends DxiChartAnnotationConfig {
  get _optionPath() {
    return "annotations";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiAnnotationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiAnnotationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiAnnotationComponent,
    selectors: [["dxi-annotation"]],
    inputs: {
      allowDragging: "allowDragging",
      argument: "argument",
      arrowLength: "arrowLength",
      arrowWidth: "arrowWidth",
      axis: "axis",
      border: "border",
      color: "color",
      customizeTooltip: "customizeTooltip",
      data: "data",
      description: "description",
      font: "font",
      height: "height",
      image: "image",
      name: "name",
      offsetX: "offsetX",
      offsetY: "offsetY",
      opacity: "opacity",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      series: "series",
      shadow: "shadow",
      template: "template",
      text: "text",
      textOverflow: "textOverflow",
      tooltipEnabled: "tooltipEnabled",
      tooltipTemplate: "tooltipTemplate",
      type: "type",
      value: "value",
      width: "width",
      wordWrap: "wordWrap",
      x: "x",
      y: "y",
      location: "location",
      angle: "angle",
      radius: "radius",
      coordinates: "coordinates"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiAnnotationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAnnotationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-annotation",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowDragging", "argument", "arrowLength", "arrowWidth", "axis", "border", "color", "customizeTooltip", "data", "description", "font", "height", "image", "name", "offsetX", "offsetY", "opacity", "paddingLeftRight", "paddingTopBottom", "series", "shadow", "template", "text", "textOverflow", "tooltipEnabled", "tooltipTemplate", "type", "value", "width", "wordWrap", "x", "y", "location", "angle", "radius", "coordinates"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiAnnotationModule = class _DxiAnnotationModule {
  /** @nocollapse */
  static ɵfac = function DxiAnnotationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiAnnotationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiAnnotationModule,
    declarations: [DxiAnnotationComponent],
    exports: [DxiAnnotationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAnnotationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiAnnotationComponent],
      exports: [DxiAnnotationComponent]
    }]
  }], null, null);
})();
var DxoApiKeyComponent = class _DxoApiKeyComponent extends NestedOption {
  get azure() {
    return this._getOption("azure");
  }
  set azure(value) {
    this._setOption("azure", value);
  }
  get bing() {
    return this._getOption("bing");
  }
  set bing(value) {
    this._setOption("bing", value);
  }
  get google() {
    return this._getOption("google");
  }
  set google(value) {
    this._setOption("google", value);
  }
  get googleStatic() {
    return this._getOption("googleStatic");
  }
  set googleStatic(value) {
    this._setOption("googleStatic", value);
  }
  get _optionPath() {
    return "apiKey";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoApiKeyComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoApiKeyComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoApiKeyComponent,
    selectors: [["dxo-api-key"]],
    inputs: {
      azure: "azure",
      bing: "bing",
      google: "google",
      googleStatic: "googleStatic"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoApiKeyComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoApiKeyComponent, [{
    type: Component,
    args: [{
      selector: "dxo-api-key",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    azure: [{
      type: Input
    }],
    bing: [{
      type: Input
    }],
    google: [{
      type: Input
    }],
    googleStatic: [{
      type: Input
    }]
  });
})();
var DxoApiKeyModule = class _DxoApiKeyModule {
  /** @nocollapse */
  static ɵfac = function DxoApiKeyModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoApiKeyModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoApiKeyModule,
    declarations: [DxoApiKeyComponent],
    exports: [DxoApiKeyComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoApiKeyModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoApiKeyComponent],
      exports: [DxoApiKeyComponent]
    }]
  }], null, null);
})();
var DxoAppointmentDraggingComponent = class _DxoAppointmentDraggingComponent extends NestedOption {
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get _optionPath() {
    return "appointmentDragging";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAppointmentDraggingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAppointmentDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAppointmentDraggingComponent,
    selectors: [["dxo-appointment-dragging"]],
    inputs: {
      autoScroll: "autoScroll",
      data: "data",
      group: "group",
      onAdd: "onAdd",
      onDragEnd: "onDragEnd",
      onDragMove: "onDragMove",
      onDragStart: "onDragStart",
      onRemove: "onRemove",
      scrollSensitivity: "scrollSensitivity",
      scrollSpeed: "scrollSpeed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAppointmentDraggingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAppointmentDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-appointment-dragging",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    autoScroll: [{
      type: Input
    }],
    data: [{
      type: Input
    }],
    group: [{
      type: Input
    }],
    onAdd: [{
      type: Input
    }],
    onDragEnd: [{
      type: Input
    }],
    onDragMove: [{
      type: Input
    }],
    onDragStart: [{
      type: Input
    }],
    onRemove: [{
      type: Input
    }],
    scrollSensitivity: [{
      type: Input
    }],
    scrollSpeed: [{
      type: Input
    }]
  });
})();
var DxoAppointmentDraggingModule = class _DxoAppointmentDraggingModule {
  /** @nocollapse */
  static ɵfac = function DxoAppointmentDraggingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAppointmentDraggingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAppointmentDraggingModule,
    declarations: [DxoAppointmentDraggingComponent],
    exports: [DxoAppointmentDraggingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAppointmentDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAppointmentDraggingComponent],
      exports: [DxoAppointmentDraggingComponent]
    }]
  }], null, null);
})();
var DxoChartCommonSeriesSettings = class _DxoChartCommonSeriesSettings extends NestedOption {
  get aggregation() {
    return this._getOption("aggregation");
  }
  set aggregation(value) {
    this._setOption("aggregation", value);
  }
  get area() {
    return this._getOption("area");
  }
  set area(value) {
    this._setOption("area", value);
  }
  get argumentField() {
    return this._getOption("argumentField");
  }
  set argumentField(value) {
    this._setOption("argumentField", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get bar() {
    return this._getOption("bar");
  }
  set bar(value) {
    this._setOption("bar", value);
  }
  get barOverlapGroup() {
    return this._getOption("barOverlapGroup");
  }
  set barOverlapGroup(value) {
    this._setOption("barOverlapGroup", value);
  }
  get barPadding() {
    return this._getOption("barPadding");
  }
  set barPadding(value) {
    this._setOption("barPadding", value);
  }
  get barWidth() {
    return this._getOption("barWidth");
  }
  set barWidth(value) {
    this._setOption("barWidth", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get bubble() {
    return this._getOption("bubble");
  }
  set bubble(value) {
    this._setOption("bubble", value);
  }
  get candlestick() {
    return this._getOption("candlestick");
  }
  set candlestick(value) {
    this._setOption("candlestick", value);
  }
  get closeValueField() {
    return this._getOption("closeValueField");
  }
  set closeValueField(value) {
    this._setOption("closeValueField", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get fullstackedarea() {
    return this._getOption("fullstackedarea");
  }
  set fullstackedarea(value) {
    this._setOption("fullstackedarea", value);
  }
  get fullstackedbar() {
    return this._getOption("fullstackedbar");
  }
  set fullstackedbar(value) {
    this._setOption("fullstackedbar", value);
  }
  get fullstackedline() {
    return this._getOption("fullstackedline");
  }
  set fullstackedline(value) {
    this._setOption("fullstackedline", value);
  }
  get fullstackedspline() {
    return this._getOption("fullstackedspline");
  }
  set fullstackedspline(value) {
    this._setOption("fullstackedspline", value);
  }
  get fullstackedsplinearea() {
    return this._getOption("fullstackedsplinearea");
  }
  set fullstackedsplinearea(value) {
    this._setOption("fullstackedsplinearea", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get ignoreEmptyPoints() {
    return this._getOption("ignoreEmptyPoints");
  }
  set ignoreEmptyPoints(value) {
    this._setOption("ignoreEmptyPoints", value);
  }
  get innerColor() {
    return this._getOption("innerColor");
  }
  set innerColor(value) {
    this._setOption("innerColor", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get line() {
    return this._getOption("line");
  }
  set line(value) {
    this._setOption("line", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get maxLabelCount() {
    return this._getOption("maxLabelCount");
  }
  set maxLabelCount(value) {
    this._setOption("maxLabelCount", value);
  }
  get minBarSize() {
    return this._getOption("minBarSize");
  }
  set minBarSize(value) {
    this._setOption("minBarSize", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get openValueField() {
    return this._getOption("openValueField");
  }
  set openValueField(value) {
    this._setOption("openValueField", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get point() {
    return this._getOption("point");
  }
  set point(value) {
    this._setOption("point", value);
  }
  get rangearea() {
    return this._getOption("rangearea");
  }
  set rangearea(value) {
    this._setOption("rangearea", value);
  }
  get rangebar() {
    return this._getOption("rangebar");
  }
  set rangebar(value) {
    this._setOption("rangebar", value);
  }
  get rangeValue1Field() {
    return this._getOption("rangeValue1Field");
  }
  set rangeValue1Field(value) {
    this._setOption("rangeValue1Field", value);
  }
  get rangeValue2Field() {
    return this._getOption("rangeValue2Field");
  }
  set rangeValue2Field(value) {
    this._setOption("rangeValue2Field", value);
  }
  get reduction() {
    return this._getOption("reduction");
  }
  set reduction(value) {
    this._setOption("reduction", value);
  }
  get scatter() {
    return this._getOption("scatter");
  }
  set scatter(value) {
    this._setOption("scatter", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get showInLegend() {
    return this._getOption("showInLegend");
  }
  set showInLegend(value) {
    this._setOption("showInLegend", value);
  }
  get sizeField() {
    return this._getOption("sizeField");
  }
  set sizeField(value) {
    this._setOption("sizeField", value);
  }
  get spline() {
    return this._getOption("spline");
  }
  set spline(value) {
    this._setOption("spline", value);
  }
  get splinearea() {
    return this._getOption("splinearea");
  }
  set splinearea(value) {
    this._setOption("splinearea", value);
  }
  get stack() {
    return this._getOption("stack");
  }
  set stack(value) {
    this._setOption("stack", value);
  }
  get stackedarea() {
    return this._getOption("stackedarea");
  }
  set stackedarea(value) {
    this._setOption("stackedarea", value);
  }
  get stackedbar() {
    return this._getOption("stackedbar");
  }
  set stackedbar(value) {
    this._setOption("stackedbar", value);
  }
  get stackedline() {
    return this._getOption("stackedline");
  }
  set stackedline(value) {
    this._setOption("stackedline", value);
  }
  get stackedspline() {
    return this._getOption("stackedspline");
  }
  set stackedspline(value) {
    this._setOption("stackedspline", value);
  }
  get stackedsplinearea() {
    return this._getOption("stackedsplinearea");
  }
  set stackedsplinearea(value) {
    this._setOption("stackedsplinearea", value);
  }
  get steparea() {
    return this._getOption("steparea");
  }
  set steparea(value) {
    this._setOption("steparea", value);
  }
  get stepline() {
    return this._getOption("stepline");
  }
  set stepline(value) {
    this._setOption("stepline", value);
  }
  get stock() {
    return this._getOption("stock");
  }
  set stock(value) {
    this._setOption("stock", value);
  }
  get tagField() {
    return this._getOption("tagField");
  }
  set tagField(value) {
    this._setOption("tagField", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueErrorBar() {
    return this._getOption("valueErrorBar");
  }
  set valueErrorBar(value) {
    this._setOption("valueErrorBar", value);
  }
  get valueField() {
    return this._getOption("valueField");
  }
  set valueField(value) {
    this._setOption("valueField", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get minSegmentSize() {
    return this._getOption("minSegmentSize");
  }
  set minSegmentSize(value) {
    this._setOption("minSegmentSize", value);
  }
  get smallValuesGrouping() {
    return this._getOption("smallValuesGrouping");
  }
  set smallValuesGrouping(value) {
    this._setOption("smallValuesGrouping", value);
  }
  get closed() {
    return this._getOption("closed");
  }
  set closed(value) {
    this._setOption("closed", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoChartCommonSeriesSettings_BaseFactory;
    return function DxoChartCommonSeriesSettings_Factory(__ngFactoryType__) {
      return (ɵDxoChartCommonSeriesSettings_BaseFactory || (ɵDxoChartCommonSeriesSettings_BaseFactory = ɵɵgetInheritedFactory(_DxoChartCommonSeriesSettings)))(__ngFactoryType__ || _DxoChartCommonSeriesSettings);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoChartCommonSeriesSettings,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoChartCommonSeriesSettings_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartCommonSeriesSettings, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoAreaComponent = class _DxoAreaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "area";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAreaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAreaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAreaComponent,
    selectors: [["dxo-area"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAreaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAreaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-area",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoAreaModule = class _DxoAreaModule {
  /** @nocollapse */
  static ɵfac = function DxoAreaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAreaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAreaModule,
    declarations: [DxoAreaComponent],
    exports: [DxoAreaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAreaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAreaComponent],
      exports: [DxoAreaComponent]
    }]
  }], null, null);
})();
var DxiVizScaleBreak = class _DxiVizScaleBreak extends CollectionNestedOption {
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiVizScaleBreak_BaseFactory;
    return function DxiVizScaleBreak_Factory(__ngFactoryType__) {
      return (ɵDxiVizScaleBreak_BaseFactory || (ɵDxiVizScaleBreak_BaseFactory = ɵɵgetInheritedFactory(_DxiVizScaleBreak)))(__ngFactoryType__ || _DxiVizScaleBreak);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiVizScaleBreak,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiVizScaleBreak_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiVizScaleBreak, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiBreakComponent = class _DxiBreakComponent extends DxiVizScaleBreak {
  get _optionPath() {
    return "breaks";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiBreakComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiBreakComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiBreakComponent,
    selectors: [["dxi-break"]],
    inputs: {
      endValue: "endValue",
      startValue: "startValue"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiBreakComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiBreakComponent, [{
    type: Component,
    args: [{
      selector: "dxi-break",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["endValue", "startValue"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiBreakModule = class _DxiBreakModule {
  /** @nocollapse */
  static ɵfac = function DxiBreakModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiBreakModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiBreakModule,
    declarations: [DxiBreakComponent],
    exports: [DxiBreakComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiBreakModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiBreakComponent],
      exports: [DxiBreakComponent]
    }]
  }], null, null);
})();
var DxiConstantLineComponent = class _DxiConstantLineComponent extends CollectionNestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get displayBehindSeries() {
    return this._getOption("displayBehindSeries");
  }
  set displayBehindSeries(value) {
    this._setOption("displayBehindSeries", value);
  }
  get extendAxis() {
    return this._getOption("extendAxis");
  }
  set extendAxis(value) {
    this._setOption("extendAxis", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "constantLines";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiConstantLineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiConstantLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiConstantLineComponent,
    selectors: [["dxi-constant-line"]],
    inputs: {
      color: "color",
      dashStyle: "dashStyle",
      displayBehindSeries: "displayBehindSeries",
      extendAxis: "extendAxis",
      label: "label",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      value: "value",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiConstantLineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConstantLineComponent, [{
    type: Component,
    args: [{
      selector: "dxi-constant-line",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    displayBehindSeries: [{
      type: Input
    }],
    extendAxis: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxiConstantLineModule = class _DxiConstantLineModule {
  /** @nocollapse */
  static ɵfac = function DxiConstantLineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiConstantLineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiConstantLineModule,
    declarations: [DxiConstantLineComponent],
    exports: [DxiConstantLineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConstantLineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiConstantLineComponent],
      exports: [DxiConstantLineComponent]
    }]
  }], null, null);
})();
var DxiStripComponent = class _DxiStripComponent extends CollectionNestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get _optionPath() {
    return "strips";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiStripComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiStripComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiStripComponent,
    selectors: [["dxi-strip"]],
    inputs: {
      color: "color",
      endValue: "endValue",
      label: "label",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      startValue: "startValue"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiStripComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripComponent, [{
    type: Component,
    args: [{
      selector: "dxi-strip",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    endValue: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    startValue: [{
      type: Input
    }]
  });
})();
var DxiStripModule = class _DxiStripModule {
  /** @nocollapse */
  static ɵfac = function DxiStripModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiStripModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiStripModule,
    declarations: [DxiStripComponent],
    exports: [DxiStripComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiStripComponent],
      exports: [DxiStripComponent]
    }]
  }], null, null);
})();
var DxoArgumentAxisComponent = class _DxoArgumentAxisComponent extends NestedOption {
  get aggregateByCategory() {
    return this._getOption("aggregateByCategory");
  }
  set aggregateByCategory(value) {
    this._setOption("aggregateByCategory", value);
  }
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get aggregationGroupWidth() {
    return this._getOption("aggregationGroupWidth");
  }
  set aggregationGroupWidth(value) {
    this._setOption("aggregationGroupWidth", value);
  }
  get aggregationInterval() {
    return this._getOption("aggregationInterval");
  }
  set aggregationInterval(value) {
    this._setOption("aggregationInterval", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get customPosition() {
    return this._getOption("customPosition");
  }
  set customPosition(value) {
    this._setOption("customPosition", value);
  }
  get customPositionAxis() {
    return this._getOption("customPositionAxis");
  }
  set customPositionAxis(value) {
    this._setOption("customPositionAxis", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get holidays() {
    return this._getOption("holidays");
  }
  set holidays(value) {
    this._setOption("holidays", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get singleWorkdays() {
    return this._getOption("singleWorkdays");
  }
  set singleWorkdays(value) {
    this._setOption("singleWorkdays", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get workdaysOnly() {
    return this._getOption("workdaysOnly");
  }
  set workdaysOnly(value) {
    this._setOption("workdaysOnly", value);
  }
  get workWeek() {
    return this._getOption("workWeek");
  }
  set workWeek(value) {
    this._setOption("workWeek", value);
  }
  get firstPointOnStartAngle() {
    return this._getOption("firstPointOnStartAngle");
  }
  set firstPointOnStartAngle(value) {
    this._setOption("firstPointOnStartAngle", value);
  }
  get originValue() {
    return this._getOption("originValue");
  }
  set originValue(value) {
    this._setOption("originValue", value);
  }
  get period() {
    return this._getOption("period");
  }
  set period(value) {
    this._setOption("period", value);
  }
  get startAngle() {
    return this._getOption("startAngle");
  }
  set startAngle(value) {
    this._setOption("startAngle", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  categoriesChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visualRangeChange;
  get _optionPath() {
    return "argumentAxis";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "categoriesChange"
    }, {
      emit: "visualRangeChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoArgumentAxisComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoArgumentAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoArgumentAxisComponent,
    selectors: [["dxo-argument-axis"]],
    contentQueries: function DxoArgumentAxisComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
      }
    },
    inputs: {
      aggregateByCategory: "aggregateByCategory",
      aggregatedPointsPosition: "aggregatedPointsPosition",
      aggregationGroupWidth: "aggregationGroupWidth",
      aggregationInterval: "aggregationInterval",
      allowDecimals: "allowDecimals",
      argumentType: "argumentType",
      axisDivisionFactor: "axisDivisionFactor",
      breaks: "breaks",
      breakStyle: "breakStyle",
      categories: "categories",
      color: "color",
      constantLines: "constantLines",
      constantLineStyle: "constantLineStyle",
      customPosition: "customPosition",
      customPositionAxis: "customPositionAxis",
      discreteAxisDivisionMode: "discreteAxisDivisionMode",
      endOnTick: "endOnTick",
      grid: "grid",
      holidays: "holidays",
      hoverMode: "hoverMode",
      inverted: "inverted",
      label: "label",
      linearThreshold: "linearThreshold",
      logarithmBase: "logarithmBase",
      maxValueMargin: "maxValueMargin",
      minorGrid: "minorGrid",
      minorTick: "minorTick",
      minorTickCount: "minorTickCount",
      minorTickInterval: "minorTickInterval",
      minValueMargin: "minValueMargin",
      minVisualRangeLength: "minVisualRangeLength",
      offset: "offset",
      opacity: "opacity",
      placeholderSize: "placeholderSize",
      position: "position",
      singleWorkdays: "singleWorkdays",
      strips: "strips",
      stripStyle: "stripStyle",
      tick: "tick",
      tickInterval: "tickInterval",
      title: "title",
      type: "type",
      valueMarginsEnabled: "valueMarginsEnabled",
      visible: "visible",
      visualRange: "visualRange",
      visualRangeUpdateMode: "visualRangeUpdateMode",
      wholeRange: "wholeRange",
      width: "width",
      workdaysOnly: "workdaysOnly",
      workWeek: "workWeek",
      firstPointOnStartAngle: "firstPointOnStartAngle",
      originValue: "originValue",
      period: "period",
      startAngle: "startAngle"
    },
    outputs: {
      categoriesChange: "categoriesChange",
      visualRangeChange: "visualRangeChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoArgumentAxisComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxo-argument-axis",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    aggregateByCategory: [{
      type: Input
    }],
    aggregatedPointsPosition: [{
      type: Input
    }],
    aggregationGroupWidth: [{
      type: Input
    }],
    aggregationInterval: [{
      type: Input
    }],
    allowDecimals: [{
      type: Input
    }],
    argumentType: [{
      type: Input
    }],
    axisDivisionFactor: [{
      type: Input
    }],
    breaks: [{
      type: Input
    }],
    breakStyle: [{
      type: Input
    }],
    categories: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    constantLines: [{
      type: Input
    }],
    constantLineStyle: [{
      type: Input
    }],
    customPosition: [{
      type: Input
    }],
    customPositionAxis: [{
      type: Input
    }],
    discreteAxisDivisionMode: [{
      type: Input
    }],
    endOnTick: [{
      type: Input
    }],
    grid: [{
      type: Input
    }],
    holidays: [{
      type: Input
    }],
    hoverMode: [{
      type: Input
    }],
    inverted: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    linearThreshold: [{
      type: Input
    }],
    logarithmBase: [{
      type: Input
    }],
    maxValueMargin: [{
      type: Input
    }],
    minorGrid: [{
      type: Input
    }],
    minorTick: [{
      type: Input
    }],
    minorTickCount: [{
      type: Input
    }],
    minorTickInterval: [{
      type: Input
    }],
    minValueMargin: [{
      type: Input
    }],
    minVisualRangeLength: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    placeholderSize: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    singleWorkdays: [{
      type: Input
    }],
    strips: [{
      type: Input
    }],
    stripStyle: [{
      type: Input
    }],
    tick: [{
      type: Input
    }],
    tickInterval: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    valueMarginsEnabled: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    visualRange: [{
      type: Input
    }],
    visualRangeUpdateMode: [{
      type: Input
    }],
    wholeRange: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    workdaysOnly: [{
      type: Input
    }],
    workWeek: [{
      type: Input
    }],
    firstPointOnStartAngle: [{
      type: Input
    }],
    originValue: [{
      type: Input
    }],
    period: [{
      type: Input
    }],
    startAngle: [{
      type: Input
    }],
    categoriesChange: [{
      type: Output
    }],
    visualRangeChange: [{
      type: Output
    }],
    breaksChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiBreakComponent)]
    }],
    constantLinesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiConstantLineComponent)]
    }],
    stripsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiStripComponent)]
    }]
  });
})();
var DxoArgumentAxisModule = class _DxoArgumentAxisModule {
  /** @nocollapse */
  static ɵfac = function DxoArgumentAxisModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoArgumentAxisModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoArgumentAxisModule,
    declarations: [DxoArgumentAxisComponent],
    exports: [DxoArgumentAxisComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoArgumentAxisComponent],
      exports: [DxoArgumentAxisComponent]
    }]
  }], null, null);
})();
var DxoFormat = class _DxoFormat extends NestedOption {
  get currency() {
    return this._getOption("currency");
  }
  set currency(value) {
    this._setOption("currency", value);
  }
  get formatter() {
    return this._getOption("formatter");
  }
  set formatter(value) {
    this._setOption("formatter", value);
  }
  get parser() {
    return this._getOption("parser");
  }
  set parser(value) {
    this._setOption("parser", value);
  }
  get precision() {
    return this._getOption("precision");
  }
  set precision(value) {
    this._setOption("precision", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get useCurrencyAccountingStyle() {
    return this._getOption("useCurrencyAccountingStyle");
  }
  set useCurrencyAccountingStyle(value) {
    this._setOption("useCurrencyAccountingStyle", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFormat_BaseFactory;
    return function DxoFormat_Factory(__ngFactoryType__) {
      return (ɵDxoFormat_BaseFactory || (ɵDxoFormat_BaseFactory = ɵɵgetInheritedFactory(_DxoFormat)))(__ngFactoryType__ || _DxoFormat);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormat,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormat_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormat, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoArgumentFormatComponent = class _DxoArgumentFormatComponent extends DxoFormat {
  get _optionPath() {
    return "argumentFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoArgumentFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoArgumentFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoArgumentFormatComponent,
    selectors: [["dxo-argument-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoArgumentFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-argument-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoArgumentFormatModule = class _DxoArgumentFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoArgumentFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoArgumentFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoArgumentFormatModule,
    declarations: [DxoArgumentFormatComponent],
    exports: [DxoArgumentFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoArgumentFormatComponent],
      exports: [DxoArgumentFormatComponent]
    }]
  }], null, null);
})();
var DxoAtComponent = class _DxoAtComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "at";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAtComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAtComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAtComponent,
    selectors: [["dxo-at"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAtComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAtComponent, [{
    type: Component,
    args: [{
      selector: "dxo-at",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoAtModule = class _DxoAtModule {
  /** @nocollapse */
  static ɵfac = function DxoAtModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAtModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAtModule,
    declarations: [DxoAtComponent],
    exports: [DxoAtComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAtModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAtComponent],
      exports: [DxoAtComponent]
    }]
  }], null, null);
})();
var DxoUser = class _DxoUser extends NestedOption {
  get avatarAlt() {
    return this._getOption("avatarAlt");
  }
  set avatarAlt(value) {
    this._setOption("avatarAlt", value);
  }
  get avatarUrl() {
    return this._getOption("avatarUrl");
  }
  set avatarUrl(value) {
    this._setOption("avatarUrl", value);
  }
  get id() {
    return this._getOption("id");
  }
  set id(value) {
    this._setOption("id", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoUser_BaseFactory;
    return function DxoUser_Factory(__ngFactoryType__) {
      return (ɵDxoUser_BaseFactory || (ɵDxoUser_BaseFactory = ɵɵgetInheritedFactory(_DxoUser)))(__ngFactoryType__ || _DxoUser);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoUser,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoUser_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUser, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoAuthorComponent = class _DxoAuthorComponent extends DxoUser {
  get _optionPath() {
    return "author";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAuthorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAuthorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAuthorComponent,
    selectors: [["dxo-author"]],
    inputs: {
      avatarAlt: "avatarAlt",
      avatarUrl: "avatarUrl",
      id: "id",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAuthorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAuthorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-author",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["avatarAlt", "avatarUrl", "id", "name"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoAuthorModule = class _DxoAuthorModule {
  /** @nocollapse */
  static ɵfac = function DxoAuthorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAuthorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAuthorModule,
    declarations: [DxoAuthorComponent],
    exports: [DxoAuthorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAuthorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAuthorComponent],
      exports: [DxoAuthorComponent]
    }]
  }], null, null);
})();
var DxoAutoLayoutComponent = class _DxoAutoLayoutComponent extends NestedOption {
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "autoLayout";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoAutoLayoutComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAutoLayoutComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAutoLayoutComponent,
    selectors: [["dxo-auto-layout"]],
    inputs: {
      orientation: "orientation",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAutoLayoutComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAutoLayoutComponent, [{
    type: Component,
    args: [{
      selector: "dxo-auto-layout",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    orientation: [{
      type: Input
    }],
    type: [{
      type: Input
    }]
  });
})();
var DxoAutoLayoutModule = class _DxoAutoLayoutModule {
  /** @nocollapse */
  static ɵfac = function DxoAutoLayoutModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoAutoLayoutModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoAutoLayoutModule,
    declarations: [DxoAutoLayoutComponent],
    exports: [DxoAutoLayoutComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAutoLayoutModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoAutoLayoutComponent],
      exports: [DxoAutoLayoutComponent]
    }]
  }], null, null);
})();
var DxoChartsColor = class _DxoChartsColor extends NestedOption {
  get base() {
    return this._getOption("base");
  }
  set base(value) {
    this._setOption("base", value);
  }
  get fillId() {
    return this._getOption("fillId");
  }
  set fillId(value) {
    this._setOption("fillId", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoChartsColor_BaseFactory;
    return function DxoChartsColor_Factory(__ngFactoryType__) {
      return (ɵDxoChartsColor_BaseFactory || (ɵDxoChartsColor_BaseFactory = ɵɵgetInheritedFactory(_DxoChartsColor)))(__ngFactoryType__ || _DxoChartsColor);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoChartsColor,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoChartsColor_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartsColor, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoBackgroundColorComponent = class _DxoBackgroundColorComponent extends DxoChartsColor {
  get _optionPath() {
    return "backgroundColor";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBackgroundColorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBackgroundColorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBackgroundColorComponent,
    selectors: [["dxo-background-color"]],
    inputs: {
      base: "base",
      fillId: "fillId"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBackgroundColorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundColorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-background-color",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["base", "fillId"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoBackgroundColorModule = class _DxoBackgroundColorModule {
  /** @nocollapse */
  static ɵfac = function DxoBackgroundColorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBackgroundColorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBackgroundColorModule,
    declarations: [DxoBackgroundColorComponent],
    exports: [DxoBackgroundColorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundColorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBackgroundColorComponent],
      exports: [DxoBackgroundColorComponent]
    }]
  }], null, null);
})();
var DxoBackgroundComponent = class _DxoBackgroundComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get _optionPath() {
    return "background";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBackgroundComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBackgroundComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBackgroundComponent,
    selectors: [["dxo-background"]],
    inputs: {
      color: "color",
      image: "image",
      visible: "visible",
      borderColor: "borderColor"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBackgroundComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundComponent, [{
    type: Component,
    args: [{
      selector: "dxo-background",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    image: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    borderColor: [{
      type: Input
    }]
  });
})();
var DxoBackgroundModule = class _DxoBackgroundModule {
  /** @nocollapse */
  static ɵfac = function DxoBackgroundModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBackgroundModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBackgroundModule,
    declarations: [DxoBackgroundComponent],
    exports: [DxoBackgroundComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBackgroundComponent],
      exports: [DxoBackgroundComponent]
    }]
  }], null, null);
})();
var DxoBarComponent = class _DxoBarComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "bar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBarComponent,
    selectors: [["dxo-bar"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-bar",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoBarModule = class _DxoBarModule {
  /** @nocollapse */
  static ɵfac = function DxoBarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBarModule,
    declarations: [DxoBarComponent],
    exports: [DxoBarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBarComponent],
      exports: [DxoBarComponent]
    }]
  }], null, null);
})();
var DxoBehaviorComponent = class _DxoBehaviorComponent extends NestedOption {
  get allowSlidersSwap() {
    return this._getOption("allowSlidersSwap");
  }
  set allowSlidersSwap(value) {
    this._setOption("allowSlidersSwap", value);
  }
  get animationEnabled() {
    return this._getOption("animationEnabled");
  }
  set animationEnabled(value) {
    this._setOption("animationEnabled", value);
  }
  get callValueChanged() {
    return this._getOption("callValueChanged");
  }
  set callValueChanged(value) {
    this._setOption("callValueChanged", value);
  }
  get manualRangeSelectionEnabled() {
    return this._getOption("manualRangeSelectionEnabled");
  }
  set manualRangeSelectionEnabled(value) {
    this._setOption("manualRangeSelectionEnabled", value);
  }
  get moveSelectedRangeByClick() {
    return this._getOption("moveSelectedRangeByClick");
  }
  set moveSelectedRangeByClick(value) {
    this._setOption("moveSelectedRangeByClick", value);
  }
  get snapToTicks() {
    return this._getOption("snapToTicks");
  }
  set snapToTicks(value) {
    this._setOption("snapToTicks", value);
  }
  get valueChangeMode() {
    return this._getOption("valueChangeMode");
  }
  set valueChangeMode(value) {
    this._setOption("valueChangeMode", value);
  }
  get _optionPath() {
    return "behavior";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBehaviorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBehaviorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBehaviorComponent,
    selectors: [["dxo-behavior"]],
    inputs: {
      allowSlidersSwap: "allowSlidersSwap",
      animationEnabled: "animationEnabled",
      callValueChanged: "callValueChanged",
      manualRangeSelectionEnabled: "manualRangeSelectionEnabled",
      moveSelectedRangeByClick: "moveSelectedRangeByClick",
      snapToTicks: "snapToTicks",
      valueChangeMode: "valueChangeMode"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBehaviorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBehaviorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-behavior",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowSlidersSwap: [{
      type: Input
    }],
    animationEnabled: [{
      type: Input
    }],
    callValueChanged: [{
      type: Input
    }],
    manualRangeSelectionEnabled: [{
      type: Input
    }],
    moveSelectedRangeByClick: [{
      type: Input
    }],
    snapToTicks: [{
      type: Input
    }],
    valueChangeMode: [{
      type: Input
    }]
  });
})();
var DxoBehaviorModule = class _DxoBehaviorModule {
  /** @nocollapse */
  static ɵfac = function DxoBehaviorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBehaviorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBehaviorModule,
    declarations: [DxoBehaviorComponent],
    exports: [DxoBehaviorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBehaviorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBehaviorComponent],
      exports: [DxoBehaviorComponent]
    }]
  }], null, null);
})();
var DxoBorderComponent = class _DxoBorderComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get bottom() {
    return this._getOption("bottom");
  }
  set bottom(value) {
    this._setOption("bottom", value);
  }
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
  get _optionPath() {
    return "border";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBorderComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBorderComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBorderComponent,
    selectors: [["dxo-border"]],
    inputs: {
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      opacity: "opacity",
      visible: "visible",
      width: "width",
      bottom: "bottom",
      left: "left",
      right: "right",
      top: "top"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBorderComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBorderComponent, [{
    type: Component,
    args: [{
      selector: "dxo-border",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    cornerRadius: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    bottom: [{
      type: Input
    }],
    left: [{
      type: Input
    }],
    right: [{
      type: Input
    }],
    top: [{
      type: Input
    }]
  });
})();
var DxoBorderModule = class _DxoBorderModule {
  /** @nocollapse */
  static ɵfac = function DxoBorderModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBorderModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBorderModule,
    declarations: [DxoBorderComponent],
    exports: [DxoBorderComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBorderModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBorderComponent],
      exports: [DxoBorderComponent]
    }]
  }], null, null);
})();
var DxoBoundaryOffsetComponent = class _DxoBoundaryOffsetComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "boundaryOffset";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBoundaryOffsetComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBoundaryOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBoundaryOffsetComponent,
    selectors: [["dxo-boundary-offset"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBoundaryOffsetComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoundaryOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-boundary-offset",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoBoundaryOffsetModule = class _DxoBoundaryOffsetModule {
  /** @nocollapse */
  static ɵfac = function DxoBoundaryOffsetModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBoundaryOffsetModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBoundaryOffsetModule,
    declarations: [DxoBoundaryOffsetComponent],
    exports: [DxoBoundaryOffsetComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoundaryOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBoundaryOffsetComponent],
      exports: [DxoBoundaryOffsetComponent]
    }]
  }], null, null);
})();
var DxoBoxOptions = class _DxoBoxOptions extends NestedOption {
  get align() {
    return this._getOption("align");
  }
  set align(value) {
    this._setOption("align", value);
  }
  get crossAlign() {
    return this._getOption("crossAlign");
  }
  set crossAlign(value) {
    this._setOption("crossAlign", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get itemHoldTimeout() {
    return this._getOption("itemHoldTimeout");
  }
  set itemHoldTimeout(value) {
    this._setOption("itemHoldTimeout", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onItemClick() {
    return this._getOption("onItemClick");
  }
  set onItemClick(value) {
    this._setOption("onItemClick", value);
  }
  get onItemContextMenu() {
    return this._getOption("onItemContextMenu");
  }
  set onItemContextMenu(value) {
    this._setOption("onItemContextMenu", value);
  }
  get onItemHold() {
    return this._getOption("onItemHold");
  }
  set onItemHold(value) {
    this._setOption("onItemHold", value);
  }
  get onItemRendered() {
    return this._getOption("onItemRendered");
  }
  set onItemRendered(value) {
    this._setOption("onItemRendered", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoBoxOptions_BaseFactory;
    return function DxoBoxOptions_Factory(__ngFactoryType__) {
      return (ɵDxoBoxOptions_BaseFactory || (ɵDxoBoxOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoBoxOptions)))(__ngFactoryType__ || _DxoBoxOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBoxOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBoxOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiButtonGroupItem = class _DxiButtonGroupItem extends CollectionNestedOption {
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get html() {
    return this._getOption("html");
  }
  set html(value) {
    this._setOption("html", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get titleTemplate() {
    return this._getOption("titleTemplate");
  }
  set titleTemplate(value) {
    this._setOption("titleTemplate", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get box() {
    return this._getOption("box");
  }
  set box(value) {
    this._setOption("box", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get author() {
    return this._getOption("author");
  }
  set author(value) {
    this._setOption("author", value);
  }
  get id() {
    return this._getOption("id");
  }
  set id(value) {
    this._setOption("id", value);
  }
  get timestamp() {
    return this._getOption("timestamp");
  }
  set timestamp(value) {
    this._setOption("timestamp", value);
  }
  get beginGroup() {
    return this._getOption("beginGroup");
  }
  set beginGroup(value) {
    this._setOption("beginGroup", value);
  }
  get closeMenuOnClick() {
    return this._getOption("closeMenuOnClick");
  }
  set closeMenuOnClick(value) {
    this._setOption("closeMenuOnClick", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get selectable() {
    return this._getOption("selectable");
  }
  set selectable(value) {
    this._setOption("selectable", value);
  }
  get selected() {
    return this._getOption("selected");
  }
  set selected(value) {
    this._setOption("selected", value);
  }
  get colSpan() {
    return this._getOption("colSpan");
  }
  set colSpan(value) {
    this._setOption("colSpan", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorType() {
    return this._getOption("editorType");
  }
  set editorType(value) {
    this._setOption("editorType", value);
  }
  get helpText() {
    return this._getOption("helpText");
  }
  set helpText(value) {
    this._setOption("helpText", value);
  }
  get isRequired() {
    return this._getOption("isRequired");
  }
  set isRequired(value) {
    this._setOption("isRequired", value);
  }
  get itemType() {
    return this._getOption("itemType");
  }
  set itemType(value) {
    this._setOption("itemType", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get captionTemplate() {
    return this._getOption("captionTemplate");
  }
  set captionTemplate(value) {
    this._setOption("captionTemplate", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get tabPanelOptions() {
    return this._getOption("tabPanelOptions");
  }
  set tabPanelOptions(value) {
    this._setOption("tabPanelOptions", value);
  }
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get badge() {
    return this._getOption("badge");
  }
  set badge(value) {
    this._setOption("badge", value);
  }
  get tabTemplate() {
    return this._getOption("tabTemplate");
  }
  set tabTemplate(value) {
    this._setOption("tabTemplate", value);
  }
  get buttonOptions() {
    return this._getOption("buttonOptions");
  }
  set buttonOptions(value) {
    this._setOption("buttonOptions", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get menuItemTemplate() {
    return this._getOption("menuItemTemplate");
  }
  set menuItemTemplate(value) {
    this._setOption("menuItemTemplate", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get imageAlt() {
    return this._getOption("imageAlt");
  }
  set imageAlt(value) {
    this._setOption("imageAlt", value);
  }
  get imageSrc() {
    return this._getOption("imageSrc");
  }
  set imageSrc(value) {
    this._setOption("imageSrc", value);
  }
  get acceptedValues() {
    return this._getOption("acceptedValues");
  }
  set acceptedValues(value) {
    this._setOption("acceptedValues", value);
  }
  get formatName() {
    return this._getOption("formatName");
  }
  set formatName(value) {
    this._setOption("formatName", value);
  }
  get formatValues() {
    return this._getOption("formatValues");
  }
  set formatValues(value) {
    this._setOption("formatValues", value);
  }
  get key() {
    return this._getOption("key");
  }
  set key(value) {
    this._setOption("key", value);
  }
  get showChevron() {
    return this._getOption("showChevron");
  }
  set showChevron(value) {
    this._setOption("showChevron", value);
  }
  get linkAttr() {
    return this._getOption("linkAttr");
  }
  set linkAttr(value) {
    this._setOption("linkAttr", value);
  }
  get url() {
    return this._getOption("url");
  }
  set url(value) {
    this._setOption("url", value);
  }
  get collapsed() {
    return this._getOption("collapsed");
  }
  set collapsed(value) {
    this._setOption("collapsed", value);
  }
  get collapsedSize() {
    return this._getOption("collapsedSize");
  }
  set collapsedSize(value) {
    this._setOption("collapsedSize", value);
  }
  get collapsible() {
    return this._getOption("collapsible");
  }
  set collapsible(value) {
    this._setOption("collapsible", value);
  }
  get maxSize() {
    return this._getOption("maxSize");
  }
  set maxSize(value) {
    this._setOption("maxSize", value);
  }
  get minSize() {
    return this._getOption("minSize");
  }
  set minSize(value) {
    this._setOption("minSize", value);
  }
  get resizable() {
    return this._getOption("resizable");
  }
  set resizable(value) {
    this._setOption("resizable", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get splitter() {
    return this._getOption("splitter");
  }
  set splitter(value) {
    this._setOption("splitter", value);
  }
  get heightRatio() {
    return this._getOption("heightRatio");
  }
  set heightRatio(value) {
    this._setOption("heightRatio", value);
  }
  get widthRatio() {
    return this._getOption("widthRatio");
  }
  set widthRatio(value) {
    this._setOption("widthRatio", value);
  }
  get expanded() {
    return this._getOption("expanded");
  }
  set expanded(value) {
    this._setOption("expanded", value);
  }
  get hasItems() {
    return this._getOption("hasItems");
  }
  set hasItems(value) {
    this._setOption("hasItems", value);
  }
  get parentId() {
    return this._getOption("parentId");
  }
  set parentId(value) {
    this._setOption("parentId", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiButtonGroupItem_BaseFactory;
    return function DxiButtonGroupItem_Factory(__ngFactoryType__) {
      return (ɵDxiButtonGroupItem_BaseFactory || (ɵDxiButtonGroupItem_BaseFactory = ɵɵgetInheritedFactory(_DxiButtonGroupItem)))(__ngFactoryType__ || _DxiButtonGroupItem);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiButtonGroupItem,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiButtonGroupItem_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonGroupItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiValidationRuleComponent = class _DxiValidationRuleComponent extends CollectionNestedOption {
  get message() {
    return this._getOption("message");
  }
  set message(value) {
    this._setOption("message", value);
  }
  get trim() {
    return this._getOption("trim");
  }
  set trim(value) {
    this._setOption("trim", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get ignoreEmptyValue() {
    return this._getOption("ignoreEmptyValue");
  }
  set ignoreEmptyValue(value) {
    this._setOption("ignoreEmptyValue", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get reevaluate() {
    return this._getOption("reevaluate");
  }
  set reevaluate(value) {
    this._setOption("reevaluate", value);
  }
  get validationCallback() {
    return this._getOption("validationCallback");
  }
  set validationCallback(value) {
    this._setOption("validationCallback", value);
  }
  get comparisonTarget() {
    return this._getOption("comparisonTarget");
  }
  set comparisonTarget(value) {
    this._setOption("comparisonTarget", value);
  }
  get comparisonType() {
    return this._getOption("comparisonType");
  }
  set comparisonType(value) {
    this._setOption("comparisonType", value);
  }
  get pattern() {
    return this._getOption("pattern");
  }
  set pattern(value) {
    this._setOption("pattern", value);
  }
  get _optionPath() {
    return "validationRules";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiValidationRuleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiValidationRuleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiValidationRuleComponent,
    selectors: [["dxi-validation-rule"]],
    inputs: {
      message: "message",
      trim: "trim",
      type: "type",
      ignoreEmptyValue: "ignoreEmptyValue",
      max: "max",
      min: "min",
      reevaluate: "reevaluate",
      validationCallback: "validationCallback",
      comparisonTarget: "comparisonTarget",
      comparisonType: "comparisonType",
      pattern: "pattern"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiValidationRuleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValidationRuleComponent, [{
    type: Component,
    args: [{
      selector: "dxi-validation-rule",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    message: [{
      type: Input
    }],
    trim: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    ignoreEmptyValue: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    reevaluate: [{
      type: Input
    }],
    validationCallback: [{
      type: Input
    }],
    comparisonTarget: [{
      type: Input
    }],
    comparisonType: [{
      type: Input
    }],
    pattern: [{
      type: Input
    }]
  });
})();
var DxiValidationRuleModule = class _DxiValidationRuleModule {
  /** @nocollapse */
  static ɵfac = function DxiValidationRuleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiValidationRuleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiValidationRuleModule,
    declarations: [DxiValidationRuleComponent],
    exports: [DxiValidationRuleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValidationRuleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiValidationRuleComponent],
      exports: [DxiValidationRuleComponent]
    }]
  }], null, null);
})();
var DxiHtmlEditorImageUploadTabItem = class _DxiHtmlEditorImageUploadTabItem extends CollectionNestedOption {
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get badge() {
    return this._getOption("badge");
  }
  set badge(value) {
    this._setOption("badge", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get tabTemplate() {
    return this._getOption("tabTemplate");
  }
  set tabTemplate(value) {
    this._setOption("tabTemplate", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiHtmlEditorImageUploadTabItem_BaseFactory;
    return function DxiHtmlEditorImageUploadTabItem_Factory(__ngFactoryType__) {
      return (ɵDxiHtmlEditorImageUploadTabItem_BaseFactory || (ɵDxiHtmlEditorImageUploadTabItem_BaseFactory = ɵɵgetInheritedFactory(_DxiHtmlEditorImageUploadTabItem)))(__ngFactoryType__ || _DxiHtmlEditorImageUploadTabItem);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiHtmlEditorImageUploadTabItem,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiHtmlEditorImageUploadTabItem_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiHtmlEditorImageUploadTabItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiDiagramCustomCommand = class _DxiDiagramCustomCommand extends CollectionNestedOption {
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiDiagramCustomCommand_BaseFactory;
    return function DxiDiagramCustomCommand_Factory(__ngFactoryType__) {
      return (ɵDxiDiagramCustomCommand_BaseFactory || (ɵDxiDiagramCustomCommand_BaseFactory = ɵɵgetInheritedFactory(_DxiDiagramCustomCommand)))(__ngFactoryType__ || _DxiDiagramCustomCommand);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiDiagramCustomCommand,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiDiagramCustomCommand_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDiagramCustomCommand, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiCommandComponent = class _DxiCommandComponent extends DxiDiagramCustomCommand {
  get _optionPath() {
    return "commands";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiCommandComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCommandComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiCommandComponent,
    selectors: [["dxi-command"]],
    contentQueries: function DxiCommandComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      icon: "icon",
      items: "items",
      location: "location",
      name: "name",
      text: "text"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiCommandComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCommandComponent, [{
    type: Component,
    args: [{
      selector: "dxi-command",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["icon", "items", "location", "name", "text"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxiCommandModule = class _DxiCommandModule {
  /** @nocollapse */
  static ɵfac = function DxiCommandModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCommandModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiCommandModule,
    declarations: [DxiCommandComponent],
    exports: [DxiCommandComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCommandModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiCommandComponent],
      exports: [DxiCommandComponent]
    }]
  }], null, null);
})();
var DxiGroupComponent = class _DxiGroupComponent extends CollectionNestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get expanded() {
    return this._getOption("expanded");
  }
  set expanded(value) {
    this._setOption("expanded", value);
  }
  get shapes() {
    return this._getOption("shapes");
  }
  set shapes(value) {
    this._setOption("shapes", value);
  }
  get _optionPath() {
    return "groups";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiGroupComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiGroupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiGroupComponent,
    selectors: [["dxi-group"]],
    contentQueries: function DxiGroupComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
      }
    },
    inputs: {
      commands: "commands",
      title: "title",
      category: "category",
      displayMode: "displayMode",
      expanded: "expanded",
      shapes: "shapes"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiGroupComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupComponent, [{
    type: Component,
    args: [{
      selector: "dxi-group",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    commands: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    category: [{
      type: Input
    }],
    displayMode: [{
      type: Input
    }],
    expanded: [{
      type: Input
    }],
    shapes: [{
      type: Input
    }],
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }]
  });
})();
var DxiGroupModule = class _DxiGroupModule {
  /** @nocollapse */
  static ɵfac = function DxiGroupModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiGroupModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiGroupModule,
    declarations: [DxiGroupComponent],
    exports: [DxiGroupComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiGroupComponent],
      exports: [DxiGroupComponent]
    }]
  }], null, null);
})();
var DxiTabComponent = class _DxiTabComponent extends DxiHtmlEditorImageUploadTabItem {
  renderer;
  document;
  element;
  get _optionPath() {
    return "tabs";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  get groupsChildren() {
    return this._getOption("groups");
  }
  set groupsChildren(value) {
    this.setChildren("groups", value);
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiTabComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTabComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiTabComponent,
    selectors: [["dxi-tab"]],
    contentQueries: function DxiTabComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiGroupComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupsChildren = _t);
      }
    },
    inputs: {
      alignItemLabels: "alignItemLabels",
      badge: "badge",
      colCount: "colCount",
      colCountByScreen: "colCountByScreen",
      disabled: "disabled",
      icon: "icon",
      items: "items",
      tabTemplate: "tabTemplate",
      template: "template",
      title: "title",
      commands: "commands",
      groups: "groups",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxiTabComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTabComponent, [{
    type: Component,
    args: [{
      selector: "dxi-tab",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      inputs: ["alignItemLabels", "badge", "colCount", "colCountByScreen", "disabled", "icon", "items", "tabTemplate", "template", "title", "commands", "groups", "name"],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }],
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }],
    groupsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiGroupComponent)]
    }]
  });
})();
var DxiTabModule = class _DxiTabModule {
  /** @nocollapse */
  static ɵfac = function DxiTabModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTabModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiTabModule,
    declarations: [DxiTabComponent],
    exports: [DxiTabComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTabModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiTabComponent],
      exports: [DxiTabComponent]
    }]
  }], null, null);
})();
var DxiLocationComponent = class _DxiLocationComponent extends CollectionNestedOption {
  get lat() {
    return this._getOption("lat");
  }
  set lat(value) {
    this._setOption("lat", value);
  }
  get lng() {
    return this._getOption("lng");
  }
  set lng(value) {
    this._setOption("lng", value);
  }
  get col() {
    return this._getOption("col");
  }
  set col(value) {
    this._setOption("col", value);
  }
  get colspan() {
    return this._getOption("colspan");
  }
  set colspan(value) {
    this._setOption("colspan", value);
  }
  get row() {
    return this._getOption("row");
  }
  set row(value) {
    this._setOption("row", value);
  }
  get rowspan() {
    return this._getOption("rowspan");
  }
  set rowspan(value) {
    this._setOption("rowspan", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get _optionPath() {
    return "location";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiLocationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLocationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiLocationComponent,
    selectors: [["dxi-location"]],
    inputs: {
      lat: "lat",
      lng: "lng",
      col: "col",
      colspan: "colspan",
      row: "row",
      rowspan: "rowspan",
      screen: "screen"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiLocationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLocationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-location",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    lat: [{
      type: Input
    }],
    lng: [{
      type: Input
    }],
    col: [{
      type: Input
    }],
    colspan: [{
      type: Input
    }],
    row: [{
      type: Input
    }],
    rowspan: [{
      type: Input
    }],
    screen: [{
      type: Input
    }]
  });
})();
var DxiLocationModule = class _DxiLocationModule {
  /** @nocollapse */
  static ɵfac = function DxiLocationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLocationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiLocationModule,
    declarations: [DxiLocationComponent],
    exports: [DxiLocationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLocationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiLocationComponent],
      exports: [DxiLocationComponent]
    }]
  }], null, null);
})();
var DxiItemComponent = class _DxiItemComponent extends DxiButtonGroupItem {
  renderer;
  document;
  element;
  get _optionPath() {
    return "items";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  get locationChildren() {
    return this._getOption("location");
  }
  set locationChildren(value) {
    this.setChildren("location", value);
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiItemComponent,
    selectors: [["dxi-item"]],
    contentQueries: function DxiItemComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, _DxiItemComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationChildren = _t);
      }
    },
    inputs: {
      disabled: "disabled",
      html: "html",
      icon: "icon",
      template: "template",
      text: "text",
      title: "title",
      titleTemplate: "titleTemplate",
      visible: "visible",
      onClick: "onClick",
      stylingMode: "stylingMode",
      type: "type",
      baseSize: "baseSize",
      box: "box",
      ratio: "ratio",
      shrink: "shrink",
      elementAttr: "elementAttr",
      hint: "hint",
      author: "author",
      id: "id",
      timestamp: "timestamp",
      beginGroup: "beginGroup",
      closeMenuOnClick: "closeMenuOnClick",
      items: "items",
      selectable: "selectable",
      selected: "selected",
      colSpan: "colSpan",
      cssClass: "cssClass",
      dataField: "dataField",
      editorOptions: "editorOptions",
      editorType: "editorType",
      helpText: "helpText",
      isRequired: "isRequired",
      itemType: "itemType",
      label: "label",
      name: "name",
      validationRules: "validationRules",
      visibleIndex: "visibleIndex",
      alignItemLabels: "alignItemLabels",
      caption: "caption",
      captionTemplate: "captionTemplate",
      colCount: "colCount",
      colCountByScreen: "colCountByScreen",
      tabPanelOptions: "tabPanelOptions",
      tabs: "tabs",
      badge: "badge",
      tabTemplate: "tabTemplate",
      buttonOptions: "buttonOptions",
      horizontalAlignment: "horizontalAlignment",
      verticalAlignment: "verticalAlignment",
      locateInMenu: "locateInMenu",
      location: "location",
      menuItemTemplate: "menuItemTemplate",
      options: "options",
      showText: "showText",
      widget: "widget",
      height: "height",
      width: "width",
      imageAlt: "imageAlt",
      imageSrc: "imageSrc",
      acceptedValues: "acceptedValues",
      formatName: "formatName",
      formatValues: "formatValues",
      key: "key",
      showChevron: "showChevron",
      linkAttr: "linkAttr",
      url: "url",
      collapsed: "collapsed",
      collapsedSize: "collapsedSize",
      collapsible: "collapsible",
      maxSize: "maxSize",
      minSize: "minSize",
      resizable: "resizable",
      size: "size",
      splitter: "splitter",
      heightRatio: "heightRatio",
      widthRatio: "widthRatio",
      expanded: "expanded",
      hasItems: "hasItems",
      parentId: "parentId"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxiItemComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-item",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      inputs: ["disabled", "html", "icon", "template", "text", "title", "titleTemplate", "visible", "onClick", "stylingMode", "type", "baseSize", "box", "ratio", "shrink", "elementAttr", "hint", "author", "id", "timestamp", "beginGroup", "closeMenuOnClick", "items", "selectable", "selected", "colSpan", "cssClass", "dataField", "editorOptions", "editorType", "helpText", "isRequired", "itemType", "label", "name", "validationRules", "visibleIndex", "alignItemLabels", "caption", "captionTemplate", "colCount", "colCountByScreen", "tabPanelOptions", "tabs", "badge", "tabTemplate", "buttonOptions", "horizontalAlignment", "verticalAlignment", "locateInMenu", "location", "menuItemTemplate", "options", "showText", "widget", "height", "width", "imageAlt", "imageSrc", "acceptedValues", "formatName", "formatValues", "key", "showChevron", "linkAttr", "url", "collapsed", "collapsedSize", "collapsible", "maxSize", "minSize", "resizable", "size", "splitter", "heightRatio", "widthRatio", "expanded", "hasItems", "parentId"],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }],
    validationRulesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiValidationRuleComponent)]
    }],
    tabsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiTabComponent)]
    }],
    locationChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiLocationComponent)]
    }]
  });
})();
var DxiItemModule = class _DxiItemModule {
  /** @nocollapse */
  static ɵfac = function DxiItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiItemModule,
    declarations: [DxiItemComponent],
    exports: [DxiItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiItemComponent],
      exports: [DxiItemComponent]
    }]
  }], null, null);
})();
var DxoBoxComponent = class _DxoBoxComponent extends DxoBoxOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  itemsChange;
  get _optionPath() {
    return "box";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "itemsChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBoxComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBoxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBoxComponent,
    selectors: [["dxo-box"]],
    contentQueries: function DxoBoxComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      align: "align",
      crossAlign: "crossAlign",
      dataSource: "dataSource",
      direction: "direction",
      disabled: "disabled",
      elementAttr: "elementAttr",
      height: "height",
      hoverStateEnabled: "hoverStateEnabled",
      itemHoldTimeout: "itemHoldTimeout",
      items: "items",
      itemTemplate: "itemTemplate",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onItemClick: "onItemClick",
      onItemContextMenu: "onItemContextMenu",
      onItemHold: "onItemHold",
      onItemRendered: "onItemRendered",
      onOptionChanged: "onOptionChanged",
      rtlEnabled: "rtlEnabled",
      visible: "visible",
      width: "width"
    },
    outputs: {
      itemsChange: "itemsChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBoxComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-box",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["align", "crossAlign", "dataSource", "direction", "disabled", "elementAttr", "height", "hoverStateEnabled", "itemHoldTimeout", "items", "itemTemplate", "onContentReady", "onDisposing", "onInitialized", "onItemClick", "onItemContextMenu", "onItemHold", "onItemRendered", "onOptionChanged", "rtlEnabled", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChange: [{
      type: Output
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoBoxModule = class _DxoBoxModule {
  /** @nocollapse */
  static ɵfac = function DxoBoxModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBoxModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBoxModule,
    declarations: [DxoBoxComponent],
    exports: [DxoBoxComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBoxComponent],
      exports: [DxoBoxComponent]
    }]
  }], null, null);
})();
var DxoBreakStyleComponent = class _DxoBreakStyleComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get line() {
    return this._getOption("line");
  }
  set line(value) {
    this._setOption("line", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "breakStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBreakStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBreakStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBreakStyleComponent,
    selectors: [["dxo-break-style"]],
    inputs: {
      color: "color",
      line: "line",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBreakStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBreakStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-break-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    line: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoBreakStyleModule = class _DxoBreakStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoBreakStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBreakStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBreakStyleModule,
    declarations: [DxoBreakStyleComponent],
    exports: [DxoBreakStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBreakStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBreakStyleComponent],
      exports: [DxoBreakStyleComponent]
    }]
  }], null, null);
})();
var DxoBubbleComponent = class _DxoBubbleComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "bubble";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoBubbleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBubbleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoBubbleComponent,
    selectors: [["dxo-bubble"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoBubbleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBubbleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-bubble",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoBubbleModule = class _DxoBubbleModule {
  /** @nocollapse */
  static ɵfac = function DxoBubbleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoBubbleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoBubbleModule,
    declarations: [DxoBubbleComponent],
    exports: [DxoBubbleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBubbleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoBubbleComponent],
      exports: [DxoBubbleComponent]
    }]
  }], null, null);
})();
var DxiTextEditorButton = class _DxiTextEditorButton extends CollectionNestedOption {
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiTextEditorButton_BaseFactory;
    return function DxiTextEditorButton_Factory(__ngFactoryType__) {
      return (ɵDxiTextEditorButton_BaseFactory || (ɵDxiTextEditorButton_BaseFactory = ɵɵgetInheritedFactory(_DxiTextEditorButton)))(__ngFactoryType__ || _DxiTextEditorButton);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiTextEditorButton,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiTextEditorButton_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTextEditorButton, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiButtonComponent = class _DxiButtonComponent extends DxiTextEditorButton {
  get _optionPath() {
    return "buttons";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiButtonComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiButtonComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiButtonComponent,
    selectors: [["dxi-button"]],
    inputs: {
      location: "location",
      name: "name",
      options: "options",
      cssClass: "cssClass",
      disabled: "disabled",
      hint: "hint",
      icon: "icon",
      onClick: "onClick",
      template: "template",
      text: "text",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiButtonComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonComponent, [{
    type: Component,
    args: [{
      selector: "dxi-button",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["location", "name", "options", "cssClass", "disabled", "hint", "icon", "onClick", "template", "text", "visible"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiButtonModule = class _DxiButtonModule {
  /** @nocollapse */
  static ɵfac = function DxiButtonModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiButtonModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiButtonModule,
    declarations: [DxiButtonComponent],
    exports: [DxiButtonComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiButtonComponent],
      exports: [DxiButtonComponent]
    }]
  }], null, null);
})();
var DxoButtonOptions = class _DxoButtonOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get useSubmitBehavior() {
    return this._getOption("useSubmitBehavior");
  }
  set useSubmitBehavior(value) {
    this._setOption("useSubmitBehavior", value);
  }
  get validationGroup() {
    return this._getOption("validationGroup");
  }
  set validationGroup(value) {
    this._setOption("validationGroup", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoButtonOptions_BaseFactory;
    return function DxoButtonOptions_Factory(__ngFactoryType__) {
      return (ɵDxoButtonOptions_BaseFactory || (ɵDxoButtonOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoButtonOptions)))(__ngFactoryType__ || _DxoButtonOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoButtonOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoButtonOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoButtonOptionsComponent = class _DxoButtonOptionsComponent extends DxoButtonOptions {
  get _optionPath() {
    return "buttonOptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoButtonOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoButtonOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoButtonOptionsComponent,
    selectors: [["dxo-button-options"]],
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      disabled: "disabled",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      icon: "icon",
      onClick: "onClick",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      rtlEnabled: "rtlEnabled",
      stylingMode: "stylingMode",
      tabIndex: "tabIndex",
      template: "template",
      text: "text",
      type: "type",
      useSubmitBehavior: "useSubmitBehavior",
      validationGroup: "validationGroup",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoButtonOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-button-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "disabled", "elementAttr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "icon", "onClick", "onContentReady", "onDisposing", "onInitialized", "onOptionChanged", "rtlEnabled", "stylingMode", "tabIndex", "template", "text", "type", "useSubmitBehavior", "validationGroup", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoButtonOptionsModule = class _DxoButtonOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoButtonOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoButtonOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoButtonOptionsModule,
    declarations: [DxoButtonOptionsComponent],
    exports: [DxoButtonOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoButtonOptionsComponent],
      exports: [DxoButtonOptionsComponent]
    }]
  }], null, null);
})();
var DxoCalendarOptions = class _DxoCalendarOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get cellTemplate() {
    return this._getOption("cellTemplate");
  }
  set cellTemplate(value) {
    this._setOption("cellTemplate", value);
  }
  get dateSerializationFormat() {
    return this._getOption("dateSerializationFormat");
  }
  set dateSerializationFormat(value) {
    this._setOption("dateSerializationFormat", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get disabledDates() {
    return this._getOption("disabledDates");
  }
  set disabledDates(value) {
    this._setOption("disabledDates", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get firstDayOfWeek() {
    return this._getOption("firstDayOfWeek");
  }
  set firstDayOfWeek(value) {
    this._setOption("firstDayOfWeek", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get maxZoomLevel() {
    return this._getOption("maxZoomLevel");
  }
  set maxZoomLevel(value) {
    this._setOption("maxZoomLevel", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get minZoomLevel() {
    return this._getOption("minZoomLevel");
  }
  set minZoomLevel(value) {
    this._setOption("minZoomLevel", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectWeekOnClick() {
    return this._getOption("selectWeekOnClick");
  }
  set selectWeekOnClick(value) {
    this._setOption("selectWeekOnClick", value);
  }
  get showTodayButton() {
    return this._getOption("showTodayButton");
  }
  set showTodayButton(value) {
    this._setOption("showTodayButton", value);
  }
  get showWeekNumbers() {
    return this._getOption("showWeekNumbers");
  }
  set showWeekNumbers(value) {
    this._setOption("showWeekNumbers", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationMessageMode() {
    return this._getOption("validationMessageMode");
  }
  set validationMessageMode(value) {
    this._setOption("validationMessageMode", value);
  }
  get validationMessagePosition() {
    return this._getOption("validationMessagePosition");
  }
  set validationMessagePosition(value) {
    this._setOption("validationMessagePosition", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get weekNumberRule() {
    return this._getOption("weekNumberRule");
  }
  set weekNumberRule(value) {
    this._setOption("weekNumberRule", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get zoomLevel() {
    return this._getOption("zoomLevel");
  }
  set zoomLevel(value) {
    this._setOption("zoomLevel", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoCalendarOptions_BaseFactory;
    return function DxoCalendarOptions_Factory(__ngFactoryType__) {
      return (ɵDxoCalendarOptions_BaseFactory || (ɵDxoCalendarOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoCalendarOptions)))(__ngFactoryType__ || _DxoCalendarOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCalendarOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCalendarOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoCalendarOptionsComponent = class _DxoCalendarOptionsComponent extends DxoCalendarOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  zoomLevelChange;
  get _optionPath() {
    return "calendarOptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "valueChange"
    }, {
      emit: "zoomLevelChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCalendarOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCalendarOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCalendarOptionsComponent,
    selectors: [["dxo-calendar-options"]],
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      cellTemplate: "cellTemplate",
      dateSerializationFormat: "dateSerializationFormat",
      disabled: "disabled",
      disabledDates: "disabledDates",
      elementAttr: "elementAttr",
      firstDayOfWeek: "firstDayOfWeek",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      isDirty: "isDirty",
      isValid: "isValid",
      max: "max",
      maxZoomLevel: "maxZoomLevel",
      min: "min",
      minZoomLevel: "minZoomLevel",
      name: "name",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onValueChanged: "onValueChanged",
      readOnly: "readOnly",
      rtlEnabled: "rtlEnabled",
      selectionMode: "selectionMode",
      selectWeekOnClick: "selectWeekOnClick",
      showTodayButton: "showTodayButton",
      showWeekNumbers: "showWeekNumbers",
      tabIndex: "tabIndex",
      validationError: "validationError",
      validationErrors: "validationErrors",
      validationMessageMode: "validationMessageMode",
      validationMessagePosition: "validationMessagePosition",
      validationStatus: "validationStatus",
      value: "value",
      visible: "visible",
      weekNumberRule: "weekNumberRule",
      width: "width",
      zoomLevel: "zoomLevel"
    },
    outputs: {
      valueChange: "valueChange",
      zoomLevelChange: "zoomLevelChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCalendarOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-calendar-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "cellTemplate", "dateSerializationFormat", "disabled", "disabledDates", "elementAttr", "firstDayOfWeek", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "isDirty", "isValid", "max", "maxZoomLevel", "min", "minZoomLevel", "name", "onDisposing", "onInitialized", "onOptionChanged", "onValueChanged", "readOnly", "rtlEnabled", "selectionMode", "selectWeekOnClick", "showTodayButton", "showWeekNumbers", "tabIndex", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "visible", "weekNumberRule", "width", "zoomLevel"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    valueChange: [{
      type: Output
    }],
    zoomLevelChange: [{
      type: Output
    }]
  });
})();
var DxoCalendarOptionsModule = class _DxoCalendarOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoCalendarOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCalendarOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCalendarOptionsModule,
    declarations: [DxoCalendarOptionsComponent],
    exports: [DxoCalendarOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCalendarOptionsComponent],
      exports: [DxoCalendarOptionsComponent]
    }]
  }], null, null);
})();
var DxoCandlestickComponent = class _DxoCandlestickComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "candlestick";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCandlestickComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCandlestickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCandlestickComponent,
    selectors: [["dxo-candlestick"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCandlestickComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCandlestickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-candlestick",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoCandlestickModule = class _DxoCandlestickModule {
  /** @nocollapse */
  static ɵfac = function DxoCandlestickModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCandlestickModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCandlestickModule,
    declarations: [DxoCandlestickComponent],
    exports: [DxoCandlestickComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCandlestickModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCandlestickComponent],
      exports: [DxoCandlestickComponent]
    }]
  }], null, null);
})();
var DxiCenterComponent = class _DxiCenterComponent extends CollectionNestedOption {
  get lat() {
    return this._getOption("lat");
  }
  set lat(value) {
    this._setOption("lat", value);
  }
  get lng() {
    return this._getOption("lng");
  }
  set lng(value) {
    this._setOption("lng", value);
  }
  get _optionPath() {
    return "center";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiCenterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCenterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiCenterComponent,
    selectors: [["dxi-center"]],
    inputs: {
      lat: "lat",
      lng: "lng"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiCenterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCenterComponent, [{
    type: Component,
    args: [{
      selector: "dxi-center",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    lat: [{
      type: Input
    }],
    lng: [{
      type: Input
    }]
  });
})();
var DxiCenterModule = class _DxiCenterModule {
  /** @nocollapse */
  static ɵfac = function DxiCenterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCenterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiCenterModule,
    declarations: [DxiCenterComponent],
    exports: [DxiCenterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCenterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiCenterComponent],
      exports: [DxiCenterComponent]
    }]
  }], null, null);
})();
var DxiDataChange = class _DxiDataChange extends CollectionNestedOption {
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get insertAfterKey() {
    return this._getOption("insertAfterKey");
  }
  set insertAfterKey(value) {
    this._setOption("insertAfterKey", value);
  }
  get insertBeforeKey() {
    return this._getOption("insertBeforeKey");
  }
  set insertBeforeKey(value) {
    this._setOption("insertBeforeKey", value);
  }
  get key() {
    return this._getOption("key");
  }
  set key(value) {
    this._setOption("key", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiDataChange_BaseFactory;
    return function DxiDataChange_Factory(__ngFactoryType__) {
      return (ɵDxiDataChange_BaseFactory || (ɵDxiDataChange_BaseFactory = ɵɵgetInheritedFactory(_DxiDataChange)))(__ngFactoryType__ || _DxiDataChange);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiDataChange,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiDataChange_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDataChange, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiChangeComponent = class _DxiChangeComponent extends DxiDataChange {
  get _optionPath() {
    return "changes";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiChangeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiChangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiChangeComponent,
    selectors: [["dxi-change"]],
    inputs: {
      data: "data",
      insertAfterKey: "insertAfterKey",
      insertBeforeKey: "insertBeforeKey",
      key: "key",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiChangeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChangeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-change",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["data", "insertAfterKey", "insertBeforeKey", "key", "type"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiChangeModule = class _DxiChangeModule {
  /** @nocollapse */
  static ɵfac = function DxiChangeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiChangeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiChangeModule,
    declarations: [DxiChangeComponent],
    exports: [DxiChangeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChangeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiChangeComponent],
      exports: [DxiChangeComponent]
    }]
  }], null, null);
})();
var DxiChartSeries = class _DxiChartSeries extends CollectionNestedOption {
  get aggregation() {
    return this._getOption("aggregation");
  }
  set aggregation(value) {
    this._setOption("aggregation", value);
  }
  get argumentField() {
    return this._getOption("argumentField");
  }
  set argumentField(value) {
    this._setOption("argumentField", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get barOverlapGroup() {
    return this._getOption("barOverlapGroup");
  }
  set barOverlapGroup(value) {
    this._setOption("barOverlapGroup", value);
  }
  get barPadding() {
    return this._getOption("barPadding");
  }
  set barPadding(value) {
    this._setOption("barPadding", value);
  }
  get barWidth() {
    return this._getOption("barWidth");
  }
  set barWidth(value) {
    this._setOption("barWidth", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get closeValueField() {
    return this._getOption("closeValueField");
  }
  set closeValueField(value) {
    this._setOption("closeValueField", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get ignoreEmptyPoints() {
    return this._getOption("ignoreEmptyPoints");
  }
  set ignoreEmptyPoints(value) {
    this._setOption("ignoreEmptyPoints", value);
  }
  get innerColor() {
    return this._getOption("innerColor");
  }
  set innerColor(value) {
    this._setOption("innerColor", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get maxLabelCount() {
    return this._getOption("maxLabelCount");
  }
  set maxLabelCount(value) {
    this._setOption("maxLabelCount", value);
  }
  get minBarSize() {
    return this._getOption("minBarSize");
  }
  set minBarSize(value) {
    this._setOption("minBarSize", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get openValueField() {
    return this._getOption("openValueField");
  }
  set openValueField(value) {
    this._setOption("openValueField", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get point() {
    return this._getOption("point");
  }
  set point(value) {
    this._setOption("point", value);
  }
  get rangeValue1Field() {
    return this._getOption("rangeValue1Field");
  }
  set rangeValue1Field(value) {
    this._setOption("rangeValue1Field", value);
  }
  get rangeValue2Field() {
    return this._getOption("rangeValue2Field");
  }
  set rangeValue2Field(value) {
    this._setOption("rangeValue2Field", value);
  }
  get reduction() {
    return this._getOption("reduction");
  }
  set reduction(value) {
    this._setOption("reduction", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get showInLegend() {
    return this._getOption("showInLegend");
  }
  set showInLegend(value) {
    this._setOption("showInLegend", value);
  }
  get sizeField() {
    return this._getOption("sizeField");
  }
  set sizeField(value) {
    this._setOption("sizeField", value);
  }
  get stack() {
    return this._getOption("stack");
  }
  set stack(value) {
    this._setOption("stack", value);
  }
  get tag() {
    return this._getOption("tag");
  }
  set tag(value) {
    this._setOption("tag", value);
  }
  get tagField() {
    return this._getOption("tagField");
  }
  set tagField(value) {
    this._setOption("tagField", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueErrorBar() {
    return this._getOption("valueErrorBar");
  }
  set valueErrorBar(value) {
    this._setOption("valueErrorBar", value);
  }
  get valueField() {
    return this._getOption("valueField");
  }
  set valueField(value) {
    this._setOption("valueField", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get minSegmentSize() {
    return this._getOption("minSegmentSize");
  }
  set minSegmentSize(value) {
    this._setOption("minSegmentSize", value);
  }
  get smallValuesGrouping() {
    return this._getOption("smallValuesGrouping");
  }
  set smallValuesGrouping(value) {
    this._setOption("smallValuesGrouping", value);
  }
  get closed() {
    return this._getOption("closed");
  }
  set closed(value) {
    this._setOption("closed", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiChartSeries_BaseFactory;
    return function DxiChartSeries_Factory(__ngFactoryType__) {
      return (ɵDxiChartSeries_BaseFactory || (ɵDxiChartSeries_BaseFactory = ɵɵgetInheritedFactory(_DxiChartSeries)))(__ngFactoryType__ || _DxiChartSeries);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiChartSeries,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiChartSeries_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChartSeries, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiSeriesComponent = class _DxiSeriesComponent extends DxiChartSeries {
  get _optionPath() {
    return "series";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiSeriesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiSeriesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiSeriesComponent,
    selectors: [["dxi-series"]],
    inputs: {
      aggregation: "aggregation",
      argumentField: "argumentField",
      axis: "axis",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      name: "name",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      stack: "stack",
      tag: "tag",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      argumentType: "argumentType",
      minSegmentSize: "minSegmentSize",
      smallValuesGrouping: "smallValuesGrouping",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiSeriesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSeriesComponent, [{
    type: Component,
    args: [{
      selector: "dxi-series",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "argumentField", "axis", "barOverlapGroup", "barPadding", "barWidth", "border", "closeValueField", "color", "cornerRadius", "dashStyle", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "lowValueField", "maxLabelCount", "minBarSize", "name", "opacity", "openValueField", "pane", "point", "rangeValue1Field", "rangeValue2Field", "reduction", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "stack", "tag", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "argumentType", "minSegmentSize", "smallValuesGrouping", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiSeriesModule = class _DxiSeriesModule {
  /** @nocollapse */
  static ɵfac = function DxiSeriesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiSeriesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiSeriesModule,
    declarations: [DxiSeriesComponent],
    exports: [DxiSeriesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSeriesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiSeriesComponent],
      exports: [DxiSeriesComponent]
    }]
  }], null, null);
})();
var DxoChartComponent = class _DxoChartComponent extends NestedOption {
  get barGroupPadding() {
    return this._getOption("barGroupPadding");
  }
  set barGroupPadding(value) {
    this._setOption("barGroupPadding", value);
  }
  get barGroupWidth() {
    return this._getOption("barGroupWidth");
  }
  set barGroupWidth(value) {
    this._setOption("barGroupWidth", value);
  }
  get bottomIndent() {
    return this._getOption("bottomIndent");
  }
  set bottomIndent(value) {
    this._setOption("bottomIndent", value);
  }
  get commonSeriesSettings() {
    return this._getOption("commonSeriesSettings");
  }
  set commonSeriesSettings(value) {
    this._setOption("commonSeriesSettings", value);
  }
  get dataPrepareSettings() {
    return this._getOption("dataPrepareSettings");
  }
  set dataPrepareSettings(value) {
    this._setOption("dataPrepareSettings", value);
  }
  get maxBubbleSize() {
    return this._getOption("maxBubbleSize");
  }
  set maxBubbleSize(value) {
    this._setOption("maxBubbleSize", value);
  }
  get minBubbleSize() {
    return this._getOption("minBubbleSize");
  }
  set minBubbleSize(value) {
    this._setOption("minBubbleSize", value);
  }
  get negativesAsZeroes() {
    return this._getOption("negativesAsZeroes");
  }
  set negativesAsZeroes(value) {
    this._setOption("negativesAsZeroes", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get seriesTemplate() {
    return this._getOption("seriesTemplate");
  }
  set seriesTemplate(value) {
    this._setOption("seriesTemplate", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get valueAxis() {
    return this._getOption("valueAxis");
  }
  set valueAxis(value) {
    this._setOption("valueAxis", value);
  }
  get _optionPath() {
    return "chart";
  }
  get seriesChildren() {
    return this._getOption("series");
  }
  set seriesChildren(value) {
    this.setChildren("series", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoChartComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoChartComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoChartComponent,
    selectors: [["dxo-chart"]],
    contentQueries: function DxoChartComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiSeriesComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.seriesChildren = _t);
      }
    },
    inputs: {
      barGroupPadding: "barGroupPadding",
      barGroupWidth: "barGroupWidth",
      bottomIndent: "bottomIndent",
      commonSeriesSettings: "commonSeriesSettings",
      dataPrepareSettings: "dataPrepareSettings",
      maxBubbleSize: "maxBubbleSize",
      minBubbleSize: "minBubbleSize",
      negativesAsZeroes: "negativesAsZeroes",
      palette: "palette",
      paletteExtensionMode: "paletteExtensionMode",
      series: "series",
      seriesTemplate: "seriesTemplate",
      topIndent: "topIndent",
      valueAxis: "valueAxis"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoChartComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartComponent, [{
    type: Component,
    args: [{
      selector: "dxo-chart",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    barGroupPadding: [{
      type: Input
    }],
    barGroupWidth: [{
      type: Input
    }],
    bottomIndent: [{
      type: Input
    }],
    commonSeriesSettings: [{
      type: Input
    }],
    dataPrepareSettings: [{
      type: Input
    }],
    maxBubbleSize: [{
      type: Input
    }],
    minBubbleSize: [{
      type: Input
    }],
    negativesAsZeroes: [{
      type: Input
    }],
    palette: [{
      type: Input
    }],
    paletteExtensionMode: [{
      type: Input
    }],
    series: [{
      type: Input
    }],
    seriesTemplate: [{
      type: Input
    }],
    topIndent: [{
      type: Input
    }],
    valueAxis: [{
      type: Input
    }],
    seriesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiSeriesComponent)]
    }]
  });
})();
var DxoChartModule = class _DxoChartModule {
  /** @nocollapse */
  static ɵfac = function DxoChartModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoChartModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoChartModule,
    declarations: [DxoChartComponent],
    exports: [DxoChartComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoChartComponent],
      exports: [DxoChartComponent]
    }]
  }], null, null);
})();
var DxoColCountByScreenComponent = class _DxoColCountByScreenComponent extends NestedOption {
  get lg() {
    return this._getOption("lg");
  }
  set lg(value) {
    this._setOption("lg", value);
  }
  get md() {
    return this._getOption("md");
  }
  set md(value) {
    this._setOption("md", value);
  }
  get sm() {
    return this._getOption("sm");
  }
  set sm(value) {
    this._setOption("sm", value);
  }
  get xs() {
    return this._getOption("xs");
  }
  set xs(value) {
    this._setOption("xs", value);
  }
  get _optionPath() {
    return "colCountByScreen";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoColCountByScreenComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColCountByScreenComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColCountByScreenComponent,
    selectors: [["dxo-col-count-by-screen"]],
    inputs: {
      lg: "lg",
      md: "md",
      sm: "sm",
      xs: "xs"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColCountByScreenComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColCountByScreenComponent, [{
    type: Component,
    args: [{
      selector: "dxo-col-count-by-screen",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    lg: [{
      type: Input
    }],
    md: [{
      type: Input
    }],
    sm: [{
      type: Input
    }],
    xs: [{
      type: Input
    }]
  });
})();
var DxoColCountByScreenModule = class _DxoColCountByScreenModule {
  /** @nocollapse */
  static ɵfac = function DxoColCountByScreenModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColCountByScreenModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoColCountByScreenModule,
    declarations: [DxoColCountByScreenComponent],
    exports: [DxoColCountByScreenComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColCountByScreenModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoColCountByScreenComponent],
      exports: [DxoColCountByScreenComponent]
    }]
  }], null, null);
})();
var DxiColComponent = class _DxiColComponent extends CollectionNestedOption {
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get _optionPath() {
    return "cols";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiColComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiColComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiColComponent,
    selectors: [["dxi-col"]],
    inputs: {
      baseSize: "baseSize",
      ratio: "ratio",
      screen: "screen",
      shrink: "shrink"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiColComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColComponent, [{
    type: Component,
    args: [{
      selector: "dxi-col",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    baseSize: [{
      type: Input
    }],
    ratio: [{
      type: Input
    }],
    screen: [{
      type: Input
    }],
    shrink: [{
      type: Input
    }]
  });
})();
var DxiColModule = class _DxiColModule {
  /** @nocollapse */
  static ɵfac = function DxiColModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiColModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiColModule,
    declarations: [DxiColComponent],
    exports: [DxiColComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiColComponent],
      exports: [DxiColComponent]
    }]
  }], null, null);
})();
var DxoCollisionComponent = class _DxoCollisionComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "collision";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCollisionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCollisionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCollisionComponent,
    selectors: [["dxo-collision"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCollisionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCollisionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-collision",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoCollisionModule = class _DxoCollisionModule {
  /** @nocollapse */
  static ɵfac = function DxoCollisionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCollisionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCollisionModule,
    declarations: [DxoCollisionComponent],
    exports: [DxoCollisionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCollisionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCollisionComponent],
      exports: [DxoCollisionComponent]
    }]
  }], null, null);
})();
var DxoColorComponent = class _DxoColorComponent extends DxoChartsColor {
  get _optionPath() {
    return "color";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoColorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColorComponent,
    selectors: [["dxo-color"]],
    inputs: {
      base: "base",
      fillId: "fillId"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-color",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["base", "fillId"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoColorModule = class _DxoColorModule {
  /** @nocollapse */
  static ɵfac = function DxoColorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoColorModule,
    declarations: [DxoColorComponent],
    exports: [DxoColorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoColorComponent],
      exports: [DxoColorComponent]
    }]
  }], null, null);
})();
var DxoColorizerComponent = class _DxoColorizerComponent extends NestedOption {
  get colorCodeField() {
    return this._getOption("colorCodeField");
  }
  set colorCodeField(value) {
    this._setOption("colorCodeField", value);
  }
  get colorizeGroups() {
    return this._getOption("colorizeGroups");
  }
  set colorizeGroups(value) {
    this._setOption("colorizeGroups", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get range() {
    return this._getOption("range");
  }
  set range(value) {
    this._setOption("range", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "colorizer";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoColorizerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColorizerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColorizerComponent,
    selectors: [["dxo-colorizer"]],
    inputs: {
      colorCodeField: "colorCodeField",
      colorizeGroups: "colorizeGroups",
      palette: "palette",
      paletteExtensionMode: "paletteExtensionMode",
      range: "range",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColorizerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorizerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-colorizer",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    colorCodeField: [{
      type: Input
    }],
    colorizeGroups: [{
      type: Input
    }],
    palette: [{
      type: Input
    }],
    paletteExtensionMode: [{
      type: Input
    }],
    range: [{
      type: Input
    }],
    type: [{
      type: Input
    }]
  });
})();
var DxoColorizerModule = class _DxoColorizerModule {
  /** @nocollapse */
  static ɵfac = function DxoColorizerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColorizerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoColorizerModule,
    declarations: [DxoColorizerComponent],
    exports: [DxoColorizerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorizerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoColorizerComponent],
      exports: [DxoColorizerComponent]
    }]
  }], null, null);
})();
var DxoColumnChooserComponent = class _DxoColumnChooserComponent extends NestedOption {
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get emptyPanelText() {
    return this._getOption("emptyPanelText");
  }
  set emptyPanelText(value) {
    this._setOption("emptyPanelText", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get search() {
    return this._getOption("search");
  }
  set search(value) {
    this._setOption("search", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get selection() {
    return this._getOption("selection");
  }
  set selection(value) {
    this._setOption("selection", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "columnChooser";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoColumnChooserComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColumnChooserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColumnChooserComponent,
    selectors: [["dxo-column-chooser"]],
    inputs: {
      allowSearch: "allowSearch",
      container: "container",
      emptyPanelText: "emptyPanelText",
      enabled: "enabled",
      height: "height",
      mode: "mode",
      position: "position",
      search: "search",
      searchTimeout: "searchTimeout",
      selection: "selection",
      sortOrder: "sortOrder",
      title: "title",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColumnChooserComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserComponent, [{
    type: Component,
    args: [{
      selector: "dxo-column-chooser",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowSearch: [{
      type: Input
    }],
    container: [{
      type: Input
    }],
    emptyPanelText: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    height: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    searchTimeout: [{
      type: Input
    }],
    selection: [{
      type: Input
    }],
    sortOrder: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoColumnChooserModule = class _DxoColumnChooserModule {
  /** @nocollapse */
  static ɵfac = function DxoColumnChooserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColumnChooserModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoColumnChooserModule,
    declarations: [DxoColumnChooserComponent],
    exports: [DxoColumnChooserComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoColumnChooserComponent],
      exports: [DxoColumnChooserComponent]
    }]
  }], null, null);
})();
var DxiDataGridColumn = class _DxiDataGridColumn extends CollectionNestedOption {
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get allowEditing() {
    return this._getOption("allowEditing");
  }
  set allowEditing(value) {
    this._setOption("allowEditing", value);
  }
  get allowExporting() {
    return this._getOption("allowExporting");
  }
  set allowExporting(value) {
    this._setOption("allowExporting", value);
  }
  get allowFiltering() {
    return this._getOption("allowFiltering");
  }
  set allowFiltering(value) {
    this._setOption("allowFiltering", value);
  }
  get allowFixing() {
    return this._getOption("allowFixing");
  }
  set allowFixing(value) {
    this._setOption("allowFixing", value);
  }
  get allowGrouping() {
    return this._getOption("allowGrouping");
  }
  set allowGrouping(value) {
    this._setOption("allowGrouping", value);
  }
  get allowHeaderFiltering() {
    return this._getOption("allowHeaderFiltering");
  }
  set allowHeaderFiltering(value) {
    this._setOption("allowHeaderFiltering", value);
  }
  get allowHiding() {
    return this._getOption("allowHiding");
  }
  set allowHiding(value) {
    this._setOption("allowHiding", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get allowResizing() {
    return this._getOption("allowResizing");
  }
  set allowResizing(value) {
    this._setOption("allowResizing", value);
  }
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get allowSorting() {
    return this._getOption("allowSorting");
  }
  set allowSorting(value) {
    this._setOption("allowSorting", value);
  }
  get autoExpandGroup() {
    return this._getOption("autoExpandGroup");
  }
  set autoExpandGroup(value) {
    this._setOption("autoExpandGroup", value);
  }
  get buttons() {
    return this._getOption("buttons");
  }
  set buttons(value) {
    this._setOption("buttons", value);
  }
  get calculateCellValue() {
    return this._getOption("calculateCellValue");
  }
  set calculateCellValue(value) {
    this._setOption("calculateCellValue", value);
  }
  get calculateDisplayValue() {
    return this._getOption("calculateDisplayValue");
  }
  set calculateDisplayValue(value) {
    this._setOption("calculateDisplayValue", value);
  }
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get calculateGroupValue() {
    return this._getOption("calculateGroupValue");
  }
  set calculateGroupValue(value) {
    this._setOption("calculateGroupValue", value);
  }
  get calculateSortValue() {
    return this._getOption("calculateSortValue");
  }
  set calculateSortValue(value) {
    this._setOption("calculateSortValue", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get cellTemplate() {
    return this._getOption("cellTemplate");
  }
  set cellTemplate(value) {
    this._setOption("cellTemplate", value);
  }
  get columns() {
    return this._getOption("columns");
  }
  set columns(value) {
    this._setOption("columns", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataType() {
    return this._getOption("dataType");
  }
  set dataType(value) {
    this._setOption("dataType", value);
  }
  get editCellTemplate() {
    return this._getOption("editCellTemplate");
  }
  set editCellTemplate(value) {
    this._setOption("editCellTemplate", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get encodeHtml() {
    return this._getOption("encodeHtml");
  }
  set encodeHtml(value) {
    this._setOption("encodeHtml", value);
  }
  get falseText() {
    return this._getOption("falseText");
  }
  set falseText(value) {
    this._setOption("falseText", value);
  }
  get filterOperations() {
    return this._getOption("filterOperations");
  }
  set filterOperations(value) {
    this._setOption("filterOperations", value);
  }
  get filterType() {
    return this._getOption("filterType");
  }
  set filterType(value) {
    this._setOption("filterType", value);
  }
  get filterValue() {
    return this._getOption("filterValue");
  }
  set filterValue(value) {
    this._setOption("filterValue", value);
  }
  get filterValues() {
    return this._getOption("filterValues");
  }
  set filterValues(value) {
    this._setOption("filterValues", value);
  }
  get fixed() {
    return this._getOption("fixed");
  }
  set fixed(value) {
    this._setOption("fixed", value);
  }
  get fixedPosition() {
    return this._getOption("fixedPosition");
  }
  set fixedPosition(value) {
    this._setOption("fixedPosition", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get formItem() {
    return this._getOption("formItem");
  }
  set formItem(value) {
    this._setOption("formItem", value);
  }
  get groupCellTemplate() {
    return this._getOption("groupCellTemplate");
  }
  set groupCellTemplate(value) {
    this._setOption("groupCellTemplate", value);
  }
  get groupIndex() {
    return this._getOption("groupIndex");
  }
  set groupIndex(value) {
    this._setOption("groupIndex", value);
  }
  get headerCellTemplate() {
    return this._getOption("headerCellTemplate");
  }
  set headerCellTemplate(value) {
    this._setOption("headerCellTemplate", value);
  }
  get headerFilter() {
    return this._getOption("headerFilter");
  }
  set headerFilter(value) {
    this._setOption("headerFilter", value);
  }
  get hidingPriority() {
    return this._getOption("hidingPriority");
  }
  set hidingPriority(value) {
    this._setOption("hidingPriority", value);
  }
  get isBand() {
    return this._getOption("isBand");
  }
  set isBand(value) {
    this._setOption("isBand", value);
  }
  get lookup() {
    return this._getOption("lookup");
  }
  set lookup(value) {
    this._setOption("lookup", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get ownerBand() {
    return this._getOption("ownerBand");
  }
  set ownerBand(value) {
    this._setOption("ownerBand", value);
  }
  get renderAsync() {
    return this._getOption("renderAsync");
  }
  set renderAsync(value) {
    this._setOption("renderAsync", value);
  }
  get selectedFilterOperation() {
    return this._getOption("selectedFilterOperation");
  }
  set selectedFilterOperation(value) {
    this._setOption("selectedFilterOperation", value);
  }
  get setCellValue() {
    return this._getOption("setCellValue");
  }
  set setCellValue(value) {
    this._setOption("setCellValue", value);
  }
  get showEditorAlways() {
    return this._getOption("showEditorAlways");
  }
  set showEditorAlways(value) {
    this._setOption("showEditorAlways", value);
  }
  get showInColumnChooser() {
    return this._getOption("showInColumnChooser");
  }
  set showInColumnChooser(value) {
    this._setOption("showInColumnChooser", value);
  }
  get showWhenGrouped() {
    return this._getOption("showWhenGrouped");
  }
  set showWhenGrouped(value) {
    this._setOption("showWhenGrouped", value);
  }
  get sortIndex() {
    return this._getOption("sortIndex");
  }
  set sortIndex(value) {
    this._setOption("sortIndex", value);
  }
  get sortingMethod() {
    return this._getOption("sortingMethod");
  }
  set sortingMethod(value) {
    this._setOption("sortingMethod", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get trueText() {
    return this._getOption("trueText");
  }
  set trueText(value) {
    this._setOption("trueText", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiDataGridColumn_BaseFactory;
    return function DxiDataGridColumn_Factory(__ngFactoryType__) {
      return (ɵDxiDataGridColumn_BaseFactory || (ɵDxiDataGridColumn_BaseFactory = ɵɵgetInheritedFactory(_DxiDataGridColumn)))(__ngFactoryType__ || _DxiDataGridColumn);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiDataGridColumn,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiDataGridColumn_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDataGridColumn, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiColumnComponent = class _DxiColumnComponent extends DxiDataGridColumn {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  filterValueChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  filterValuesChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  groupIndexChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  selectedFilterOperationChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  sortIndexChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  sortOrderChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleIndexChange;
  get _optionPath() {
    return "columns";
  }
  get buttonsChildren() {
    return this._getOption("buttons");
  }
  set buttonsChildren(value) {
    this.setChildren("buttons", value);
  }
  get columnsChildren() {
    return this._getOption("columns");
  }
  set columnsChildren(value) {
    this.setChildren("columns", value);
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "filterValueChange"
    }, {
      emit: "filterValuesChange"
    }, {
      emit: "groupIndexChange"
    }, {
      emit: "selectedFilterOperationChange"
    }, {
      emit: "sortIndexChange"
    }, {
      emit: "sortOrderChange"
    }, {
      emit: "visibleChange"
    }, {
      emit: "visibleIndexChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiColumnComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiColumnComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiColumnComponent,
    selectors: [["dxi-column"]],
    contentQueries: function DxiColumnComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);
        ɵɵcontentQuery(dirIndex, _DxiColumnComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columnsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
      }
    },
    inputs: {
      alignment: "alignment",
      allowEditing: "allowEditing",
      allowExporting: "allowExporting",
      allowFiltering: "allowFiltering",
      allowFixing: "allowFixing",
      allowGrouping: "allowGrouping",
      allowHeaderFiltering: "allowHeaderFiltering",
      allowHiding: "allowHiding",
      allowReordering: "allowReordering",
      allowResizing: "allowResizing",
      allowSearch: "allowSearch",
      allowSorting: "allowSorting",
      autoExpandGroup: "autoExpandGroup",
      buttons: "buttons",
      calculateCellValue: "calculateCellValue",
      calculateDisplayValue: "calculateDisplayValue",
      calculateFilterExpression: "calculateFilterExpression",
      calculateGroupValue: "calculateGroupValue",
      calculateSortValue: "calculateSortValue",
      caption: "caption",
      cellTemplate: "cellTemplate",
      columns: "columns",
      cssClass: "cssClass",
      customizeText: "customizeText",
      dataField: "dataField",
      dataType: "dataType",
      editCellTemplate: "editCellTemplate",
      editorOptions: "editorOptions",
      encodeHtml: "encodeHtml",
      falseText: "falseText",
      filterOperations: "filterOperations",
      filterType: "filterType",
      filterValue: "filterValue",
      filterValues: "filterValues",
      fixed: "fixed",
      fixedPosition: "fixedPosition",
      format: "format",
      formItem: "formItem",
      groupCellTemplate: "groupCellTemplate",
      groupIndex: "groupIndex",
      headerCellTemplate: "headerCellTemplate",
      headerFilter: "headerFilter",
      hidingPriority: "hidingPriority",
      isBand: "isBand",
      lookup: "lookup",
      minWidth: "minWidth",
      name: "name",
      ownerBand: "ownerBand",
      renderAsync: "renderAsync",
      selectedFilterOperation: "selectedFilterOperation",
      setCellValue: "setCellValue",
      showEditorAlways: "showEditorAlways",
      showInColumnChooser: "showInColumnChooser",
      showWhenGrouped: "showWhenGrouped",
      sortIndex: "sortIndex",
      sortingMethod: "sortingMethod",
      sortOrder: "sortOrder",
      trueText: "trueText",
      type: "type",
      validationRules: "validationRules",
      visible: "visible",
      visibleIndex: "visibleIndex",
      width: "width"
    },
    outputs: {
      filterValueChange: "filterValueChange",
      filterValuesChange: "filterValuesChange",
      groupIndexChange: "groupIndexChange",
      selectedFilterOperationChange: "selectedFilterOperationChange",
      sortIndexChange: "sortIndexChange",
      sortOrderChange: "sortOrderChange",
      visibleChange: "visibleChange",
      visibleIndexChange: "visibleIndexChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiColumnComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColumnComponent, [{
    type: Component,
    args: [{
      selector: "dxi-column",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["alignment", "allowEditing", "allowExporting", "allowFiltering", "allowFixing", "allowGrouping", "allowHeaderFiltering", "allowHiding", "allowReordering", "allowResizing", "allowSearch", "allowSorting", "autoExpandGroup", "buttons", "calculateCellValue", "calculateDisplayValue", "calculateFilterExpression", "calculateGroupValue", "calculateSortValue", "caption", "cellTemplate", "columns", "cssClass", "customizeText", "dataField", "dataType", "editCellTemplate", "editorOptions", "encodeHtml", "falseText", "filterOperations", "filterType", "filterValue", "filterValues", "fixed", "fixedPosition", "format", "formItem", "groupCellTemplate", "groupIndex", "headerCellTemplate", "headerFilter", "hidingPriority", "isBand", "lookup", "minWidth", "name", "ownerBand", "renderAsync", "selectedFilterOperation", "setCellValue", "showEditorAlways", "showInColumnChooser", "showWhenGrouped", "sortIndex", "sortingMethod", "sortOrder", "trueText", "type", "validationRules", "visible", "visibleIndex", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    filterValueChange: [{
      type: Output
    }],
    filterValuesChange: [{
      type: Output
    }],
    groupIndexChange: [{
      type: Output
    }],
    selectedFilterOperationChange: [{
      type: Output
    }],
    sortIndexChange: [{
      type: Output
    }],
    sortOrderChange: [{
      type: Output
    }],
    visibleChange: [{
      type: Output
    }],
    visibleIndexChange: [{
      type: Output
    }],
    buttonsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiButtonComponent)]
    }],
    columnsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiColumnComponent)]
    }],
    validationRulesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiValidationRuleComponent)]
    }]
  });
})();
var DxiColumnModule = class _DxiColumnModule {
  /** @nocollapse */
  static ɵfac = function DxiColumnModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiColumnModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiColumnModule,
    declarations: [DxiColumnComponent],
    exports: [DxiColumnComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColumnModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiColumnComponent],
      exports: [DxiColumnComponent]
    }]
  }], null, null);
})();
var DxoColumnFixingComponent = class _DxoColumnFixingComponent extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get icons() {
    return this._getOption("icons");
  }
  set icons(value) {
    this._setOption("icons", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "columnFixing";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoColumnFixingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColumnFixingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColumnFixingComponent,
    selectors: [["dxo-column-fixing"]],
    inputs: {
      enabled: "enabled",
      icons: "icons",
      texts: "texts"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColumnFixingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnFixingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-column-fixing",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    enabled: [{
      type: Input
    }],
    icons: [{
      type: Input
    }],
    texts: [{
      type: Input
    }]
  });
})();
var DxoColumnFixingModule = class _DxoColumnFixingModule {
  /** @nocollapse */
  static ɵfac = function DxoColumnFixingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoColumnFixingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoColumnFixingModule,
    declarations: [DxoColumnFixingComponent],
    exports: [DxoColumnFixingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnFixingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoColumnFixingComponent],
      exports: [DxoColumnFixingComponent]
    }]
  }], null, null);
})();
var DxoChartCommonAnnotationConfig = class _DxoChartCommonAnnotationConfig extends NestedOption {
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get argument() {
    return this._getOption("argument");
  }
  set argument(value) {
    this._setOption("argument", value);
  }
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get arrowWidth() {
    return this._getOption("arrowWidth");
  }
  set arrowWidth(value) {
    this._setOption("arrowWidth", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get description() {
    return this._getOption("description");
  }
  set description(value) {
    this._setOption("description", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get tooltipEnabled() {
    return this._getOption("tooltipEnabled");
  }
  set tooltipEnabled(value) {
    this._setOption("tooltipEnabled", value);
  }
  get tooltipTemplate() {
    return this._getOption("tooltipTemplate");
  }
  set tooltipTemplate(value) {
    this._setOption("tooltipTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get angle() {
    return this._getOption("angle");
  }
  set angle(value) {
    this._setOption("angle", value);
  }
  get radius() {
    return this._getOption("radius");
  }
  set radius(value) {
    this._setOption("radius", value);
  }
  get coordinates() {
    return this._getOption("coordinates");
  }
  set coordinates(value) {
    this._setOption("coordinates", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoChartCommonAnnotationConfig_BaseFactory;
    return function DxoChartCommonAnnotationConfig_Factory(__ngFactoryType__) {
      return (ɵDxoChartCommonAnnotationConfig_BaseFactory || (ɵDxoChartCommonAnnotationConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoChartCommonAnnotationConfig)))(__ngFactoryType__ || _DxoChartCommonAnnotationConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoChartCommonAnnotationConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoChartCommonAnnotationConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartCommonAnnotationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoCommonAnnotationSettingsComponent = class _DxoCommonAnnotationSettingsComponent extends DxoChartCommonAnnotationConfig {
  get _optionPath() {
    return "commonAnnotationSettings";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCommonAnnotationSettingsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonAnnotationSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCommonAnnotationSettingsComponent,
    selectors: [["dxo-common-annotation-settings"]],
    inputs: {
      allowDragging: "allowDragging",
      argument: "argument",
      arrowLength: "arrowLength",
      arrowWidth: "arrowWidth",
      axis: "axis",
      border: "border",
      color: "color",
      customizeTooltip: "customizeTooltip",
      data: "data",
      description: "description",
      font: "font",
      height: "height",
      image: "image",
      offsetX: "offsetX",
      offsetY: "offsetY",
      opacity: "opacity",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      series: "series",
      shadow: "shadow",
      template: "template",
      text: "text",
      textOverflow: "textOverflow",
      tooltipEnabled: "tooltipEnabled",
      tooltipTemplate: "tooltipTemplate",
      type: "type",
      value: "value",
      width: "width",
      wordWrap: "wordWrap",
      x: "x",
      y: "y",
      location: "location",
      angle: "angle",
      radius: "radius",
      coordinates: "coordinates"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCommonAnnotationSettingsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAnnotationSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-annotation-settings",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowDragging", "argument", "arrowLength", "arrowWidth", "axis", "border", "color", "customizeTooltip", "data", "description", "font", "height", "image", "offsetX", "offsetY", "opacity", "paddingLeftRight", "paddingTopBottom", "series", "shadow", "template", "text", "textOverflow", "tooltipEnabled", "tooltipTemplate", "type", "value", "width", "wordWrap", "x", "y", "location", "angle", "radius", "coordinates"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoCommonAnnotationSettingsModule = class _DxoCommonAnnotationSettingsModule {
  /** @nocollapse */
  static ɵfac = function DxoCommonAnnotationSettingsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonAnnotationSettingsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCommonAnnotationSettingsModule,
    declarations: [DxoCommonAnnotationSettingsComponent],
    exports: [DxoCommonAnnotationSettingsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAnnotationSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCommonAnnotationSettingsComponent],
      exports: [DxoCommonAnnotationSettingsComponent]
    }]
  }], null, null);
})();
var DxoCommonAxisSettingsComponent = class _DxoCommonAxisSettingsComponent extends NestedOption {
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "commonAxisSettings";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCommonAxisSettingsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonAxisSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCommonAxisSettingsComponent,
    selectors: [["dxo-common-axis-settings"]],
    inputs: {
      aggregatedPointsPosition: "aggregatedPointsPosition",
      allowDecimals: "allowDecimals",
      breakStyle: "breakStyle",
      color: "color",
      constantLineStyle: "constantLineStyle",
      discreteAxisDivisionMode: "discreteAxisDivisionMode",
      endOnTick: "endOnTick",
      grid: "grid",
      inverted: "inverted",
      label: "label",
      maxValueMargin: "maxValueMargin",
      minorGrid: "minorGrid",
      minorTick: "minorTick",
      minValueMargin: "minValueMargin",
      opacity: "opacity",
      placeholderSize: "placeholderSize",
      stripStyle: "stripStyle",
      tick: "tick",
      title: "title",
      valueMarginsEnabled: "valueMarginsEnabled",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCommonAxisSettingsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAxisSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-axis-settings",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    aggregatedPointsPosition: [{
      type: Input
    }],
    allowDecimals: [{
      type: Input
    }],
    breakStyle: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    constantLineStyle: [{
      type: Input
    }],
    discreteAxisDivisionMode: [{
      type: Input
    }],
    endOnTick: [{
      type: Input
    }],
    grid: [{
      type: Input
    }],
    inverted: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    maxValueMargin: [{
      type: Input
    }],
    minorGrid: [{
      type: Input
    }],
    minorTick: [{
      type: Input
    }],
    minValueMargin: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    placeholderSize: [{
      type: Input
    }],
    stripStyle: [{
      type: Input
    }],
    tick: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    valueMarginsEnabled: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoCommonAxisSettingsModule = class _DxoCommonAxisSettingsModule {
  /** @nocollapse */
  static ɵfac = function DxoCommonAxisSettingsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonAxisSettingsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCommonAxisSettingsModule,
    declarations: [DxoCommonAxisSettingsComponent],
    exports: [DxoCommonAxisSettingsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAxisSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCommonAxisSettingsComponent],
      exports: [DxoCommonAxisSettingsComponent]
    }]
  }], null, null);
})();
var DxoCommonPaneSettingsComponent = class _DxoCommonPaneSettingsComponent extends NestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get _optionPath() {
    return "commonPaneSettings";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCommonPaneSettingsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonPaneSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCommonPaneSettingsComponent,
    selectors: [["dxo-common-pane-settings"]],
    inputs: {
      backgroundColor: "backgroundColor",
      border: "border"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCommonPaneSettingsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonPaneSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-pane-settings",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    border: [{
      type: Input
    }]
  });
})();
var DxoCommonPaneSettingsModule = class _DxoCommonPaneSettingsModule {
  /** @nocollapse */
  static ɵfac = function DxoCommonPaneSettingsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonPaneSettingsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCommonPaneSettingsModule,
    declarations: [DxoCommonPaneSettingsComponent],
    exports: [DxoCommonPaneSettingsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonPaneSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCommonPaneSettingsComponent],
      exports: [DxoCommonPaneSettingsComponent]
    }]
  }], null, null);
})();
var DxoCommonSeriesSettingsComponent = class _DxoCommonSeriesSettingsComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "commonSeriesSettings";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCommonSeriesSettingsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonSeriesSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCommonSeriesSettingsComponent,
    selectors: [["dxo-common-series-settings"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      argumentType: "argumentType",
      minSegmentSize: "minSegmentSize",
      smallValuesGrouping: "smallValuesGrouping",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCommonSeriesSettingsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonSeriesSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-series-settings",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "argumentType", "minSegmentSize", "smallValuesGrouping", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoCommonSeriesSettingsModule = class _DxoCommonSeriesSettingsModule {
  /** @nocollapse */
  static ɵfac = function DxoCommonSeriesSettingsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCommonSeriesSettingsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCommonSeriesSettingsModule,
    declarations: [DxoCommonSeriesSettingsComponent],
    exports: [DxoCommonSeriesSettingsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonSeriesSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCommonSeriesSettingsComponent],
      exports: [DxoCommonSeriesSettingsComponent]
    }]
  }], null, null);
})();
var DxiConnectionPointComponent = class _DxiConnectionPointComponent extends CollectionNestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "connectionPoints";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiConnectionPointComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiConnectionPointComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiConnectionPointComponent,
    selectors: [["dxi-connection-point"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiConnectionPointComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConnectionPointComponent, [{
    type: Component,
    args: [{
      selector: "dxi-connection-point",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxiConnectionPointModule = class _DxiConnectionPointModule {
  /** @nocollapse */
  static ɵfac = function DxiConnectionPointModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiConnectionPointModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiConnectionPointModule,
    declarations: [DxiConnectionPointComponent],
    exports: [DxiConnectionPointComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConnectionPointModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiConnectionPointComponent],
      exports: [DxiConnectionPointComponent]
    }]
  }], null, null);
})();
var DxoConnectorComponent = class _DxoConnectorComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "connector";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoConnectorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConnectorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoConnectorComponent,
    selectors: [["dxo-connector"]],
    inputs: {
      color: "color",
      visible: "visible",
      width: "width",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoConnectorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConnectorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-connector",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoConnectorModule = class _DxoConnectorModule {
  /** @nocollapse */
  static ɵfac = function DxoConnectorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConnectorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoConnectorModule,
    declarations: [DxoConnectorComponent],
    exports: [DxoConnectorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConnectorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoConnectorComponent],
      exports: [DxoConnectorComponent]
    }]
  }], null, null);
})();
var DxoConstantLineStyleComponent = class _DxoConstantLineStyleComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "constantLineStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoConstantLineStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConstantLineStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoConstantLineStyleComponent,
    selectors: [["dxo-constant-line-style"]],
    inputs: {
      color: "color",
      dashStyle: "dashStyle",
      label: "label",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoConstantLineStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConstantLineStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-constant-line-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoConstantLineStyleModule = class _DxoConstantLineStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoConstantLineStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConstantLineStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoConstantLineStyleModule,
    declarations: [DxoConstantLineStyleComponent],
    exports: [DxoConstantLineStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConstantLineStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoConstantLineStyleComponent],
      exports: [DxoConstantLineStyleComponent]
    }]
  }], null, null);
})();
var DxoFileManagerContextMenu = class _DxoFileManagerContextMenu extends NestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFileManagerContextMenu_BaseFactory;
    return function DxoFileManagerContextMenu_Factory(__ngFactoryType__) {
      return (ɵDxoFileManagerContextMenu_BaseFactory || (ɵDxoFileManagerContextMenu_BaseFactory = ɵɵgetInheritedFactory(_DxoFileManagerContextMenu)))(__ngFactoryType__ || _DxoFileManagerContextMenu);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFileManagerContextMenu,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFileManagerContextMenu_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileManagerContextMenu, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoContextMenuComponent = class _DxoContextMenuComponent extends DxoFileManagerContextMenu {
  get _optionPath() {
    return "contextMenu";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoContextMenuComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoContextMenuComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoContextMenuComponent,
    selectors: [["dxo-context-menu"]],
    contentQueries: function DxoContextMenuComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      commands: "commands",
      enabled: "enabled",
      items: "items"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoContextMenuComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextMenuComponent, [{
    type: Component,
    args: [{
      selector: "dxo-context-menu",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["commands", "enabled", "items"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoContextMenuModule = class _DxoContextMenuModule {
  /** @nocollapse */
  static ɵfac = function DxoContextMenuModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoContextMenuModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoContextMenuModule,
    declarations: [DxoContextMenuComponent],
    exports: [DxoContextMenuComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextMenuModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoContextMenuComponent],
      exports: [DxoContextMenuComponent]
    }]
  }], null, null);
})();
var DxoContextToolboxComponent = class _DxoContextToolboxComponent extends NestedOption {
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get shapeIconsPerRow() {
    return this._getOption("shapeIconsPerRow");
  }
  set shapeIconsPerRow(value) {
    this._setOption("shapeIconsPerRow", value);
  }
  get shapes() {
    return this._getOption("shapes");
  }
  set shapes(value) {
    this._setOption("shapes", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "contextToolbox";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoContextToolboxComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoContextToolboxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoContextToolboxComponent,
    selectors: [["dxo-context-toolbox"]],
    inputs: {
      category: "category",
      displayMode: "displayMode",
      enabled: "enabled",
      shapeIconsPerRow: "shapeIconsPerRow",
      shapes: "shapes",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoContextToolboxComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextToolboxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-context-toolbox",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    category: [{
      type: Input
    }],
    displayMode: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    shapeIconsPerRow: [{
      type: Input
    }],
    shapes: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoContextToolboxModule = class _DxoContextToolboxModule {
  /** @nocollapse */
  static ɵfac = function DxoContextToolboxModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoContextToolboxModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoContextToolboxModule,
    declarations: [DxoContextToolboxComponent],
    exports: [DxoContextToolboxComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextToolboxModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoContextToolboxComponent],
      exports: [DxoContextToolboxComponent]
    }]
  }], null, null);
})();
var DxoControlBarComponent = class _DxoControlBarComponent extends NestedOption {
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get panVisible() {
    return this._getOption("panVisible");
  }
  set panVisible(value) {
    this._setOption("panVisible", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get zoomVisible() {
    return this._getOption("zoomVisible");
  }
  set zoomVisible(value) {
    this._setOption("zoomVisible", value);
  }
  get _optionPath() {
    return "controlBar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoControlBarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoControlBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoControlBarComponent,
    selectors: [["dxo-control-bar"]],
    inputs: {
      borderColor: "borderColor",
      color: "color",
      enabled: "enabled",
      horizontalAlignment: "horizontalAlignment",
      margin: "margin",
      opacity: "opacity",
      panVisible: "panVisible",
      verticalAlignment: "verticalAlignment",
      zoomVisible: "zoomVisible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoControlBarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoControlBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-control-bar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    borderColor: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    horizontalAlignment: [{
      type: Input
    }],
    margin: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    panVisible: [{
      type: Input
    }],
    verticalAlignment: [{
      type: Input
    }],
    zoomVisible: [{
      type: Input
    }]
  });
})();
var DxoControlBarModule = class _DxoControlBarModule {
  /** @nocollapse */
  static ɵfac = function DxoControlBarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoControlBarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoControlBarModule,
    declarations: [DxoControlBarComponent],
    exports: [DxoControlBarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoControlBarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoControlBarComponent],
      exports: [DxoControlBarComponent]
    }]
  }], null, null);
})();
var DxoConverter = class _DxoConverter extends NestedOption {
  get fromHtml() {
    return this._getOption("fromHtml");
  }
  set fromHtml(value) {
    this._setOption("fromHtml", value);
  }
  get toHtml() {
    return this._getOption("toHtml");
  }
  set toHtml(value) {
    this._setOption("toHtml", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoConverter_BaseFactory;
    return function DxoConverter_Factory(__ngFactoryType__) {
      return (ɵDxoConverter_BaseFactory || (ɵDxoConverter_BaseFactory = ɵɵgetInheritedFactory(_DxoConverter)))(__ngFactoryType__ || _DxoConverter);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoConverter,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoConverter_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConverter, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoConverterComponent = class _DxoConverterComponent extends DxoConverter {
  get _optionPath() {
    return "converter";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoConverterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConverterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoConverterComponent,
    selectors: [["dxo-converter"]],
    inputs: {
      fromHtml: "fromHtml",
      toHtml: "toHtml"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoConverterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConverterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-converter",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["fromHtml", "toHtml"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoConverterModule = class _DxoConverterModule {
  /** @nocollapse */
  static ɵfac = function DxoConverterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoConverterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoConverterModule,
    declarations: [DxoConverterComponent],
    exports: [DxoConverterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConverterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoConverterComponent],
      exports: [DxoConverterComponent]
    }]
  }], null, null);
})();
var DxoCrosshairComponent = class _DxoCrosshairComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get horizontalLine() {
    return this._getOption("horizontalLine");
  }
  set horizontalLine(value) {
    this._setOption("horizontalLine", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get verticalLine() {
    return this._getOption("verticalLine");
  }
  set verticalLine(value) {
    this._setOption("verticalLine", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "crosshair";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCrosshairComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCrosshairComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCrosshairComponent,
    selectors: [["dxo-crosshair"]],
    inputs: {
      color: "color",
      dashStyle: "dashStyle",
      enabled: "enabled",
      horizontalLine: "horizontalLine",
      label: "label",
      opacity: "opacity",
      verticalLine: "verticalLine",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCrosshairComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCrosshairComponent, [{
    type: Component,
    args: [{
      selector: "dxo-crosshair",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    horizontalLine: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    verticalLine: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoCrosshairModule = class _DxoCrosshairModule {
  /** @nocollapse */
  static ɵfac = function DxoCrosshairModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCrosshairModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCrosshairModule,
    declarations: [DxoCrosshairComponent],
    exports: [DxoCrosshairComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCrosshairModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCrosshairComponent],
      exports: [DxoCrosshairComponent]
    }]
  }], null, null);
})();
var DxoCursorOffsetComponent = class _DxoCursorOffsetComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "cursorOffset";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoCursorOffsetComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCursorOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoCursorOffsetComponent,
    selectors: [["dxo-cursor-offset"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoCursorOffsetComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCursorOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-cursor-offset",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoCursorOffsetModule = class _DxoCursorOffsetModule {
  /** @nocollapse */
  static ɵfac = function DxoCursorOffsetModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoCursorOffsetModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoCursorOffsetModule,
    declarations: [DxoCursorOffsetComponent],
    exports: [DxoCursorOffsetComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCursorOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoCursorOffsetComponent],
      exports: [DxoCursorOffsetComponent]
    }]
  }], null, null);
})();
var DxiFilterBuilderCustomOperation = class _DxiFilterBuilderCustomOperation extends CollectionNestedOption {
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataTypes() {
    return this._getOption("dataTypes");
  }
  set dataTypes(value) {
    this._setOption("dataTypes", value);
  }
  get editorTemplate() {
    return this._getOption("editorTemplate");
  }
  set editorTemplate(value) {
    this._setOption("editorTemplate", value);
  }
  get hasValue() {
    return this._getOption("hasValue");
  }
  set hasValue(value) {
    this._setOption("hasValue", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiFilterBuilderCustomOperation_BaseFactory;
    return function DxiFilterBuilderCustomOperation_Factory(__ngFactoryType__) {
      return (ɵDxiFilterBuilderCustomOperation_BaseFactory || (ɵDxiFilterBuilderCustomOperation_BaseFactory = ɵɵgetInheritedFactory(_DxiFilterBuilderCustomOperation)))(__ngFactoryType__ || _DxiFilterBuilderCustomOperation);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiFilterBuilderCustomOperation,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiFilterBuilderCustomOperation_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFilterBuilderCustomOperation, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiCustomOperationComponent = class _DxiCustomOperationComponent extends DxiFilterBuilderCustomOperation {
  get _optionPath() {
    return "customOperations";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiCustomOperationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCustomOperationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiCustomOperationComponent,
    selectors: [["dxi-custom-operation"]],
    inputs: {
      calculateFilterExpression: "calculateFilterExpression",
      caption: "caption",
      customizeText: "customizeText",
      dataTypes: "dataTypes",
      editorTemplate: "editorTemplate",
      hasValue: "hasValue",
      icon: "icon",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiCustomOperationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomOperationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-custom-operation",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["calculateFilterExpression", "caption", "customizeText", "dataTypes", "editorTemplate", "hasValue", "icon", "name"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiCustomOperationModule = class _DxiCustomOperationModule {
  /** @nocollapse */
  static ɵfac = function DxiCustomOperationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCustomOperationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiCustomOperationModule,
    declarations: [DxiCustomOperationComponent],
    exports: [DxiCustomOperationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomOperationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiCustomOperationComponent],
      exports: [DxiCustomOperationComponent]
    }]
  }], null, null);
})();
var DxiCustomShapeComponent = class _DxiCustomShapeComponent extends CollectionNestedOption {
  renderer;
  document;
  element;
  get allowEditImage() {
    return this._getOption("allowEditImage");
  }
  set allowEditImage(value) {
    this._setOption("allowEditImage", value);
  }
  get allowEditText() {
    return this._getOption("allowEditText");
  }
  set allowEditText(value) {
    this._setOption("allowEditText", value);
  }
  get allowResize() {
    return this._getOption("allowResize");
  }
  set allowResize(value) {
    this._setOption("allowResize", value);
  }
  get backgroundImageHeight() {
    return this._getOption("backgroundImageHeight");
  }
  set backgroundImageHeight(value) {
    this._setOption("backgroundImageHeight", value);
  }
  get backgroundImageLeft() {
    return this._getOption("backgroundImageLeft");
  }
  set backgroundImageLeft(value) {
    this._setOption("backgroundImageLeft", value);
  }
  get backgroundImageToolboxUrl() {
    return this._getOption("backgroundImageToolboxUrl");
  }
  set backgroundImageToolboxUrl(value) {
    this._setOption("backgroundImageToolboxUrl", value);
  }
  get backgroundImageTop() {
    return this._getOption("backgroundImageTop");
  }
  set backgroundImageTop(value) {
    this._setOption("backgroundImageTop", value);
  }
  get backgroundImageUrl() {
    return this._getOption("backgroundImageUrl");
  }
  set backgroundImageUrl(value) {
    this._setOption("backgroundImageUrl", value);
  }
  get backgroundImageWidth() {
    return this._getOption("backgroundImageWidth");
  }
  set backgroundImageWidth(value) {
    this._setOption("backgroundImageWidth", value);
  }
  get baseType() {
    return this._getOption("baseType");
  }
  set baseType(value) {
    this._setOption("baseType", value);
  }
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get connectionPoints() {
    return this._getOption("connectionPoints");
  }
  set connectionPoints(value) {
    this._setOption("connectionPoints", value);
  }
  get defaultHeight() {
    return this._getOption("defaultHeight");
  }
  set defaultHeight(value) {
    this._setOption("defaultHeight", value);
  }
  get defaultImageUrl() {
    return this._getOption("defaultImageUrl");
  }
  set defaultImageUrl(value) {
    this._setOption("defaultImageUrl", value);
  }
  get defaultText() {
    return this._getOption("defaultText");
  }
  set defaultText(value) {
    this._setOption("defaultText", value);
  }
  get defaultWidth() {
    return this._getOption("defaultWidth");
  }
  set defaultWidth(value) {
    this._setOption("defaultWidth", value);
  }
  get imageHeight() {
    return this._getOption("imageHeight");
  }
  set imageHeight(value) {
    this._setOption("imageHeight", value);
  }
  get imageLeft() {
    return this._getOption("imageLeft");
  }
  set imageLeft(value) {
    this._setOption("imageLeft", value);
  }
  get imageTop() {
    return this._getOption("imageTop");
  }
  set imageTop(value) {
    this._setOption("imageTop", value);
  }
  get imageWidth() {
    return this._getOption("imageWidth");
  }
  set imageWidth(value) {
    this._setOption("imageWidth", value);
  }
  get keepRatioOnAutoSize() {
    return this._getOption("keepRatioOnAutoSize");
  }
  set keepRatioOnAutoSize(value) {
    this._setOption("keepRatioOnAutoSize", value);
  }
  get maxHeight() {
    return this._getOption("maxHeight");
  }
  set maxHeight(value) {
    this._setOption("maxHeight", value);
  }
  get maxWidth() {
    return this._getOption("maxWidth");
  }
  set maxWidth(value) {
    this._setOption("maxWidth", value);
  }
  get minHeight() {
    return this._getOption("minHeight");
  }
  set minHeight(value) {
    this._setOption("minHeight", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get templateHeight() {
    return this._getOption("templateHeight");
  }
  set templateHeight(value) {
    this._setOption("templateHeight", value);
  }
  get templateLeft() {
    return this._getOption("templateLeft");
  }
  set templateLeft(value) {
    this._setOption("templateLeft", value);
  }
  get templateTop() {
    return this._getOption("templateTop");
  }
  set templateTop(value) {
    this._setOption("templateTop", value);
  }
  get templateWidth() {
    return this._getOption("templateWidth");
  }
  set templateWidth(value) {
    this._setOption("templateWidth", value);
  }
  get textHeight() {
    return this._getOption("textHeight");
  }
  set textHeight(value) {
    this._setOption("textHeight", value);
  }
  get textLeft() {
    return this._getOption("textLeft");
  }
  set textLeft(value) {
    this._setOption("textLeft", value);
  }
  get textTop() {
    return this._getOption("textTop");
  }
  set textTop(value) {
    this._setOption("textTop", value);
  }
  get textWidth() {
    return this._getOption("textWidth");
  }
  set textWidth(value) {
    this._setOption("textWidth", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get toolboxTemplate() {
    return this._getOption("toolboxTemplate");
  }
  set toolboxTemplate(value) {
    this._setOption("toolboxTemplate", value);
  }
  get toolboxWidthToHeightRatio() {
    return this._getOption("toolboxWidthToHeightRatio");
  }
  set toolboxWidthToHeightRatio(value) {
    this._setOption("toolboxWidthToHeightRatio", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "customShapes";
  }
  get connectionPointsChildren() {
    return this._getOption("connectionPoints");
  }
  set connectionPointsChildren(value) {
    this.setChildren("connectionPoints", value);
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiCustomShapeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCustomShapeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiCustomShapeComponent,
    selectors: [["dxi-custom-shape"]],
    contentQueries: function DxiCustomShapeComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiConnectionPointComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.connectionPointsChildren = _t);
      }
    },
    inputs: {
      allowEditImage: "allowEditImage",
      allowEditText: "allowEditText",
      allowResize: "allowResize",
      backgroundImageHeight: "backgroundImageHeight",
      backgroundImageLeft: "backgroundImageLeft",
      backgroundImageToolboxUrl: "backgroundImageToolboxUrl",
      backgroundImageTop: "backgroundImageTop",
      backgroundImageUrl: "backgroundImageUrl",
      backgroundImageWidth: "backgroundImageWidth",
      baseType: "baseType",
      category: "category",
      connectionPoints: "connectionPoints",
      defaultHeight: "defaultHeight",
      defaultImageUrl: "defaultImageUrl",
      defaultText: "defaultText",
      defaultWidth: "defaultWidth",
      imageHeight: "imageHeight",
      imageLeft: "imageLeft",
      imageTop: "imageTop",
      imageWidth: "imageWidth",
      keepRatioOnAutoSize: "keepRatioOnAutoSize",
      maxHeight: "maxHeight",
      maxWidth: "maxWidth",
      minHeight: "minHeight",
      minWidth: "minWidth",
      template: "template",
      templateHeight: "templateHeight",
      templateLeft: "templateLeft",
      templateTop: "templateTop",
      templateWidth: "templateWidth",
      textHeight: "textHeight",
      textLeft: "textLeft",
      textTop: "textTop",
      textWidth: "textWidth",
      title: "title",
      toolboxTemplate: "toolboxTemplate",
      toolboxWidthToHeightRatio: "toolboxWidthToHeightRatio",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxiCustomShapeComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomShapeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-custom-shape",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    allowEditImage: [{
      type: Input
    }],
    allowEditText: [{
      type: Input
    }],
    allowResize: [{
      type: Input
    }],
    backgroundImageHeight: [{
      type: Input
    }],
    backgroundImageLeft: [{
      type: Input
    }],
    backgroundImageToolboxUrl: [{
      type: Input
    }],
    backgroundImageTop: [{
      type: Input
    }],
    backgroundImageUrl: [{
      type: Input
    }],
    backgroundImageWidth: [{
      type: Input
    }],
    baseType: [{
      type: Input
    }],
    category: [{
      type: Input
    }],
    connectionPoints: [{
      type: Input
    }],
    defaultHeight: [{
      type: Input
    }],
    defaultImageUrl: [{
      type: Input
    }],
    defaultText: [{
      type: Input
    }],
    defaultWidth: [{
      type: Input
    }],
    imageHeight: [{
      type: Input
    }],
    imageLeft: [{
      type: Input
    }],
    imageTop: [{
      type: Input
    }],
    imageWidth: [{
      type: Input
    }],
    keepRatioOnAutoSize: [{
      type: Input
    }],
    maxHeight: [{
      type: Input
    }],
    maxWidth: [{
      type: Input
    }],
    minHeight: [{
      type: Input
    }],
    minWidth: [{
      type: Input
    }],
    template: [{
      type: Input
    }],
    templateHeight: [{
      type: Input
    }],
    templateLeft: [{
      type: Input
    }],
    templateTop: [{
      type: Input
    }],
    templateWidth: [{
      type: Input
    }],
    textHeight: [{
      type: Input
    }],
    textLeft: [{
      type: Input
    }],
    textTop: [{
      type: Input
    }],
    textWidth: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    toolboxTemplate: [{
      type: Input
    }],
    toolboxWidthToHeightRatio: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    connectionPointsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiConnectionPointComponent)]
    }]
  });
})();
var DxiCustomShapeModule = class _DxiCustomShapeModule {
  /** @nocollapse */
  static ɵfac = function DxiCustomShapeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiCustomShapeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiCustomShapeModule,
    declarations: [DxiCustomShapeComponent],
    exports: [DxiCustomShapeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomShapeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiCustomShapeComponent],
      exports: [DxiCustomShapeComponent]
    }]
  }], null, null);
})();
var DxoDataPrepareSettingsComponent = class _DxoDataPrepareSettingsComponent extends NestedOption {
  get checkTypeForAllData() {
    return this._getOption("checkTypeForAllData");
  }
  set checkTypeForAllData(value) {
    this._setOption("checkTypeForAllData", value);
  }
  get convertToAxisDataType() {
    return this._getOption("convertToAxisDataType");
  }
  set convertToAxisDataType(value) {
    this._setOption("convertToAxisDataType", value);
  }
  get sortingMethod() {
    return this._getOption("sortingMethod");
  }
  set sortingMethod(value) {
    this._setOption("sortingMethod", value);
  }
  get _optionPath() {
    return "dataPrepareSettings";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDataPrepareSettingsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDataPrepareSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDataPrepareSettingsComponent,
    selectors: [["dxo-data-prepare-settings"]],
    inputs: {
      checkTypeForAllData: "checkTypeForAllData",
      convertToAxisDataType: "convertToAxisDataType",
      sortingMethod: "sortingMethod"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDataPrepareSettingsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataPrepareSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-data-prepare-settings",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    checkTypeForAllData: [{
      type: Input
    }],
    convertToAxisDataType: [{
      type: Input
    }],
    sortingMethod: [{
      type: Input
    }]
  });
})();
var DxoDataPrepareSettingsModule = class _DxoDataPrepareSettingsModule {
  /** @nocollapse */
  static ɵfac = function DxoDataPrepareSettingsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDataPrepareSettingsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDataPrepareSettingsModule,
    declarations: [DxoDataPrepareSettingsComponent],
    exports: [DxoDataPrepareSettingsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataPrepareSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDataPrepareSettingsComponent],
      exports: [DxoDataPrepareSettingsComponent]
    }]
  }], null, null);
})();
var DxoDayHeaderFormatComponent = class _DxoDayHeaderFormatComponent extends DxoFormat {
  get _optionPath() {
    return "dayHeaderFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDayHeaderFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDayHeaderFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDayHeaderFormatComponent,
    selectors: [["dxo-day-header-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDayHeaderFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDayHeaderFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-day-header-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoDayHeaderFormatModule = class _DxoDayHeaderFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoDayHeaderFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDayHeaderFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDayHeaderFormatModule,
    declarations: [DxoDayHeaderFormatComponent],
    exports: [DxoDayHeaderFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDayHeaderFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDayHeaderFormatComponent],
      exports: [DxoDayHeaderFormatComponent]
    }]
  }], null, null);
})();
var DxoDefaultItemPropertiesComponent = class _DxoDefaultItemPropertiesComponent extends NestedOption {
  get connectorLineEnd() {
    return this._getOption("connectorLineEnd");
  }
  set connectorLineEnd(value) {
    this._setOption("connectorLineEnd", value);
  }
  get connectorLineStart() {
    return this._getOption("connectorLineStart");
  }
  set connectorLineStart(value) {
    this._setOption("connectorLineStart", value);
  }
  get connectorLineType() {
    return this._getOption("connectorLineType");
  }
  set connectorLineType(value) {
    this._setOption("connectorLineType", value);
  }
  get shapeMaxHeight() {
    return this._getOption("shapeMaxHeight");
  }
  set shapeMaxHeight(value) {
    this._setOption("shapeMaxHeight", value);
  }
  get shapeMaxWidth() {
    return this._getOption("shapeMaxWidth");
  }
  set shapeMaxWidth(value) {
    this._setOption("shapeMaxWidth", value);
  }
  get shapeMinHeight() {
    return this._getOption("shapeMinHeight");
  }
  set shapeMinHeight(value) {
    this._setOption("shapeMinHeight", value);
  }
  get shapeMinWidth() {
    return this._getOption("shapeMinWidth");
  }
  set shapeMinWidth(value) {
    this._setOption("shapeMinWidth", value);
  }
  get style() {
    return this._getOption("style");
  }
  set style(value) {
    this._setOption("style", value);
  }
  get textStyle() {
    return this._getOption("textStyle");
  }
  set textStyle(value) {
    this._setOption("textStyle", value);
  }
  get _optionPath() {
    return "defaultItemProperties";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDefaultItemPropertiesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDefaultItemPropertiesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDefaultItemPropertiesComponent,
    selectors: [["dxo-default-item-properties"]],
    inputs: {
      connectorLineEnd: "connectorLineEnd",
      connectorLineStart: "connectorLineStart",
      connectorLineType: "connectorLineType",
      shapeMaxHeight: "shapeMaxHeight",
      shapeMaxWidth: "shapeMaxWidth",
      shapeMinHeight: "shapeMinHeight",
      shapeMinWidth: "shapeMinWidth",
      style: "style",
      textStyle: "textStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDefaultItemPropertiesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDefaultItemPropertiesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-default-item-properties",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    connectorLineEnd: [{
      type: Input
    }],
    connectorLineStart: [{
      type: Input
    }],
    connectorLineType: [{
      type: Input
    }],
    shapeMaxHeight: [{
      type: Input
    }],
    shapeMaxWidth: [{
      type: Input
    }],
    shapeMinHeight: [{
      type: Input
    }],
    shapeMinWidth: [{
      type: Input
    }],
    style: [{
      type: Input
    }],
    textStyle: [{
      type: Input
    }]
  });
})();
var DxoDefaultItemPropertiesModule = class _DxoDefaultItemPropertiesModule {
  /** @nocollapse */
  static ɵfac = function DxoDefaultItemPropertiesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDefaultItemPropertiesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDefaultItemPropertiesModule,
    declarations: [DxoDefaultItemPropertiesComponent],
    exports: [DxoDefaultItemPropertiesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDefaultItemPropertiesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDefaultItemPropertiesComponent],
      exports: [DxoDefaultItemPropertiesComponent]
    }]
  }], null, null);
})();
var DxoDelayComponent = class _DxoDelayComponent extends NestedOption {
  get hide() {
    return this._getOption("hide");
  }
  set hide(value) {
    this._setOption("hide", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get _optionPath() {
    return "delay";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDelayComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDelayComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDelayComponent,
    selectors: [["dxo-delay"]],
    inputs: {
      hide: "hide",
      show: "show"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDelayComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDelayComponent, [{
    type: Component,
    args: [{
      selector: "dxo-delay",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    hide: [{
      type: Input
    }],
    show: [{
      type: Input
    }]
  });
})();
var DxoDelayModule = class _DxoDelayModule {
  /** @nocollapse */
  static ɵfac = function DxoDelayModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDelayModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDelayModule,
    declarations: [DxoDelayComponent],
    exports: [DxoDelayComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDelayModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDelayComponent],
      exports: [DxoDelayComponent]
    }]
  }], null, null);
})();
var DxoDependenciesComponent = class _DxoDependenciesComponent extends NestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get predecessorIdExpr() {
    return this._getOption("predecessorIdExpr");
  }
  set predecessorIdExpr(value) {
    this._setOption("predecessorIdExpr", value);
  }
  get successorIdExpr() {
    return this._getOption("successorIdExpr");
  }
  set successorIdExpr(value) {
    this._setOption("successorIdExpr", value);
  }
  get typeExpr() {
    return this._getOption("typeExpr");
  }
  set typeExpr(value) {
    this._setOption("typeExpr", value);
  }
  get _optionPath() {
    return "dependencies";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDependenciesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDependenciesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDependenciesComponent,
    selectors: [["dxo-dependencies"]],
    inputs: {
      dataSource: "dataSource",
      keyExpr: "keyExpr",
      predecessorIdExpr: "predecessorIdExpr",
      successorIdExpr: "successorIdExpr",
      typeExpr: "typeExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDependenciesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDependenciesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-dependencies",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    dataSource: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    predecessorIdExpr: [{
      type: Input
    }],
    successorIdExpr: [{
      type: Input
    }],
    typeExpr: [{
      type: Input
    }]
  });
})();
var DxoDependenciesModule = class _DxoDependenciesModule {
  /** @nocollapse */
  static ɵfac = function DxoDependenciesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDependenciesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDependenciesModule,
    declarations: [DxoDependenciesComponent],
    exports: [DxoDependenciesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDependenciesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDependenciesComponent],
      exports: [DxoDependenciesComponent]
    }]
  }], null, null);
})();
var DxoDetailsComponent = class _DxoDetailsComponent extends NestedOption {
  get columns() {
    return this._getOption("columns");
  }
  set columns(value) {
    this._setOption("columns", value);
  }
  get _optionPath() {
    return "details";
  }
  get columnsChildren() {
    return this._getOption("columns");
  }
  set columnsChildren(value) {
    this.setChildren("columns", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDetailsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDetailsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDetailsComponent,
    selectors: [["dxo-details"]],
    contentQueries: function DxoDetailsComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columnsChildren = _t);
      }
    },
    inputs: {
      columns: "columns"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDetailsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDetailsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-details",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    columns: [{
      type: Input
    }],
    columnsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiColumnComponent)]
    }]
  });
})();
var DxoDetailsModule = class _DxoDetailsModule {
  /** @nocollapse */
  static ɵfac = function DxoDetailsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDetailsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDetailsModule,
    declarations: [DxoDetailsComponent],
    exports: [DxoDetailsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDetailsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDetailsComponent],
      exports: [DxoDetailsComponent]
    }]
  }], null, null);
})();
var DxoDisplayFormatComponent = class _DxoDisplayFormatComponent extends DxoFormat {
  get _optionPath() {
    return "displayFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDisplayFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDisplayFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDisplayFormatComponent,
    selectors: [["dxo-display-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDisplayFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDisplayFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-display-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoDisplayFormatModule = class _DxoDisplayFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoDisplayFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDisplayFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDisplayFormatModule,
    declarations: [DxoDisplayFormatComponent],
    exports: [DxoDisplayFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDisplayFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDisplayFormatComponent],
      exports: [DxoDisplayFormatComponent]
    }]
  }], null, null);
})();
var DxoDragBoxStyleComponent = class _DxoDragBoxStyleComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "dragBoxStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDragBoxStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDragBoxStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDragBoxStyleComponent,
    selectors: [["dxo-drag-box-style"]],
    inputs: {
      color: "color",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDragBoxStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDragBoxStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-drag-box-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoDragBoxStyleModule = class _DxoDragBoxStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoDragBoxStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDragBoxStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDragBoxStyleModule,
    declarations: [DxoDragBoxStyleComponent],
    exports: [DxoDragBoxStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDragBoxStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDragBoxStyleComponent],
      exports: [DxoDragBoxStyleComponent]
    }]
  }], null, null);
})();
var DxoPopupOptions = class _DxoPopupOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get animation() {
    return this._getOption("animation");
  }
  set animation(value) {
    this._setOption("animation", value);
  }
  get closeOnOutsideClick() {
    return this._getOption("closeOnOutsideClick");
  }
  set closeOnOutsideClick(value) {
    this._setOption("closeOnOutsideClick", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get contentTemplate() {
    return this._getOption("contentTemplate");
  }
  set contentTemplate(value) {
    this._setOption("contentTemplate", value);
  }
  get deferRendering() {
    return this._getOption("deferRendering");
  }
  set deferRendering(value) {
    this._setOption("deferRendering", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get dragAndResizeArea() {
    return this._getOption("dragAndResizeArea");
  }
  set dragAndResizeArea(value) {
    this._setOption("dragAndResizeArea", value);
  }
  get dragEnabled() {
    return this._getOption("dragEnabled");
  }
  set dragEnabled(value) {
    this._setOption("dragEnabled", value);
  }
  get dragOutsideBoundary() {
    return this._getOption("dragOutsideBoundary");
  }
  set dragOutsideBoundary(value) {
    this._setOption("dragOutsideBoundary", value);
  }
  get enableBodyScroll() {
    return this._getOption("enableBodyScroll");
  }
  set enableBodyScroll(value) {
    this._setOption("enableBodyScroll", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get fullScreen() {
    return this._getOption("fullScreen");
  }
  set fullScreen(value) {
    this._setOption("fullScreen", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hideOnOutsideClick() {
    return this._getOption("hideOnOutsideClick");
  }
  set hideOnOutsideClick(value) {
    this._setOption("hideOnOutsideClick", value);
  }
  get hideOnParentScroll() {
    return this._getOption("hideOnParentScroll");
  }
  set hideOnParentScroll(value) {
    this._setOption("hideOnParentScroll", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get maxHeight() {
    return this._getOption("maxHeight");
  }
  set maxHeight(value) {
    this._setOption("maxHeight", value);
  }
  get maxWidth() {
    return this._getOption("maxWidth");
  }
  set maxWidth(value) {
    this._setOption("maxWidth", value);
  }
  get minHeight() {
    return this._getOption("minHeight");
  }
  set minHeight(value) {
    this._setOption("minHeight", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onHidden() {
    return this._getOption("onHidden");
  }
  set onHidden(value) {
    this._setOption("onHidden", value);
  }
  get onHiding() {
    return this._getOption("onHiding");
  }
  set onHiding(value) {
    this._setOption("onHiding", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onResize() {
    return this._getOption("onResize");
  }
  set onResize(value) {
    this._setOption("onResize", value);
  }
  get onResizeEnd() {
    return this._getOption("onResizeEnd");
  }
  set onResizeEnd(value) {
    this._setOption("onResizeEnd", value);
  }
  get onResizeStart() {
    return this._getOption("onResizeStart");
  }
  set onResizeStart(value) {
    this._setOption("onResizeStart", value);
  }
  get onShowing() {
    return this._getOption("onShowing");
  }
  set onShowing(value) {
    this._setOption("onShowing", value);
  }
  get onShown() {
    return this._getOption("onShown");
  }
  set onShown(value) {
    this._setOption("onShown", value);
  }
  get onTitleRendered() {
    return this._getOption("onTitleRendered");
  }
  set onTitleRendered(value) {
    this._setOption("onTitleRendered", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get resizeEnabled() {
    return this._getOption("resizeEnabled");
  }
  set resizeEnabled(value) {
    this._setOption("resizeEnabled", value);
  }
  get restorePosition() {
    return this._getOption("restorePosition");
  }
  set restorePosition(value) {
    this._setOption("restorePosition", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get shading() {
    return this._getOption("shading");
  }
  set shading(value) {
    this._setOption("shading", value);
  }
  get shadingColor() {
    return this._getOption("shadingColor");
  }
  set shadingColor(value) {
    this._setOption("shadingColor", value);
  }
  get showCloseButton() {
    return this._getOption("showCloseButton");
  }
  set showCloseButton(value) {
    this._setOption("showCloseButton", value);
  }
  get showTitle() {
    return this._getOption("showTitle");
  }
  set showTitle(value) {
    this._setOption("showTitle", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get titleTemplate() {
    return this._getOption("titleTemplate");
  }
  set titleTemplate(value) {
    this._setOption("titleTemplate", value);
  }
  get toolbarItems() {
    return this._getOption("toolbarItems");
  }
  set toolbarItems(value) {
    this._setOption("toolbarItems", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wrapperAttr() {
    return this._getOption("wrapperAttr");
  }
  set wrapperAttr(value) {
    this._setOption("wrapperAttr", value);
  }
  get hideEvent() {
    return this._getOption("hideEvent");
  }
  set hideEvent(value) {
    this._setOption("hideEvent", value);
  }
  get showEvent() {
    return this._getOption("showEvent");
  }
  set showEvent(value) {
    this._setOption("showEvent", value);
  }
  get target() {
    return this._getOption("target");
  }
  set target(value) {
    this._setOption("target", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoPopupOptions_BaseFactory;
    return function DxoPopupOptions_Factory(__ngFactoryType__) {
      return (ɵDxoPopupOptions_BaseFactory || (ɵDxoPopupOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoPopupOptions)))(__ngFactoryType__ || _DxoPopupOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPopupOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPopupOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiToolbarItemComponent = class _DxiToolbarItemComponent extends CollectionNestedOption {
  renderer;
  document;
  element;
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get html() {
    return this._getOption("html");
  }
  set html(value) {
    this._setOption("html", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get menuItemTemplate() {
    return this._getOption("menuItemTemplate");
  }
  set menuItemTemplate(value) {
    this._setOption("menuItemTemplate", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get toolbar() {
    return this._getOption("toolbar");
  }
  set toolbar(value) {
    this._setOption("toolbar", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
  get _optionPath() {
    return "toolbarItems";
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiToolbarItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiToolbarItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiToolbarItemComponent,
    selectors: [["dxi-toolbar-item"]],
    inputs: {
      cssClass: "cssClass",
      disabled: "disabled",
      html: "html",
      locateInMenu: "locateInMenu",
      location: "location",
      menuItemTemplate: "menuItemTemplate",
      options: "options",
      showText: "showText",
      template: "template",
      text: "text",
      toolbar: "toolbar",
      visible: "visible",
      widget: "widget"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxiToolbarItemComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiToolbarItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-toolbar-item",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    cssClass: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    html: [{
      type: Input
    }],
    locateInMenu: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    menuItemTemplate: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    showText: [{
      type: Input
    }],
    template: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    toolbar: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    widget: [{
      type: Input
    }]
  });
})();
var DxiToolbarItemModule = class _DxiToolbarItemModule {
  /** @nocollapse */
  static ɵfac = function DxiToolbarItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiToolbarItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiToolbarItemModule,
    declarations: [DxiToolbarItemComponent],
    exports: [DxiToolbarItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiToolbarItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiToolbarItemComponent],
      exports: [DxiToolbarItemComponent]
    }]
  }], null, null);
})();
var DxoDropDownOptionsComponent = class _DxoDropDownOptionsComponent extends DxoPopupOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  heightChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  positionChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  widthChange;
  get _optionPath() {
    return "dropDownOptions";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "heightChange"
    }, {
      emit: "positionChange"
    }, {
      emit: "visibleChange"
    }, {
      emit: "widthChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoDropDownOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDropDownOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDropDownOptionsComponent,
    selectors: [["dxo-drop-down-options"]],
    contentQueries: function DxoDropDownOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      animation: "animation",
      closeOnOutsideClick: "closeOnOutsideClick",
      container: "container",
      contentTemplate: "contentTemplate",
      deferRendering: "deferRendering",
      disabled: "disabled",
      dragAndResizeArea: "dragAndResizeArea",
      dragEnabled: "dragEnabled",
      dragOutsideBoundary: "dragOutsideBoundary",
      enableBodyScroll: "enableBodyScroll",
      focusStateEnabled: "focusStateEnabled",
      fullScreen: "fullScreen",
      height: "height",
      hideOnOutsideClick: "hideOnOutsideClick",
      hideOnParentScroll: "hideOnParentScroll",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      maxHeight: "maxHeight",
      maxWidth: "maxWidth",
      minHeight: "minHeight",
      minWidth: "minWidth",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onHidden: "onHidden",
      onHiding: "onHiding",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onResize: "onResize",
      onResizeEnd: "onResizeEnd",
      onResizeStart: "onResizeStart",
      onShowing: "onShowing",
      onShown: "onShown",
      onTitleRendered: "onTitleRendered",
      position: "position",
      resizeEnabled: "resizeEnabled",
      restorePosition: "restorePosition",
      rtlEnabled: "rtlEnabled",
      shading: "shading",
      shadingColor: "shadingColor",
      showCloseButton: "showCloseButton",
      showTitle: "showTitle",
      tabIndex: "tabIndex",
      title: "title",
      titleTemplate: "titleTemplate",
      toolbarItems: "toolbarItems",
      visible: "visible",
      width: "width",
      wrapperAttr: "wrapperAttr",
      hideEvent: "hideEvent",
      showEvent: "showEvent",
      target: "target"
    },
    outputs: {
      heightChange: "heightChange",
      positionChange: "positionChange",
      visibleChange: "visibleChange",
      widthChange: "widthChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDropDownOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDropDownOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-drop-down-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "enableBodyScroll", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr", "hideEvent", "showEvent", "target"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    heightChange: [{
      type: Output
    }],
    positionChange: [{
      type: Output
    }],
    visibleChange: [{
      type: Output
    }],
    widthChange: [{
      type: Output
    }],
    toolbarItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiToolbarItemComponent)]
    }]
  });
})();
var DxoDropDownOptionsModule = class _DxoDropDownOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoDropDownOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoDropDownOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoDropDownOptionsModule,
    declarations: [DxoDropDownOptionsComponent],
    exports: [DxoDropDownOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDropDownOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoDropDownOptionsComponent],
      exports: [DxoDropDownOptionsComponent]
    }]
  }], null, null);
})();
var DxoEdgesComponent = class _DxoEdgesComponent extends NestedOption {
  get customDataExpr() {
    return this._getOption("customDataExpr");
  }
  set customDataExpr(value) {
    this._setOption("customDataExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get fromExpr() {
    return this._getOption("fromExpr");
  }
  set fromExpr(value) {
    this._setOption("fromExpr", value);
  }
  get fromLineEndExpr() {
    return this._getOption("fromLineEndExpr");
  }
  set fromLineEndExpr(value) {
    this._setOption("fromLineEndExpr", value);
  }
  get fromPointIndexExpr() {
    return this._getOption("fromPointIndexExpr");
  }
  set fromPointIndexExpr(value) {
    this._setOption("fromPointIndexExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get lineTypeExpr() {
    return this._getOption("lineTypeExpr");
  }
  set lineTypeExpr(value) {
    this._setOption("lineTypeExpr", value);
  }
  get lockedExpr() {
    return this._getOption("lockedExpr");
  }
  set lockedExpr(value) {
    this._setOption("lockedExpr", value);
  }
  get pointsExpr() {
    return this._getOption("pointsExpr");
  }
  set pointsExpr(value) {
    this._setOption("pointsExpr", value);
  }
  get styleExpr() {
    return this._getOption("styleExpr");
  }
  set styleExpr(value) {
    this._setOption("styleExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get textStyleExpr() {
    return this._getOption("textStyleExpr");
  }
  set textStyleExpr(value) {
    this._setOption("textStyleExpr", value);
  }
  get toExpr() {
    return this._getOption("toExpr");
  }
  set toExpr(value) {
    this._setOption("toExpr", value);
  }
  get toLineEndExpr() {
    return this._getOption("toLineEndExpr");
  }
  set toLineEndExpr(value) {
    this._setOption("toLineEndExpr", value);
  }
  get toPointIndexExpr() {
    return this._getOption("toPointIndexExpr");
  }
  set toPointIndexExpr(value) {
    this._setOption("toPointIndexExpr", value);
  }
  get zIndexExpr() {
    return this._getOption("zIndexExpr");
  }
  set zIndexExpr(value) {
    this._setOption("zIndexExpr", value);
  }
  get _optionPath() {
    return "edges";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoEdgesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoEdgesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoEdgesComponent,
    selectors: [["dxo-edges"]],
    inputs: {
      customDataExpr: "customDataExpr",
      dataSource: "dataSource",
      fromExpr: "fromExpr",
      fromLineEndExpr: "fromLineEndExpr",
      fromPointIndexExpr: "fromPointIndexExpr",
      keyExpr: "keyExpr",
      lineTypeExpr: "lineTypeExpr",
      lockedExpr: "lockedExpr",
      pointsExpr: "pointsExpr",
      styleExpr: "styleExpr",
      textExpr: "textExpr",
      textStyleExpr: "textStyleExpr",
      toExpr: "toExpr",
      toLineEndExpr: "toLineEndExpr",
      toPointIndexExpr: "toPointIndexExpr",
      zIndexExpr: "zIndexExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoEdgesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEdgesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-edges",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    customDataExpr: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    fromExpr: [{
      type: Input
    }],
    fromLineEndExpr: [{
      type: Input
    }],
    fromPointIndexExpr: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    lineTypeExpr: [{
      type: Input
    }],
    lockedExpr: [{
      type: Input
    }],
    pointsExpr: [{
      type: Input
    }],
    styleExpr: [{
      type: Input
    }],
    textExpr: [{
      type: Input
    }],
    textStyleExpr: [{
      type: Input
    }],
    toExpr: [{
      type: Input
    }],
    toLineEndExpr: [{
      type: Input
    }],
    toPointIndexExpr: [{
      type: Input
    }],
    zIndexExpr: [{
      type: Input
    }]
  });
})();
var DxoEdgesModule = class _DxoEdgesModule {
  /** @nocollapse */
  static ɵfac = function DxoEdgesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoEdgesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoEdgesModule,
    declarations: [DxoEdgesComponent],
    exports: [DxoEdgesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEdgesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoEdgesComponent],
      exports: [DxoEdgesComponent]
    }]
  }], null, null);
})();
var DxoEditingComponent = class _DxoEditingComponent extends NestedOption {
  get allowAdding() {
    return this._getOption("allowAdding");
  }
  set allowAdding(value) {
    this._setOption("allowAdding", value);
  }
  get allowDeleting() {
    return this._getOption("allowDeleting");
  }
  set allowDeleting(value) {
    this._setOption("allowDeleting", value);
  }
  get allowUpdating() {
    return this._getOption("allowUpdating");
  }
  set allowUpdating(value) {
    this._setOption("allowUpdating", value);
  }
  get changes() {
    return this._getOption("changes");
  }
  set changes(value) {
    this._setOption("changes", value);
  }
  get confirmDelete() {
    return this._getOption("confirmDelete");
  }
  set confirmDelete(value) {
    this._setOption("confirmDelete", value);
  }
  get editColumnName() {
    return this._getOption("editColumnName");
  }
  set editColumnName(value) {
    this._setOption("editColumnName", value);
  }
  get editRowKey() {
    return this._getOption("editRowKey");
  }
  set editRowKey(value) {
    this._setOption("editRowKey", value);
  }
  get form() {
    return this._getOption("form");
  }
  set form(value) {
    this._setOption("form", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get newRowPosition() {
    return this._getOption("newRowPosition");
  }
  set newRowPosition(value) {
    this._setOption("newRowPosition", value);
  }
  get popup() {
    return this._getOption("popup");
  }
  set popup(value) {
    this._setOption("popup", value);
  }
  get refreshMode() {
    return this._getOption("refreshMode");
  }
  set refreshMode(value) {
    this._setOption("refreshMode", value);
  }
  get selectTextOnEditStart() {
    return this._getOption("selectTextOnEditStart");
  }
  set selectTextOnEditStart(value) {
    this._setOption("selectTextOnEditStart", value);
  }
  get startEditAction() {
    return this._getOption("startEditAction");
  }
  set startEditAction(value) {
    this._setOption("startEditAction", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get useIcons() {
    return this._getOption("useIcons");
  }
  set useIcons(value) {
    this._setOption("useIcons", value);
  }
  get allowAddShape() {
    return this._getOption("allowAddShape");
  }
  set allowAddShape(value) {
    this._setOption("allowAddShape", value);
  }
  get allowChangeConnection() {
    return this._getOption("allowChangeConnection");
  }
  set allowChangeConnection(value) {
    this._setOption("allowChangeConnection", value);
  }
  get allowChangeConnectorPoints() {
    return this._getOption("allowChangeConnectorPoints");
  }
  set allowChangeConnectorPoints(value) {
    this._setOption("allowChangeConnectorPoints", value);
  }
  get allowChangeConnectorText() {
    return this._getOption("allowChangeConnectorText");
  }
  set allowChangeConnectorText(value) {
    this._setOption("allowChangeConnectorText", value);
  }
  get allowChangeShapeText() {
    return this._getOption("allowChangeShapeText");
  }
  set allowChangeShapeText(value) {
    this._setOption("allowChangeShapeText", value);
  }
  get allowDeleteConnector() {
    return this._getOption("allowDeleteConnector");
  }
  set allowDeleteConnector(value) {
    this._setOption("allowDeleteConnector", value);
  }
  get allowDeleteShape() {
    return this._getOption("allowDeleteShape");
  }
  set allowDeleteShape(value) {
    this._setOption("allowDeleteShape", value);
  }
  get allowMoveShape() {
    return this._getOption("allowMoveShape");
  }
  set allowMoveShape(value) {
    this._setOption("allowMoveShape", value);
  }
  get allowResizeShape() {
    return this._getOption("allowResizeShape");
  }
  set allowResizeShape(value) {
    this._setOption("allowResizeShape", value);
  }
  get allowDependencyAdding() {
    return this._getOption("allowDependencyAdding");
  }
  set allowDependencyAdding(value) {
    this._setOption("allowDependencyAdding", value);
  }
  get allowDependencyDeleting() {
    return this._getOption("allowDependencyDeleting");
  }
  set allowDependencyDeleting(value) {
    this._setOption("allowDependencyDeleting", value);
  }
  get allowResourceAdding() {
    return this._getOption("allowResourceAdding");
  }
  set allowResourceAdding(value) {
    this._setOption("allowResourceAdding", value);
  }
  get allowResourceDeleting() {
    return this._getOption("allowResourceDeleting");
  }
  set allowResourceDeleting(value) {
    this._setOption("allowResourceDeleting", value);
  }
  get allowResourceUpdating() {
    return this._getOption("allowResourceUpdating");
  }
  set allowResourceUpdating(value) {
    this._setOption("allowResourceUpdating", value);
  }
  get allowTaskAdding() {
    return this._getOption("allowTaskAdding");
  }
  set allowTaskAdding(value) {
    this._setOption("allowTaskAdding", value);
  }
  get allowTaskDeleting() {
    return this._getOption("allowTaskDeleting");
  }
  set allowTaskDeleting(value) {
    this._setOption("allowTaskDeleting", value);
  }
  get allowTaskResourceUpdating() {
    return this._getOption("allowTaskResourceUpdating");
  }
  set allowTaskResourceUpdating(value) {
    this._setOption("allowTaskResourceUpdating", value);
  }
  get allowTaskUpdating() {
    return this._getOption("allowTaskUpdating");
  }
  set allowTaskUpdating(value) {
    this._setOption("allowTaskUpdating", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get allowResizing() {
    return this._getOption("allowResizing");
  }
  set allowResizing(value) {
    this._setOption("allowResizing", value);
  }
  get allowTimeZoneEditing() {
    return this._getOption("allowTimeZoneEditing");
  }
  set allowTimeZoneEditing(value) {
    this._setOption("allowTimeZoneEditing", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  changesChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  editColumnNameChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  editRowKeyChange;
  get _optionPath() {
    return "editing";
  }
  get changesChildren() {
    return this._getOption("changes");
  }
  set changesChildren(value) {
    this.setChildren("changes", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "changesChange"
    }, {
      emit: "editColumnNameChange"
    }, {
      emit: "editRowKeyChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoEditingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoEditingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoEditingComponent,
    selectors: [["dxo-editing"]],
    contentQueries: function DxoEditingComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiChangeComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.changesChildren = _t);
      }
    },
    inputs: {
      allowAdding: "allowAdding",
      allowDeleting: "allowDeleting",
      allowUpdating: "allowUpdating",
      changes: "changes",
      confirmDelete: "confirmDelete",
      editColumnName: "editColumnName",
      editRowKey: "editRowKey",
      form: "form",
      mode: "mode",
      newRowPosition: "newRowPosition",
      popup: "popup",
      refreshMode: "refreshMode",
      selectTextOnEditStart: "selectTextOnEditStart",
      startEditAction: "startEditAction",
      texts: "texts",
      useIcons: "useIcons",
      allowAddShape: "allowAddShape",
      allowChangeConnection: "allowChangeConnection",
      allowChangeConnectorPoints: "allowChangeConnectorPoints",
      allowChangeConnectorText: "allowChangeConnectorText",
      allowChangeShapeText: "allowChangeShapeText",
      allowDeleteConnector: "allowDeleteConnector",
      allowDeleteShape: "allowDeleteShape",
      allowMoveShape: "allowMoveShape",
      allowResizeShape: "allowResizeShape",
      allowDependencyAdding: "allowDependencyAdding",
      allowDependencyDeleting: "allowDependencyDeleting",
      allowResourceAdding: "allowResourceAdding",
      allowResourceDeleting: "allowResourceDeleting",
      allowResourceUpdating: "allowResourceUpdating",
      allowTaskAdding: "allowTaskAdding",
      allowTaskDeleting: "allowTaskDeleting",
      allowTaskResourceUpdating: "allowTaskResourceUpdating",
      allowTaskUpdating: "allowTaskUpdating",
      enabled: "enabled",
      allowDragging: "allowDragging",
      allowResizing: "allowResizing",
      allowTimeZoneEditing: "allowTimeZoneEditing"
    },
    outputs: {
      changesChange: "changesChange",
      editColumnNameChange: "editColumnNameChange",
      editRowKeyChange: "editRowKeyChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoEditingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEditingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-editing",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowAdding: [{
      type: Input
    }],
    allowDeleting: [{
      type: Input
    }],
    allowUpdating: [{
      type: Input
    }],
    changes: [{
      type: Input
    }],
    confirmDelete: [{
      type: Input
    }],
    editColumnName: [{
      type: Input
    }],
    editRowKey: [{
      type: Input
    }],
    form: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    newRowPosition: [{
      type: Input
    }],
    popup: [{
      type: Input
    }],
    refreshMode: [{
      type: Input
    }],
    selectTextOnEditStart: [{
      type: Input
    }],
    startEditAction: [{
      type: Input
    }],
    texts: [{
      type: Input
    }],
    useIcons: [{
      type: Input
    }],
    allowAddShape: [{
      type: Input
    }],
    allowChangeConnection: [{
      type: Input
    }],
    allowChangeConnectorPoints: [{
      type: Input
    }],
    allowChangeConnectorText: [{
      type: Input
    }],
    allowChangeShapeText: [{
      type: Input
    }],
    allowDeleteConnector: [{
      type: Input
    }],
    allowDeleteShape: [{
      type: Input
    }],
    allowMoveShape: [{
      type: Input
    }],
    allowResizeShape: [{
      type: Input
    }],
    allowDependencyAdding: [{
      type: Input
    }],
    allowDependencyDeleting: [{
      type: Input
    }],
    allowResourceAdding: [{
      type: Input
    }],
    allowResourceDeleting: [{
      type: Input
    }],
    allowResourceUpdating: [{
      type: Input
    }],
    allowTaskAdding: [{
      type: Input
    }],
    allowTaskDeleting: [{
      type: Input
    }],
    allowTaskResourceUpdating: [{
      type: Input
    }],
    allowTaskUpdating: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    allowDragging: [{
      type: Input
    }],
    allowResizing: [{
      type: Input
    }],
    allowTimeZoneEditing: [{
      type: Input
    }],
    changesChange: [{
      type: Output
    }],
    editColumnNameChange: [{
      type: Output
    }],
    editRowKeyChange: [{
      type: Output
    }],
    changesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiChangeComponent)]
    }]
  });
})();
var DxoEditingModule = class _DxoEditingModule {
  /** @nocollapse */
  static ɵfac = function DxoEditingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoEditingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoEditingModule,
    declarations: [DxoEditingComponent],
    exports: [DxoEditingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEditingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoEditingComponent],
      exports: [DxoEditingComponent]
    }]
  }], null, null);
})();
var DxoExportComponent = class _DxoExportComponent extends NestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get fileName() {
    return this._getOption("fileName");
  }
  set fileName(value) {
    this._setOption("fileName", value);
  }
  get formats() {
    return this._getOption("formats");
  }
  set formats(value) {
    this._setOption("formats", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get printingEnabled() {
    return this._getOption("printingEnabled");
  }
  set printingEnabled(value) {
    this._setOption("printingEnabled", value);
  }
  get svgToCanvas() {
    return this._getOption("svgToCanvas");
  }
  set svgToCanvas(value) {
    this._setOption("svgToCanvas", value);
  }
  get allowExportSelectedData() {
    return this._getOption("allowExportSelectedData");
  }
  set allowExportSelectedData(value) {
    this._setOption("allowExportSelectedData", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "export";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoExportComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoExportComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoExportComponent,
    selectors: [["dxo-export"]],
    inputs: {
      backgroundColor: "backgroundColor",
      enabled: "enabled",
      fileName: "fileName",
      formats: "formats",
      margin: "margin",
      printingEnabled: "printingEnabled",
      svgToCanvas: "svgToCanvas",
      allowExportSelectedData: "allowExportSelectedData",
      texts: "texts"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoExportComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoExportComponent, [{
    type: Component,
    args: [{
      selector: "dxo-export",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    fileName: [{
      type: Input
    }],
    formats: [{
      type: Input
    }],
    margin: [{
      type: Input
    }],
    printingEnabled: [{
      type: Input
    }],
    svgToCanvas: [{
      type: Input
    }],
    allowExportSelectedData: [{
      type: Input
    }],
    texts: [{
      type: Input
    }]
  });
})();
var DxoExportModule = class _DxoExportModule {
  /** @nocollapse */
  static ɵfac = function DxoExportModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoExportModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoExportModule,
    declarations: [DxoExportComponent],
    exports: [DxoExportComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoExportModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoExportComponent],
      exports: [DxoExportComponent]
    }]
  }], null, null);
})();
var DxoFieldChooserComponent = class _DxoFieldChooserComponent extends NestedOption {
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get applyChangesMode() {
    return this._getOption("applyChangesMode");
  }
  set applyChangesMode(value) {
    this._setOption("applyChangesMode", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get layout() {
    return this._getOption("layout");
  }
  set layout(value) {
    this._setOption("layout", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "fieldChooser";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFieldChooserComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFieldChooserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFieldChooserComponent,
    selectors: [["dxo-field-chooser"]],
    inputs: {
      allowSearch: "allowSearch",
      applyChangesMode: "applyChangesMode",
      enabled: "enabled",
      height: "height",
      layout: "layout",
      searchTimeout: "searchTimeout",
      texts: "texts",
      title: "title",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFieldChooserComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldChooserComponent, [{
    type: Component,
    args: [{
      selector: "dxo-field-chooser",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowSearch: [{
      type: Input
    }],
    applyChangesMode: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    height: [{
      type: Input
    }],
    layout: [{
      type: Input
    }],
    searchTimeout: [{
      type: Input
    }],
    texts: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoFieldChooserModule = class _DxoFieldChooserModule {
  /** @nocollapse */
  static ɵfac = function DxoFieldChooserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFieldChooserModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFieldChooserModule,
    declarations: [DxoFieldChooserComponent],
    exports: [DxoFieldChooserComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldChooserModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFieldChooserComponent],
      exports: [DxoFieldChooserComponent]
    }]
  }], null, null);
})();
var DxiFilterBuilderField = class _DxiFilterBuilderField extends CollectionNestedOption {
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataType() {
    return this._getOption("dataType");
  }
  set dataType(value) {
    this._setOption("dataType", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorTemplate() {
    return this._getOption("editorTemplate");
  }
  set editorTemplate(value) {
    this._setOption("editorTemplate", value);
  }
  get falseText() {
    return this._getOption("falseText");
  }
  set falseText(value) {
    this._setOption("falseText", value);
  }
  get filterOperations() {
    return this._getOption("filterOperations");
  }
  set filterOperations(value) {
    this._setOption("filterOperations", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get lookup() {
    return this._getOption("lookup");
  }
  set lookup(value) {
    this._setOption("lookup", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get trueText() {
    return this._getOption("trueText");
  }
  set trueText(value) {
    this._setOption("trueText", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiFilterBuilderField_BaseFactory;
    return function DxiFilterBuilderField_Factory(__ngFactoryType__) {
      return (ɵDxiFilterBuilderField_BaseFactory || (ɵDxiFilterBuilderField_BaseFactory = ɵɵgetInheritedFactory(_DxiFilterBuilderField)))(__ngFactoryType__ || _DxiFilterBuilderField);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiFilterBuilderField,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiFilterBuilderField_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFilterBuilderField, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiFieldComponent = class _DxiFieldComponent extends DxiFilterBuilderField {
  get _optionPath() {
    return "fields";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiFieldComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiFieldComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiFieldComponent,
    selectors: [["dxi-field"]],
    inputs: {
      calculateFilterExpression: "calculateFilterExpression",
      caption: "caption",
      customizeText: "customizeText",
      dataField: "dataField",
      dataType: "dataType",
      editorOptions: "editorOptions",
      editorTemplate: "editorTemplate",
      falseText: "falseText",
      filterOperations: "filterOperations",
      format: "format",
      lookup: "lookup",
      name: "name",
      trueText: "trueText"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiFieldComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFieldComponent, [{
    type: Component,
    args: [{
      selector: "dxi-field",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["calculateFilterExpression", "caption", "customizeText", "dataField", "dataType", "editorOptions", "editorTemplate", "falseText", "filterOperations", "format", "lookup", "name", "trueText"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiFieldModule = class _DxiFieldModule {
  /** @nocollapse */
  static ɵfac = function DxiFieldModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiFieldModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiFieldModule,
    declarations: [DxiFieldComponent],
    exports: [DxiFieldComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFieldModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiFieldComponent],
      exports: [DxiFieldComponent]
    }]
  }], null, null);
})();
var DxoFieldPanelComponent = class _DxoFieldPanelComponent extends NestedOption {
  get allowFieldDragging() {
    return this._getOption("allowFieldDragging");
  }
  set allowFieldDragging(value) {
    this._setOption("allowFieldDragging", value);
  }
  get showColumnFields() {
    return this._getOption("showColumnFields");
  }
  set showColumnFields(value) {
    this._setOption("showColumnFields", value);
  }
  get showDataFields() {
    return this._getOption("showDataFields");
  }
  set showDataFields(value) {
    this._setOption("showDataFields", value);
  }
  get showFilterFields() {
    return this._getOption("showFilterFields");
  }
  set showFilterFields(value) {
    this._setOption("showFilterFields", value);
  }
  get showRowFields() {
    return this._getOption("showRowFields");
  }
  set showRowFields(value) {
    this._setOption("showRowFields", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "fieldPanel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFieldPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFieldPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFieldPanelComponent,
    selectors: [["dxo-field-panel"]],
    inputs: {
      allowFieldDragging: "allowFieldDragging",
      showColumnFields: "showColumnFields",
      showDataFields: "showDataFields",
      showFilterFields: "showFilterFields",
      showRowFields: "showRowFields",
      texts: "texts",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFieldPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-field-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowFieldDragging: [{
      type: Input
    }],
    showColumnFields: [{
      type: Input
    }],
    showDataFields: [{
      type: Input
    }],
    showFilterFields: [{
      type: Input
    }],
    showRowFields: [{
      type: Input
    }],
    texts: [{
      type: Input
    }],
    visible: [{
      type: Input
    }]
  });
})();
var DxoFieldPanelModule = class _DxoFieldPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoFieldPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFieldPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFieldPanelModule,
    declarations: [DxoFieldPanelComponent],
    exports: [DxoFieldPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFieldPanelComponent],
      exports: [DxoFieldPanelComponent]
    }]
  }], null, null);
})();
var DxiFileManagerToolbarItem = class _DxiFileManagerToolbarItem extends CollectionNestedOption {
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiFileManagerToolbarItem_BaseFactory;
    return function DxiFileManagerToolbarItem_Factory(__ngFactoryType__) {
      return (ɵDxiFileManagerToolbarItem_BaseFactory || (ɵDxiFileManagerToolbarItem_BaseFactory = ɵɵgetInheritedFactory(_DxiFileManagerToolbarItem)))(__ngFactoryType__ || _DxiFileManagerToolbarItem);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiFileManagerToolbarItem,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiFileManagerToolbarItem_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileManagerToolbarItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiFileSelectionItemComponent = class _DxiFileSelectionItemComponent extends DxiFileManagerToolbarItem {
  get _optionPath() {
    return "fileSelectionItems";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiFileSelectionItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiFileSelectionItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiFileSelectionItemComponent,
    selectors: [["dxi-file-selection-item"]],
    inputs: {
      cssClass: "cssClass",
      disabled: "disabled",
      icon: "icon",
      locateInMenu: "locateInMenu",
      location: "location",
      name: "name",
      options: "options",
      showText: "showText",
      text: "text",
      visible: "visible",
      widget: "widget"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiFileSelectionItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileSelectionItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-file-selection-item",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["cssClass", "disabled", "icon", "locateInMenu", "location", "name", "options", "showText", "text", "visible", "widget"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiFileSelectionItemModule = class _DxiFileSelectionItemModule {
  /** @nocollapse */
  static ɵfac = function DxiFileSelectionItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiFileSelectionItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiFileSelectionItemModule,
    declarations: [DxiFileSelectionItemComponent],
    exports: [DxiFileSelectionItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileSelectionItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiFileSelectionItemComponent],
      exports: [DxiFileSelectionItemComponent]
    }]
  }], null, null);
})();
var DxoFileUploaderOptions = class _DxoFileUploaderOptions extends NestedOption {
  get abortUpload() {
    return this._getOption("abortUpload");
  }
  set abortUpload(value) {
    this._setOption("abortUpload", value);
  }
  get accept() {
    return this._getOption("accept");
  }
  set accept(value) {
    this._setOption("accept", value);
  }
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get allowCanceling() {
    return this._getOption("allowCanceling");
  }
  set allowCanceling(value) {
    this._setOption("allowCanceling", value);
  }
  get allowedFileExtensions() {
    return this._getOption("allowedFileExtensions");
  }
  set allowedFileExtensions(value) {
    this._setOption("allowedFileExtensions", value);
  }
  get chunkSize() {
    return this._getOption("chunkSize");
  }
  set chunkSize(value) {
    this._setOption("chunkSize", value);
  }
  get dialogTrigger() {
    return this._getOption("dialogTrigger");
  }
  set dialogTrigger(value) {
    this._setOption("dialogTrigger", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get dropZone() {
    return this._getOption("dropZone");
  }
  set dropZone(value) {
    this._setOption("dropZone", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get inputAttr() {
    return this._getOption("inputAttr");
  }
  set inputAttr(value) {
    this._setOption("inputAttr", value);
  }
  get invalidFileExtensionMessage() {
    return this._getOption("invalidFileExtensionMessage");
  }
  set invalidFileExtensionMessage(value) {
    this._setOption("invalidFileExtensionMessage", value);
  }
  get invalidMaxFileSizeMessage() {
    return this._getOption("invalidMaxFileSizeMessage");
  }
  set invalidMaxFileSizeMessage(value) {
    this._setOption("invalidMaxFileSizeMessage", value);
  }
  get invalidMinFileSizeMessage() {
    return this._getOption("invalidMinFileSizeMessage");
  }
  set invalidMinFileSizeMessage(value) {
    this._setOption("invalidMinFileSizeMessage", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get labelText() {
    return this._getOption("labelText");
  }
  set labelText(value) {
    this._setOption("labelText", value);
  }
  get maxFileSize() {
    return this._getOption("maxFileSize");
  }
  set maxFileSize(value) {
    this._setOption("maxFileSize", value);
  }
  get minFileSize() {
    return this._getOption("minFileSize");
  }
  set minFileSize(value) {
    this._setOption("minFileSize", value);
  }
  get multiple() {
    return this._getOption("multiple");
  }
  set multiple(value) {
    this._setOption("multiple", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onBeforeSend() {
    return this._getOption("onBeforeSend");
  }
  set onBeforeSend(value) {
    this._setOption("onBeforeSend", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onDropZoneEnter() {
    return this._getOption("onDropZoneEnter");
  }
  set onDropZoneEnter(value) {
    this._setOption("onDropZoneEnter", value);
  }
  get onDropZoneLeave() {
    return this._getOption("onDropZoneLeave");
  }
  set onDropZoneLeave(value) {
    this._setOption("onDropZoneLeave", value);
  }
  get onFilesUploaded() {
    return this._getOption("onFilesUploaded");
  }
  set onFilesUploaded(value) {
    this._setOption("onFilesUploaded", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onProgress() {
    return this._getOption("onProgress");
  }
  set onProgress(value) {
    this._setOption("onProgress", value);
  }
  get onUploadAborted() {
    return this._getOption("onUploadAborted");
  }
  set onUploadAborted(value) {
    this._setOption("onUploadAborted", value);
  }
  get onUploaded() {
    return this._getOption("onUploaded");
  }
  set onUploaded(value) {
    this._setOption("onUploaded", value);
  }
  get onUploadError() {
    return this._getOption("onUploadError");
  }
  set onUploadError(value) {
    this._setOption("onUploadError", value);
  }
  get onUploadStarted() {
    return this._getOption("onUploadStarted");
  }
  set onUploadStarted(value) {
    this._setOption("onUploadStarted", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get progress() {
    return this._getOption("progress");
  }
  set progress(value) {
    this._setOption("progress", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get readyToUploadMessage() {
    return this._getOption("readyToUploadMessage");
  }
  set readyToUploadMessage(value) {
    this._setOption("readyToUploadMessage", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get selectButtonText() {
    return this._getOption("selectButtonText");
  }
  set selectButtonText(value) {
    this._setOption("selectButtonText", value);
  }
  get showFileList() {
    return this._getOption("showFileList");
  }
  set showFileList(value) {
    this._setOption("showFileList", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get uploadAbortedMessage() {
    return this._getOption("uploadAbortedMessage");
  }
  set uploadAbortedMessage(value) {
    this._setOption("uploadAbortedMessage", value);
  }
  get uploadButtonText() {
    return this._getOption("uploadButtonText");
  }
  set uploadButtonText(value) {
    this._setOption("uploadButtonText", value);
  }
  get uploadChunk() {
    return this._getOption("uploadChunk");
  }
  set uploadChunk(value) {
    this._setOption("uploadChunk", value);
  }
  get uploadCustomData() {
    return this._getOption("uploadCustomData");
  }
  set uploadCustomData(value) {
    this._setOption("uploadCustomData", value);
  }
  get uploadedMessage() {
    return this._getOption("uploadedMessage");
  }
  set uploadedMessage(value) {
    this._setOption("uploadedMessage", value);
  }
  get uploadFailedMessage() {
    return this._getOption("uploadFailedMessage");
  }
  set uploadFailedMessage(value) {
    this._setOption("uploadFailedMessage", value);
  }
  get uploadFile() {
    return this._getOption("uploadFile");
  }
  set uploadFile(value) {
    this._setOption("uploadFile", value);
  }
  get uploadHeaders() {
    return this._getOption("uploadHeaders");
  }
  set uploadHeaders(value) {
    this._setOption("uploadHeaders", value);
  }
  get uploadMethod() {
    return this._getOption("uploadMethod");
  }
  set uploadMethod(value) {
    this._setOption("uploadMethod", value);
  }
  get uploadMode() {
    return this._getOption("uploadMode");
  }
  set uploadMode(value) {
    this._setOption("uploadMode", value);
  }
  get uploadUrl() {
    return this._getOption("uploadUrl");
  }
  set uploadUrl(value) {
    this._setOption("uploadUrl", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFileUploaderOptions_BaseFactory;
    return function DxoFileUploaderOptions_Factory(__ngFactoryType__) {
      return (ɵDxoFileUploaderOptions_BaseFactory || (ɵDxoFileUploaderOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoFileUploaderOptions)))(__ngFactoryType__ || _DxoFileUploaderOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFileUploaderOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFileUploaderOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFileUploaderOptionsComponent = class _DxoFileUploaderOptionsComponent extends DxoFileUploaderOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  get _optionPath() {
    return "fileUploaderOptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "valueChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFileUploaderOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFileUploaderOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFileUploaderOptionsComponent,
    selectors: [["dxo-file-uploader-options"]],
    inputs: {
      abortUpload: "abortUpload",
      accept: "accept",
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      allowCanceling: "allowCanceling",
      allowedFileExtensions: "allowedFileExtensions",
      chunkSize: "chunkSize",
      dialogTrigger: "dialogTrigger",
      disabled: "disabled",
      dropZone: "dropZone",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      inputAttr: "inputAttr",
      invalidFileExtensionMessage: "invalidFileExtensionMessage",
      invalidMaxFileSizeMessage: "invalidMaxFileSizeMessage",
      invalidMinFileSizeMessage: "invalidMinFileSizeMessage",
      isDirty: "isDirty",
      isValid: "isValid",
      labelText: "labelText",
      maxFileSize: "maxFileSize",
      minFileSize: "minFileSize",
      multiple: "multiple",
      name: "name",
      onBeforeSend: "onBeforeSend",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onDropZoneEnter: "onDropZoneEnter",
      onDropZoneLeave: "onDropZoneLeave",
      onFilesUploaded: "onFilesUploaded",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onProgress: "onProgress",
      onUploadAborted: "onUploadAborted",
      onUploaded: "onUploaded",
      onUploadError: "onUploadError",
      onUploadStarted: "onUploadStarted",
      onValueChanged: "onValueChanged",
      progress: "progress",
      readOnly: "readOnly",
      readyToUploadMessage: "readyToUploadMessage",
      rtlEnabled: "rtlEnabled",
      selectButtonText: "selectButtonText",
      showFileList: "showFileList",
      tabIndex: "tabIndex",
      uploadAbortedMessage: "uploadAbortedMessage",
      uploadButtonText: "uploadButtonText",
      uploadChunk: "uploadChunk",
      uploadCustomData: "uploadCustomData",
      uploadedMessage: "uploadedMessage",
      uploadFailedMessage: "uploadFailedMessage",
      uploadFile: "uploadFile",
      uploadHeaders: "uploadHeaders",
      uploadMethod: "uploadMethod",
      uploadMode: "uploadMode",
      uploadUrl: "uploadUrl",
      validationError: "validationError",
      validationErrors: "validationErrors",
      validationStatus: "validationStatus",
      value: "value",
      visible: "visible",
      width: "width"
    },
    outputs: {
      valueChange: "valueChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFileUploaderOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-file-uploader-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["abortUpload", "accept", "accessKey", "activeStateEnabled", "allowCanceling", "allowedFileExtensions", "chunkSize", "dialogTrigger", "disabled", "dropZone", "elementAttr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "inputAttr", "invalidFileExtensionMessage", "invalidMaxFileSizeMessage", "invalidMinFileSizeMessage", "isDirty", "isValid", "labelText", "maxFileSize", "minFileSize", "multiple", "name", "onBeforeSend", "onContentReady", "onDisposing", "onDropZoneEnter", "onDropZoneLeave", "onFilesUploaded", "onInitialized", "onOptionChanged", "onProgress", "onUploadAborted", "onUploaded", "onUploadError", "onUploadStarted", "onValueChanged", "progress", "readOnly", "readyToUploadMessage", "rtlEnabled", "selectButtonText", "showFileList", "tabIndex", "uploadAbortedMessage", "uploadButtonText", "uploadChunk", "uploadCustomData", "uploadedMessage", "uploadFailedMessage", "uploadFile", "uploadHeaders", "uploadMethod", "uploadMode", "uploadUrl", "validationError", "validationErrors", "validationStatus", "value", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    valueChange: [{
      type: Output
    }]
  });
})();
var DxoFileUploaderOptionsModule = class _DxoFileUploaderOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoFileUploaderOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFileUploaderOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFileUploaderOptionsModule,
    declarations: [DxoFileUploaderOptionsComponent],
    exports: [DxoFileUploaderOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFileUploaderOptionsComponent],
      exports: [DxoFileUploaderOptionsComponent]
    }]
  }], null, null);
})();
var DxoFilterBuilderPopupComponent = class _DxoFilterBuilderPopupComponent extends DxoPopupOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  heightChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  positionChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  widthChange;
  get _optionPath() {
    return "filterBuilderPopup";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "heightChange"
    }, {
      emit: "positionChange"
    }, {
      emit: "visibleChange"
    }, {
      emit: "widthChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFilterBuilderPopupComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterBuilderPopupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterBuilderPopupComponent,
    selectors: [["dxo-filter-builder-popup"]],
    contentQueries: function DxoFilterBuilderPopupComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      animation: "animation",
      closeOnOutsideClick: "closeOnOutsideClick",
      container: "container",
      contentTemplate: "contentTemplate",
      deferRendering: "deferRendering",
      disabled: "disabled",
      dragAndResizeArea: "dragAndResizeArea",
      dragEnabled: "dragEnabled",
      dragOutsideBoundary: "dragOutsideBoundary",
      enableBodyScroll: "enableBodyScroll",
      focusStateEnabled: "focusStateEnabled",
      fullScreen: "fullScreen",
      height: "height",
      hideOnOutsideClick: "hideOnOutsideClick",
      hideOnParentScroll: "hideOnParentScroll",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      maxHeight: "maxHeight",
      maxWidth: "maxWidth",
      minHeight: "minHeight",
      minWidth: "minWidth",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onHidden: "onHidden",
      onHiding: "onHiding",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onResize: "onResize",
      onResizeEnd: "onResizeEnd",
      onResizeStart: "onResizeStart",
      onShowing: "onShowing",
      onShown: "onShown",
      onTitleRendered: "onTitleRendered",
      position: "position",
      resizeEnabled: "resizeEnabled",
      restorePosition: "restorePosition",
      rtlEnabled: "rtlEnabled",
      shading: "shading",
      shadingColor: "shadingColor",
      showCloseButton: "showCloseButton",
      showTitle: "showTitle",
      tabIndex: "tabIndex",
      title: "title",
      titleTemplate: "titleTemplate",
      toolbarItems: "toolbarItems",
      visible: "visible",
      width: "width",
      wrapperAttr: "wrapperAttr"
    },
    outputs: {
      heightChange: "heightChange",
      positionChange: "positionChange",
      visibleChange: "visibleChange",
      widthChange: "widthChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterBuilderPopupComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderPopupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-builder-popup",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "enableBodyScroll", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    heightChange: [{
      type: Output
    }],
    positionChange: [{
      type: Output
    }],
    visibleChange: [{
      type: Output
    }],
    widthChange: [{
      type: Output
    }],
    toolbarItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiToolbarItemComponent)]
    }]
  });
})();
var DxoFilterBuilderPopupModule = class _DxoFilterBuilderPopupModule {
  /** @nocollapse */
  static ɵfac = function DxoFilterBuilderPopupModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterBuilderPopupModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFilterBuilderPopupModule,
    declarations: [DxoFilterBuilderPopupComponent],
    exports: [DxoFilterBuilderPopupComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderPopupModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFilterBuilderPopupComponent],
      exports: [DxoFilterBuilderPopupComponent]
    }]
  }], null, null);
})();
var DxoFilterBuilderOptions = class _DxoFilterBuilderOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get allowHierarchicalFields() {
    return this._getOption("allowHierarchicalFields");
  }
  set allowHierarchicalFields(value) {
    this._setOption("allowHierarchicalFields", value);
  }
  get customOperations() {
    return this._getOption("customOperations");
  }
  set customOperations(value) {
    this._setOption("customOperations", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get fields() {
    return this._getOption("fields");
  }
  set fields(value) {
    this._setOption("fields", value);
  }
  get filterOperationDescriptions() {
    return this._getOption("filterOperationDescriptions");
  }
  set filterOperationDescriptions(value) {
    this._setOption("filterOperationDescriptions", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get groupOperationDescriptions() {
    return this._getOption("groupOperationDescriptions");
  }
  set groupOperationDescriptions(value) {
    this._setOption("groupOperationDescriptions", value);
  }
  get groupOperations() {
    return this._getOption("groupOperations");
  }
  set groupOperations(value) {
    this._setOption("groupOperations", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get maxGroupLevel() {
    return this._getOption("maxGroupLevel");
  }
  set maxGroupLevel(value) {
    this._setOption("maxGroupLevel", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEditorPrepared() {
    return this._getOption("onEditorPrepared");
  }
  set onEditorPrepared(value) {
    this._setOption("onEditorPrepared", value);
  }
  get onEditorPreparing() {
    return this._getOption("onEditorPreparing");
  }
  set onEditorPreparing(value) {
    this._setOption("onEditorPreparing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFilterBuilderOptions_BaseFactory;
    return function DxoFilterBuilderOptions_Factory(__ngFactoryType__) {
      return (ɵDxoFilterBuilderOptions_BaseFactory || (ɵDxoFilterBuilderOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoFilterBuilderOptions)))(__ngFactoryType__ || _DxoFilterBuilderOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterBuilderOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterBuilderOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFilterBuilderComponent = class _DxoFilterBuilderComponent extends DxoFilterBuilderOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  get _optionPath() {
    return "filterBuilder";
  }
  get customOperationsChildren() {
    return this._getOption("customOperations");
  }
  set customOperationsChildren(value) {
    this.setChildren("customOperations", value);
  }
  get fieldsChildren() {
    return this._getOption("fields");
  }
  set fieldsChildren(value) {
    this.setChildren("fields", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "valueChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFilterBuilderComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterBuilderComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterBuilderComponent,
    selectors: [["dxo-filter-builder"]],
    contentQueries: function DxoFilterBuilderComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCustomOperationComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiFieldComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customOperationsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fieldsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      allowHierarchicalFields: "allowHierarchicalFields",
      customOperations: "customOperations",
      disabled: "disabled",
      elementAttr: "elementAttr",
      fields: "fields",
      filterOperationDescriptions: "filterOperationDescriptions",
      focusStateEnabled: "focusStateEnabled",
      groupOperationDescriptions: "groupOperationDescriptions",
      groupOperations: "groupOperations",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      maxGroupLevel: "maxGroupLevel",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onEditorPrepared: "onEditorPrepared",
      onEditorPreparing: "onEditorPreparing",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onValueChanged: "onValueChanged",
      rtlEnabled: "rtlEnabled",
      tabIndex: "tabIndex",
      value: "value",
      visible: "visible",
      width: "width"
    },
    outputs: {
      valueChange: "valueChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterBuilderComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-builder",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "allowHierarchicalFields", "customOperations", "disabled", "elementAttr", "fields", "filterOperationDescriptions", "focusStateEnabled", "groupOperationDescriptions", "groupOperations", "height", "hint", "hoverStateEnabled", "maxGroupLevel", "onContentReady", "onDisposing", "onEditorPrepared", "onEditorPreparing", "onInitialized", "onOptionChanged", "onValueChanged", "rtlEnabled", "tabIndex", "value", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    valueChange: [{
      type: Output
    }],
    customOperationsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCustomOperationComponent)]
    }],
    fieldsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiFieldComponent)]
    }]
  });
})();
var DxoFilterBuilderModule = class _DxoFilterBuilderModule {
  /** @nocollapse */
  static ɵfac = function DxoFilterBuilderModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterBuilderModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFilterBuilderModule,
    declarations: [DxoFilterBuilderComponent],
    exports: [DxoFilterBuilderComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFilterBuilderComponent],
      exports: [DxoFilterBuilderComponent]
    }]
  }], null, null);
})();
var DxoFilterOperationDescriptionsComponent = class _DxoFilterOperationDescriptionsComponent extends NestedOption {
  get between() {
    return this._getOption("between");
  }
  set between(value) {
    this._setOption("between", value);
  }
  get contains() {
    return this._getOption("contains");
  }
  set contains(value) {
    this._setOption("contains", value);
  }
  get endsWith() {
    return this._getOption("endsWith");
  }
  set endsWith(value) {
    this._setOption("endsWith", value);
  }
  get equal() {
    return this._getOption("equal");
  }
  set equal(value) {
    this._setOption("equal", value);
  }
  get greaterThan() {
    return this._getOption("greaterThan");
  }
  set greaterThan(value) {
    this._setOption("greaterThan", value);
  }
  get greaterThanOrEqual() {
    return this._getOption("greaterThanOrEqual");
  }
  set greaterThanOrEqual(value) {
    this._setOption("greaterThanOrEqual", value);
  }
  get isBlank() {
    return this._getOption("isBlank");
  }
  set isBlank(value) {
    this._setOption("isBlank", value);
  }
  get isNotBlank() {
    return this._getOption("isNotBlank");
  }
  set isNotBlank(value) {
    this._setOption("isNotBlank", value);
  }
  get lessThan() {
    return this._getOption("lessThan");
  }
  set lessThan(value) {
    this._setOption("lessThan", value);
  }
  get lessThanOrEqual() {
    return this._getOption("lessThanOrEqual");
  }
  set lessThanOrEqual(value) {
    this._setOption("lessThanOrEqual", value);
  }
  get notContains() {
    return this._getOption("notContains");
  }
  set notContains(value) {
    this._setOption("notContains", value);
  }
  get notEqual() {
    return this._getOption("notEqual");
  }
  set notEqual(value) {
    this._setOption("notEqual", value);
  }
  get startsWith() {
    return this._getOption("startsWith");
  }
  set startsWith(value) {
    this._setOption("startsWith", value);
  }
  get _optionPath() {
    return "filterOperationDescriptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFilterOperationDescriptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterOperationDescriptionsComponent,
    selectors: [["dxo-filter-operation-descriptions"]],
    inputs: {
      between: "between",
      contains: "contains",
      endsWith: "endsWith",
      equal: "equal",
      greaterThan: "greaterThan",
      greaterThanOrEqual: "greaterThanOrEqual",
      isBlank: "isBlank",
      isNotBlank: "isNotBlank",
      lessThan: "lessThan",
      lessThanOrEqual: "lessThanOrEqual",
      notContains: "notContains",
      notEqual: "notEqual",
      startsWith: "startsWith"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterOperationDescriptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-operation-descriptions",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    between: [{
      type: Input
    }],
    contains: [{
      type: Input
    }],
    endsWith: [{
      type: Input
    }],
    equal: [{
      type: Input
    }],
    greaterThan: [{
      type: Input
    }],
    greaterThanOrEqual: [{
      type: Input
    }],
    isBlank: [{
      type: Input
    }],
    isNotBlank: [{
      type: Input
    }],
    lessThan: [{
      type: Input
    }],
    lessThanOrEqual: [{
      type: Input
    }],
    notContains: [{
      type: Input
    }],
    notEqual: [{
      type: Input
    }],
    startsWith: [{
      type: Input
    }]
  });
})();
var DxoFilterOperationDescriptionsModule = class _DxoFilterOperationDescriptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoFilterOperationDescriptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterOperationDescriptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFilterOperationDescriptionsModule,
    declarations: [DxoFilterOperationDescriptionsComponent],
    exports: [DxoFilterOperationDescriptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFilterOperationDescriptionsComponent],
      exports: [DxoFilterOperationDescriptionsComponent]
    }]
  }], null, null);
})();
var DxoFilterPanelComponent = class _DxoFilterPanelComponent extends NestedOption {
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get filterEnabled() {
    return this._getOption("filterEnabled");
  }
  set filterEnabled(value) {
    this._setOption("filterEnabled", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  filterEnabledChange;
  get _optionPath() {
    return "filterPanel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "filterEnabledChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFilterPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterPanelComponent,
    selectors: [["dxo-filter-panel"]],
    inputs: {
      customizeText: "customizeText",
      filterEnabled: "filterEnabled",
      texts: "texts",
      visible: "visible"
    },
    outputs: {
      filterEnabledChange: "filterEnabledChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    customizeText: [{
      type: Input
    }],
    filterEnabled: [{
      type: Input
    }],
    texts: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    filterEnabledChange: [{
      type: Output
    }]
  });
})();
var DxoFilterPanelModule = class _DxoFilterPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoFilterPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFilterPanelModule,
    declarations: [DxoFilterPanelComponent],
    exports: [DxoFilterPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFilterPanelComponent],
      exports: [DxoFilterPanelComponent]
    }]
  }], null, null);
})();
var DxoGanttFilterRow = class _DxoGanttFilterRow extends NestedOption {
  get applyFilter() {
    return this._getOption("applyFilter");
  }
  set applyFilter(value) {
    this._setOption("applyFilter", value);
  }
  get applyFilterText() {
    return this._getOption("applyFilterText");
  }
  set applyFilterText(value) {
    this._setOption("applyFilterText", value);
  }
  get betweenEndText() {
    return this._getOption("betweenEndText");
  }
  set betweenEndText(value) {
    this._setOption("betweenEndText", value);
  }
  get betweenStartText() {
    return this._getOption("betweenStartText");
  }
  set betweenStartText(value) {
    this._setOption("betweenStartText", value);
  }
  get operationDescriptions() {
    return this._getOption("operationDescriptions");
  }
  set operationDescriptions(value) {
    this._setOption("operationDescriptions", value);
  }
  get resetOperationText() {
    return this._getOption("resetOperationText");
  }
  set resetOperationText(value) {
    this._setOption("resetOperationText", value);
  }
  get showAllText() {
    return this._getOption("showAllText");
  }
  set showAllText(value) {
    this._setOption("showAllText", value);
  }
  get showOperationChooser() {
    return this._getOption("showOperationChooser");
  }
  set showOperationChooser(value) {
    this._setOption("showOperationChooser", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGanttFilterRow_BaseFactory;
    return function DxoGanttFilterRow_Factory(__ngFactoryType__) {
      return (ɵDxoGanttFilterRow_BaseFactory || (ɵDxoGanttFilterRow_BaseFactory = ɵɵgetInheritedFactory(_DxoGanttFilterRow)))(__ngFactoryType__ || _DxoGanttFilterRow);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGanttFilterRow,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGanttFilterRow_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttFilterRow, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFilterRowComponent = class _DxoFilterRowComponent extends DxoGanttFilterRow {
  get _optionPath() {
    return "filterRow";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFilterRowComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterRowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFilterRowComponent,
    selectors: [["dxo-filter-row"]],
    inputs: {
      applyFilter: "applyFilter",
      applyFilterText: "applyFilterText",
      betweenEndText: "betweenEndText",
      betweenStartText: "betweenStartText",
      operationDescriptions: "operationDescriptions",
      resetOperationText: "resetOperationText",
      showAllText: "showAllText",
      showOperationChooser: "showOperationChooser",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFilterRowComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterRowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-row",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["applyFilter", "applyFilterText", "betweenEndText", "betweenStartText", "operationDescriptions", "resetOperationText", "showAllText", "showOperationChooser", "visible"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFilterRowModule = class _DxoFilterRowModule {
  /** @nocollapse */
  static ɵfac = function DxoFilterRowModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFilterRowModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFilterRowModule,
    declarations: [DxoFilterRowComponent],
    exports: [DxoFilterRowComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterRowModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFilterRowComponent],
      exports: [DxoFilterRowComponent]
    }]
  }], null, null);
})();
var DxoVizFont = class _DxoVizFont extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get family() {
    return this._getOption("family");
  }
  set family(value) {
    this._setOption("family", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get weight() {
    return this._getOption("weight");
  }
  set weight(value) {
    this._setOption("weight", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoVizFont_BaseFactory;
    return function DxoVizFont_Factory(__ngFactoryType__) {
      return (ɵDxoVizFont_BaseFactory || (ɵDxoVizFont_BaseFactory = ɵɵgetInheritedFactory(_DxoVizFont)))(__ngFactoryType__ || _DxoVizFont);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoVizFont,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoVizFont_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVizFont, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFontComponent = class _DxoFontComponent extends DxoVizFont {
  get _optionPath() {
    return "font";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFontComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFontComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFontComponent,
    selectors: [["dxo-font"]],
    inputs: {
      color: "color",
      family: "family",
      opacity: "opacity",
      size: "size",
      weight: "weight"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFontComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFontComponent, [{
    type: Component,
    args: [{
      selector: "dxo-font",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["color", "family", "opacity", "size", "weight"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFontModule = class _DxoFontModule {
  /** @nocollapse */
  static ɵfac = function DxoFontModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFontModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFontModule,
    declarations: [DxoFontComponent],
    exports: [DxoFontComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFontModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFontComponent],
      exports: [DxoFontComponent]
    }]
  }], null, null);
})();
var DxoFormSimpleItem = class _DxoFormSimpleItem extends NestedOption {
  get colSpan() {
    return this._getOption("colSpan");
  }
  set colSpan(value) {
    this._setOption("colSpan", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorType() {
    return this._getOption("editorType");
  }
  set editorType(value) {
    this._setOption("editorType", value);
  }
  get helpText() {
    return this._getOption("helpText");
  }
  set helpText(value) {
    this._setOption("helpText", value);
  }
  get isRequired() {
    return this._getOption("isRequired");
  }
  set isRequired(value) {
    this._setOption("isRequired", value);
  }
  get itemType() {
    return this._getOption("itemType");
  }
  set itemType(value) {
    this._setOption("itemType", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFormSimpleItem_BaseFactory;
    return function DxoFormSimpleItem_Factory(__ngFactoryType__) {
      return (ɵDxoFormSimpleItem_BaseFactory || (ɵDxoFormSimpleItem_BaseFactory = ɵɵgetInheritedFactory(_DxoFormSimpleItem)))(__ngFactoryType__ || _DxoFormSimpleItem);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormSimpleItem,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormSimpleItem_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormSimpleItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFormItemComponent = class _DxoFormItemComponent extends DxoFormSimpleItem {
  get _optionPath() {
    return "formItem";
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFormItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormItemComponent,
    selectors: [["dxo-form-item"]],
    contentQueries: function DxoFormItemComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
      }
    },
    inputs: {
      colSpan: "colSpan",
      cssClass: "cssClass",
      dataField: "dataField",
      editorOptions: "editorOptions",
      editorType: "editorType",
      helpText: "helpText",
      isRequired: "isRequired",
      itemType: "itemType",
      label: "label",
      name: "name",
      template: "template",
      validationRules: "validationRules",
      visible: "visible",
      visibleIndex: "visibleIndex"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormItemComponent, [{
    type: Component,
    args: [{
      selector: "dxo-form-item",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["colSpan", "cssClass", "dataField", "editorOptions", "editorType", "helpText", "isRequired", "itemType", "label", "name", "template", "validationRules", "visible", "visibleIndex"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    validationRulesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiValidationRuleComponent)]
    }]
  });
})();
var DxoFormItemModule = class _DxoFormItemModule {
  /** @nocollapse */
  static ɵfac = function DxoFormItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFormItemModule,
    declarations: [DxoFormItemComponent],
    exports: [DxoFormItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFormItemComponent],
      exports: [DxoFormItemComponent]
    }]
  }], null, null);
})();
var DxoFormOptions = class _DxoFormOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get alignItemLabelsInAllGroups() {
    return this._getOption("alignItemLabelsInAllGroups");
  }
  set alignItemLabelsInAllGroups(value) {
    this._setOption("alignItemLabelsInAllGroups", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get customizeItem() {
    return this._getOption("customizeItem");
  }
  set customizeItem(value) {
    this._setOption("customizeItem", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get formData() {
    return this._getOption("formData");
  }
  set formData(value) {
    this._setOption("formData", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get labelLocation() {
    return this._getOption("labelLocation");
  }
  set labelLocation(value) {
    this._setOption("labelLocation", value);
  }
  get labelMode() {
    return this._getOption("labelMode");
  }
  set labelMode(value) {
    this._setOption("labelMode", value);
  }
  get minColWidth() {
    return this._getOption("minColWidth");
  }
  set minColWidth(value) {
    this._setOption("minColWidth", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEditorEnterKey() {
    return this._getOption("onEditorEnterKey");
  }
  set onEditorEnterKey(value) {
    this._setOption("onEditorEnterKey", value);
  }
  get onFieldDataChanged() {
    return this._getOption("onFieldDataChanged");
  }
  set onFieldDataChanged(value) {
    this._setOption("onFieldDataChanged", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get optionalMark() {
    return this._getOption("optionalMark");
  }
  set optionalMark(value) {
    this._setOption("optionalMark", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get requiredMark() {
    return this._getOption("requiredMark");
  }
  set requiredMark(value) {
    this._setOption("requiredMark", value);
  }
  get requiredMessage() {
    return this._getOption("requiredMessage");
  }
  set requiredMessage(value) {
    this._setOption("requiredMessage", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get screenByWidth() {
    return this._getOption("screenByWidth");
  }
  set screenByWidth(value) {
    this._setOption("screenByWidth", value);
  }
  get scrollingEnabled() {
    return this._getOption("scrollingEnabled");
  }
  set scrollingEnabled(value) {
    this._setOption("scrollingEnabled", value);
  }
  get showColonAfterLabel() {
    return this._getOption("showColonAfterLabel");
  }
  set showColonAfterLabel(value) {
    this._setOption("showColonAfterLabel", value);
  }
  get showOptionalMark() {
    return this._getOption("showOptionalMark");
  }
  set showOptionalMark(value) {
    this._setOption("showOptionalMark", value);
  }
  get showRequiredMark() {
    return this._getOption("showRequiredMark");
  }
  set showRequiredMark(value) {
    this._setOption("showRequiredMark", value);
  }
  get showValidationSummary() {
    return this._getOption("showValidationSummary");
  }
  set showValidationSummary(value) {
    this._setOption("showValidationSummary", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get validationGroup() {
    return this._getOption("validationGroup");
  }
  set validationGroup(value) {
    this._setOption("validationGroup", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoFormOptions_BaseFactory;
    return function DxoFormOptions_Factory(__ngFactoryType__) {
      return (ɵDxoFormOptions_BaseFactory || (ɵDxoFormOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoFormOptions)))(__ngFactoryType__ || _DxoFormOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFormComponent = class _DxoFormComponent extends DxoFormOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  formDataChange;
  get _optionPath() {
    return "form";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "formDataChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFormComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormComponent,
    selectors: [["dxo-form"]],
    contentQueries: function DxoFormComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      alignItemLabels: "alignItemLabels",
      alignItemLabelsInAllGroups: "alignItemLabelsInAllGroups",
      colCount: "colCount",
      colCountByScreen: "colCountByScreen",
      customizeItem: "customizeItem",
      disabled: "disabled",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      formData: "formData",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      isDirty: "isDirty",
      items: "items",
      labelLocation: "labelLocation",
      labelMode: "labelMode",
      minColWidth: "minColWidth",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onEditorEnterKey: "onEditorEnterKey",
      onFieldDataChanged: "onFieldDataChanged",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      optionalMark: "optionalMark",
      readOnly: "readOnly",
      requiredMark: "requiredMark",
      requiredMessage: "requiredMessage",
      rtlEnabled: "rtlEnabled",
      screenByWidth: "screenByWidth",
      scrollingEnabled: "scrollingEnabled",
      showColonAfterLabel: "showColonAfterLabel",
      showOptionalMark: "showOptionalMark",
      showRequiredMark: "showRequiredMark",
      showValidationSummary: "showValidationSummary",
      tabIndex: "tabIndex",
      validationGroup: "validationGroup",
      visible: "visible",
      width: "width"
    },
    outputs: {
      formDataChange: "formDataChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormComponent, [{
    type: Component,
    args: [{
      selector: "dxo-form",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "alignItemLabels", "alignItemLabelsInAllGroups", "colCount", "colCountByScreen", "customizeItem", "disabled", "elementAttr", "focusStateEnabled", "formData", "height", "hint", "hoverStateEnabled", "isDirty", "items", "labelLocation", "labelMode", "minColWidth", "onContentReady", "onDisposing", "onEditorEnterKey", "onFieldDataChanged", "onInitialized", "onOptionChanged", "optionalMark", "readOnly", "requiredMark", "requiredMessage", "rtlEnabled", "screenByWidth", "scrollingEnabled", "showColonAfterLabel", "showOptionalMark", "showRequiredMark", "showValidationSummary", "tabIndex", "validationGroup", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    formDataChange: [{
      type: Output
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoFormModule = class _DxoFormModule {
  /** @nocollapse */
  static ɵfac = function DxoFormModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFormModule,
    declarations: [DxoFormComponent],
    exports: [DxoFormComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFormComponent],
      exports: [DxoFormComponent]
    }]
  }], null, null);
})();
var DxoFormatComponent = class _DxoFormatComponent extends DxoFormat {
  get _optionPath() {
    return "format";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFormatComponent,
    selectors: [["dxo-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFormatModule = class _DxoFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFormatModule,
    declarations: [DxoFormatComponent],
    exports: [DxoFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFormatComponent],
      exports: [DxoFormatComponent]
    }]
  }], null, null);
})();
var DxoAnimationState = class _DxoAnimationState extends NestedOption {
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get scale() {
    return this._getOption("scale");
  }
  set scale(value) {
    this._setOption("scale", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoAnimationState_BaseFactory;
    return function DxoAnimationState_Factory(__ngFactoryType__) {
      return (ɵDxoAnimationState_BaseFactory || (ɵDxoAnimationState_BaseFactory = ɵɵgetInheritedFactory(_DxoAnimationState)))(__ngFactoryType__ || _DxoAnimationState);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoAnimationState,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoAnimationState_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationState, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFromComponent = class _DxoFromComponent extends DxoAnimationState {
  get _optionPath() {
    return "from";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFromComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFromComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFromComponent,
    selectors: [["dxo-from"]],
    inputs: {
      left: "left",
      opacity: "opacity",
      position: "position",
      scale: "scale",
      top: "top"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFromComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFromComponent, [{
    type: Component,
    args: [{
      selector: "dxo-from",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["left", "opacity", "position", "scale", "top"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFromModule = class _DxoFromModule {
  /** @nocollapse */
  static ɵfac = function DxoFromModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFromModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFromModule,
    declarations: [DxoFromComponent],
    exports: [DxoFromComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFromModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFromComponent],
      exports: [DxoFromComponent]
    }]
  }], null, null);
})();
var DxoFullstackedareaComponent = class _DxoFullstackedareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "fullstackedarea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFullstackedareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFullstackedareaComponent,
    selectors: [["dxo-fullstackedarea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFullstackedareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedarea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFullstackedareaModule = class _DxoFullstackedareaModule {
  /** @nocollapse */
  static ɵfac = function DxoFullstackedareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFullstackedareaModule,
    declarations: [DxoFullstackedareaComponent],
    exports: [DxoFullstackedareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFullstackedareaComponent],
      exports: [DxoFullstackedareaComponent]
    }]
  }], null, null);
})();
var DxoFullstackedbarComponent = class _DxoFullstackedbarComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "fullstackedbar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFullstackedbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFullstackedbarComponent,
    selectors: [["dxo-fullstackedbar"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFullstackedbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedbar",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFullstackedbarModule = class _DxoFullstackedbarModule {
  /** @nocollapse */
  static ɵfac = function DxoFullstackedbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFullstackedbarModule,
    declarations: [DxoFullstackedbarComponent],
    exports: [DxoFullstackedbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFullstackedbarComponent],
      exports: [DxoFullstackedbarComponent]
    }]
  }], null, null);
})();
var DxoFullstackedlineComponent = class _DxoFullstackedlineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "fullstackedline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFullstackedlineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedlineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFullstackedlineComponent,
    selectors: [["dxo-fullstackedline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFullstackedlineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedlineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFullstackedlineModule = class _DxoFullstackedlineModule {
  /** @nocollapse */
  static ɵfac = function DxoFullstackedlineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedlineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFullstackedlineModule,
    declarations: [DxoFullstackedlineComponent],
    exports: [DxoFullstackedlineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedlineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFullstackedlineComponent],
      exports: [DxoFullstackedlineComponent]
    }]
  }], null, null);
})();
var DxoFullstackedsplineComponent = class _DxoFullstackedsplineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "fullstackedspline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFullstackedsplineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedsplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFullstackedsplineComponent,
    selectors: [["dxo-fullstackedspline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFullstackedsplineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedspline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFullstackedsplineModule = class _DxoFullstackedsplineModule {
  /** @nocollapse */
  static ɵfac = function DxoFullstackedsplineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedsplineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFullstackedsplineModule,
    declarations: [DxoFullstackedsplineComponent],
    exports: [DxoFullstackedsplineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFullstackedsplineComponent],
      exports: [DxoFullstackedsplineComponent]
    }]
  }], null, null);
})();
var DxoFullstackedsplineareaComponent = class _DxoFullstackedsplineareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "fullstackedsplinearea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoFullstackedsplineareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedsplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoFullstackedsplineareaComponent,
    selectors: [["dxo-fullstackedsplinearea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoFullstackedsplineareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedsplinearea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoFullstackedsplineareaModule = class _DxoFullstackedsplineareaModule {
  /** @nocollapse */
  static ɵfac = function DxoFullstackedsplineareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoFullstackedsplineareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoFullstackedsplineareaModule,
    declarations: [DxoFullstackedsplineareaComponent],
    exports: [DxoFullstackedsplineareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoFullstackedsplineareaComponent],
      exports: [DxoFullstackedsplineareaComponent]
    }]
  }], null, null);
})();
var DxoGeometryComponent = class _DxoGeometryComponent extends NestedOption {
  get endAngle() {
    return this._getOption("endAngle");
  }
  set endAngle(value) {
    this._setOption("endAngle", value);
  }
  get startAngle() {
    return this._getOption("startAngle");
  }
  set startAngle(value) {
    this._setOption("startAngle", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get _optionPath() {
    return "geometry";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGeometryComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGeometryComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGeometryComponent,
    selectors: [["dxo-geometry"]],
    inputs: {
      endAngle: "endAngle",
      startAngle: "startAngle",
      orientation: "orientation"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGeometryComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGeometryComponent, [{
    type: Component,
    args: [{
      selector: "dxo-geometry",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    endAngle: [{
      type: Input
    }],
    startAngle: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }]
  });
})();
var DxoGeometryModule = class _DxoGeometryModule {
  /** @nocollapse */
  static ɵfac = function DxoGeometryModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGeometryModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGeometryModule,
    declarations: [DxoGeometryComponent],
    exports: [DxoGeometryComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGeometryModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGeometryComponent],
      exports: [DxoGeometryComponent]
    }]
  }], null, null);
})();
var DxoGridSizeComponent = class _DxoGridSizeComponent extends NestedOption {
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  get _optionPath() {
    return "gridSize";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "valueChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGridSizeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGridSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGridSizeComponent,
    selectors: [["dxo-grid-size"]],
    inputs: {
      items: "items",
      value: "value"
    },
    outputs: {
      valueChange: "valueChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGridSizeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grid-size",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    items: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }]
  });
})();
var DxoGridSizeModule = class _DxoGridSizeModule {
  /** @nocollapse */
  static ɵfac = function DxoGridSizeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGridSizeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGridSizeModule,
    declarations: [DxoGridSizeComponent],
    exports: [DxoGridSizeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGridSizeComponent],
      exports: [DxoGridSizeComponent]
    }]
  }], null, null);
})();
var DxoGridComponent = class _DxoGridComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "grid";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGridComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGridComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGridComponent,
    selectors: [["dxo-grid"]],
    inputs: {
      color: "color",
      opacity: "opacity",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGridComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grid",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoGridModule = class _DxoGridModule {
  /** @nocollapse */
  static ɵfac = function DxoGridModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGridModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGridModule,
    declarations: [DxoGridComponent],
    exports: [DxoGridComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGridComponent],
      exports: [DxoGridComponent]
    }]
  }], null, null);
})();
var DxiGroupItemComponent = class _DxiGroupItemComponent extends CollectionNestedOption {
  get alignByColumn() {
    return this._getOption("alignByColumn");
  }
  set alignByColumn(value) {
    this._setOption("alignByColumn", value);
  }
  get column() {
    return this._getOption("column");
  }
  set column(value) {
    this._setOption("column", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get showInColumn() {
    return this._getOption("showInColumn");
  }
  set showInColumn(value) {
    this._setOption("showInColumn", value);
  }
  get showInGroupFooter() {
    return this._getOption("showInGroupFooter");
  }
  set showInGroupFooter(value) {
    this._setOption("showInGroupFooter", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get summaryType() {
    return this._getOption("summaryType");
  }
  set summaryType(value) {
    this._setOption("summaryType", value);
  }
  get valueFormat() {
    return this._getOption("valueFormat");
  }
  set valueFormat(value) {
    this._setOption("valueFormat", value);
  }
  get _optionPath() {
    return "groupItems";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiGroupItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiGroupItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiGroupItemComponent,
    selectors: [["dxi-group-item"]],
    inputs: {
      alignByColumn: "alignByColumn",
      column: "column",
      customizeText: "customizeText",
      displayFormat: "displayFormat",
      name: "name",
      showInColumn: "showInColumn",
      showInGroupFooter: "showInGroupFooter",
      skipEmptyValues: "skipEmptyValues",
      summaryType: "summaryType",
      valueFormat: "valueFormat"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiGroupItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-group-item",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    alignByColumn: [{
      type: Input
    }],
    column: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    displayFormat: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    showInColumn: [{
      type: Input
    }],
    showInGroupFooter: [{
      type: Input
    }],
    skipEmptyValues: [{
      type: Input
    }],
    summaryType: [{
      type: Input
    }],
    valueFormat: [{
      type: Input
    }]
  });
})();
var DxiGroupItemModule = class _DxiGroupItemModule {
  /** @nocollapse */
  static ɵfac = function DxiGroupItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiGroupItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiGroupItemModule,
    declarations: [DxiGroupItemComponent],
    exports: [DxiGroupItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiGroupItemComponent],
      exports: [DxiGroupItemComponent]
    }]
  }], null, null);
})();
var DxoGroupOperationDescriptionsComponent = class _DxoGroupOperationDescriptionsComponent extends NestedOption {
  get and() {
    return this._getOption("and");
  }
  set and(value) {
    this._setOption("and", value);
  }
  get notAnd() {
    return this._getOption("notAnd");
  }
  set notAnd(value) {
    this._setOption("notAnd", value);
  }
  get notOr() {
    return this._getOption("notOr");
  }
  set notOr(value) {
    this._setOption("notOr", value);
  }
  get or() {
    return this._getOption("or");
  }
  set or(value) {
    this._setOption("or", value);
  }
  get _optionPath() {
    return "groupOperationDescriptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGroupOperationDescriptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGroupOperationDescriptionsComponent,
    selectors: [["dxo-group-operation-descriptions"]],
    inputs: {
      and: "and",
      notAnd: "notAnd",
      notOr: "notOr",
      or: "or"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGroupOperationDescriptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group-operation-descriptions",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    and: [{
      type: Input
    }],
    notAnd: [{
      type: Input
    }],
    notOr: [{
      type: Input
    }],
    or: [{
      type: Input
    }]
  });
})();
var DxoGroupOperationDescriptionsModule = class _DxoGroupOperationDescriptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoGroupOperationDescriptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupOperationDescriptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGroupOperationDescriptionsModule,
    declarations: [DxoGroupOperationDescriptionsComponent],
    exports: [DxoGroupOperationDescriptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGroupOperationDescriptionsComponent],
      exports: [DxoGroupOperationDescriptionsComponent]
    }]
  }], null, null);
})();
var DxoGroupPanelComponent = class _DxoGroupPanelComponent extends NestedOption {
  get allowColumnDragging() {
    return this._getOption("allowColumnDragging");
  }
  set allowColumnDragging(value) {
    this._setOption("allowColumnDragging", value);
  }
  get emptyPanelText() {
    return this._getOption("emptyPanelText");
  }
  set emptyPanelText(value) {
    this._setOption("emptyPanelText", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleChange;
  get _optionPath() {
    return "groupPanel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "visibleChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGroupPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGroupPanelComponent,
    selectors: [["dxo-group-panel"]],
    inputs: {
      allowColumnDragging: "allowColumnDragging",
      emptyPanelText: "emptyPanelText",
      visible: "visible"
    },
    outputs: {
      visibleChange: "visibleChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGroupPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowColumnDragging: [{
      type: Input
    }],
    emptyPanelText: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    visibleChange: [{
      type: Output
    }]
  });
})();
var DxoGroupPanelModule = class _DxoGroupPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoGroupPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGroupPanelModule,
    declarations: [DxoGroupPanelComponent],
    exports: [DxoGroupPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGroupPanelComponent],
      exports: [DxoGroupPanelComponent]
    }]
  }], null, null);
})();
var DxoGroupComponent = class _DxoGroupComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get headerHeight() {
    return this._getOption("headerHeight");
  }
  set headerHeight(value) {
    this._setOption("headerHeight", value);
  }
  get hoverEnabled() {
    return this._getOption("hoverEnabled");
  }
  set hoverEnabled(value) {
    this._setOption("hoverEnabled", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get padding() {
    return this._getOption("padding");
  }
  set padding(value) {
    this._setOption("padding", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "group";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGroupComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGroupComponent,
    selectors: [["dxo-group"]],
    inputs: {
      border: "border",
      color: "color",
      headerHeight: "headerHeight",
      hoverEnabled: "hoverEnabled",
      hoverStyle: "hoverStyle",
      label: "label",
      padding: "padding",
      selectionStyle: "selectionStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGroupComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    headerHeight: [{
      type: Input
    }],
    hoverEnabled: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    padding: [{
      type: Input
    }],
    selectionStyle: [{
      type: Input
    }]
  });
})();
var DxoGroupModule = class _DxoGroupModule {
  /** @nocollapse */
  static ɵfac = function DxoGroupModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGroupModule,
    declarations: [DxoGroupComponent],
    exports: [DxoGroupComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGroupComponent],
      exports: [DxoGroupComponent]
    }]
  }], null, null);
})();
var DxoGroupingComponent = class _DxoGroupingComponent extends NestedOption {
  get allowCollapsing() {
    return this._getOption("allowCollapsing");
  }
  set allowCollapsing(value) {
    this._setOption("allowCollapsing", value);
  }
  get autoExpandAll() {
    return this._getOption("autoExpandAll");
  }
  set autoExpandAll(value) {
    this._setOption("autoExpandAll", value);
  }
  get contextMenuEnabled() {
    return this._getOption("contextMenuEnabled");
  }
  set contextMenuEnabled(value) {
    this._setOption("contextMenuEnabled", value);
  }
  get expandMode() {
    return this._getOption("expandMode");
  }
  set expandMode(value) {
    this._setOption("expandMode", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "grouping";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoGroupingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGroupingComponent,
    selectors: [["dxo-grouping"]],
    inputs: {
      allowCollapsing: "allowCollapsing",
      autoExpandAll: "autoExpandAll",
      contextMenuEnabled: "contextMenuEnabled",
      expandMode: "expandMode",
      texts: "texts"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGroupingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grouping",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowCollapsing: [{
      type: Input
    }],
    autoExpandAll: [{
      type: Input
    }],
    contextMenuEnabled: [{
      type: Input
    }],
    expandMode: [{
      type: Input
    }],
    texts: [{
      type: Input
    }]
  });
})();
var DxoGroupingModule = class _DxoGroupingModule {
  /** @nocollapse */
  static ɵfac = function DxoGroupingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoGroupingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoGroupingModule,
    declarations: [DxoGroupingComponent],
    exports: [DxoGroupingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoGroupingComponent],
      exports: [DxoGroupingComponent]
    }]
  }], null, null);
})();
var DxoHatchingComponent = class _DxoHatchingComponent extends NestedOption {
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get step() {
    return this._getOption("step");
  }
  set step(value) {
    this._setOption("step", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "hatching";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHatchingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHatchingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHatchingComponent,
    selectors: [["dxo-hatching"]],
    inputs: {
      direction: "direction",
      opacity: "opacity",
      step: "step",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHatchingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHatchingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hatching",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    direction: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    step: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoHatchingModule = class _DxoHatchingModule {
  /** @nocollapse */
  static ɵfac = function DxoHatchingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHatchingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHatchingModule,
    declarations: [DxoHatchingComponent],
    exports: [DxoHatchingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHatchingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHatchingComponent],
      exports: [DxoHatchingComponent]
    }]
  }], null, null);
})();
var DxoGanttHeaderFilter = class _DxoGanttHeaderFilter extends NestedOption {
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get allowSelectAll() {
    return this._getOption("allowSelectAll");
  }
  set allowSelectAll(value) {
    this._setOption("allowSelectAll", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get groupInterval() {
    return this._getOption("groupInterval");
  }
  set groupInterval(value) {
    this._setOption("groupInterval", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get search() {
    return this._getOption("search");
  }
  set search(value) {
    this._setOption("search", value);
  }
  get searchMode() {
    return this._getOption("searchMode");
  }
  set searchMode(value) {
    this._setOption("searchMode", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get showRelevantValues() {
    return this._getOption("showRelevantValues");
  }
  set showRelevantValues(value) {
    this._setOption("showRelevantValues", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGanttHeaderFilter_BaseFactory;
    return function DxoGanttHeaderFilter_Factory(__ngFactoryType__) {
      return (ɵDxoGanttHeaderFilter_BaseFactory || (ɵDxoGanttHeaderFilter_BaseFactory = ɵɵgetInheritedFactory(_DxoGanttHeaderFilter)))(__ngFactoryType__ || _DxoGanttHeaderFilter);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGanttHeaderFilter,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGanttHeaderFilter_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttHeaderFilter, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoHeaderFilterComponent = class _DxoHeaderFilterComponent extends DxoGanttHeaderFilter {
  get _optionPath() {
    return "headerFilter";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHeaderFilterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHeaderFilterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHeaderFilterComponent,
    selectors: [["dxo-header-filter"]],
    inputs: {
      allowSearch: "allowSearch",
      allowSelectAll: "allowSelectAll",
      dataSource: "dataSource",
      groupInterval: "groupInterval",
      height: "height",
      search: "search",
      searchMode: "searchMode",
      width: "width",
      searchTimeout: "searchTimeout",
      texts: "texts",
      visible: "visible",
      showRelevantValues: "showRelevantValues"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHeaderFilterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeaderFilterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-header-filter",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowSearch", "allowSelectAll", "dataSource", "groupInterval", "height", "search", "searchMode", "width", "searchTimeout", "texts", "visible", "showRelevantValues"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoHeaderFilterModule = class _DxoHeaderFilterModule {
  /** @nocollapse */
  static ɵfac = function DxoHeaderFilterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHeaderFilterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHeaderFilterModule,
    declarations: [DxoHeaderFilterComponent],
    exports: [DxoHeaderFilterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeaderFilterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHeaderFilterComponent],
      exports: [DxoHeaderFilterComponent]
    }]
  }], null, null);
})();
var DxoHeightComponent = class _DxoHeightComponent extends NestedOption {
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get _optionPath() {
    return "height";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHeightComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHeightComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHeightComponent,
    selectors: [["dxo-height"]],
    inputs: {
      rangeMaxPoint: "rangeMaxPoint",
      rangeMinPoint: "rangeMinPoint"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHeightComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeightComponent, [{
    type: Component,
    args: [{
      selector: "dxo-height",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    rangeMaxPoint: [{
      type: Input
    }],
    rangeMinPoint: [{
      type: Input
    }]
  });
})();
var DxoHeightModule = class _DxoHeightModule {
  /** @nocollapse */
  static ɵfac = function DxoHeightModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHeightModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHeightModule,
    declarations: [DxoHeightComponent],
    exports: [DxoHeightComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeightModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHeightComponent],
      exports: [DxoHeightComponent]
    }]
  }], null, null);
})();
var DxoHideEventComponent = class _DxoHideEventComponent extends NestedOption {
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "hideEvent";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHideEventComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHideEventComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHideEventComponent,
    selectors: [["dxo-hide-event"]],
    inputs: {
      delay: "delay",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHideEventComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideEventComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hide-event",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    delay: [{
      type: Input
    }],
    name: [{
      type: Input
    }]
  });
})();
var DxoHideEventModule = class _DxoHideEventModule {
  /** @nocollapse */
  static ɵfac = function DxoHideEventModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHideEventModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHideEventModule,
    declarations: [DxoHideEventComponent],
    exports: [DxoHideEventComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideEventModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHideEventComponent],
      exports: [DxoHideEventComponent]
    }]
  }], null, null);
})();
var DxoHideComponent = class _DxoHideComponent extends DxoAnimationConfig {
  get _optionPath() {
    return "hide";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHideComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHideComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHideComponent,
    selectors: [["dxo-hide"]],
    inputs: {
      complete: "complete",
      delay: "delay",
      direction: "direction",
      duration: "duration",
      easing: "easing",
      from: "from",
      staggerDelay: "staggerDelay",
      start: "start",
      to: "to",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHideComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hide",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["complete", "delay", "direction", "duration", "easing", "from", "staggerDelay", "start", "to", "type"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoHideModule = class _DxoHideModule {
  /** @nocollapse */
  static ɵfac = function DxoHideModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHideModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHideModule,
    declarations: [DxoHideComponent],
    exports: [DxoHideComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHideComponent],
      exports: [DxoHideComponent]
    }]
  }], null, null);
})();
var DxoHistoryToolbarComponent = class _DxoHistoryToolbarComponent extends NestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "historyToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHistoryToolbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHistoryToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHistoryToolbarComponent,
    selectors: [["dxo-history-toolbar"]],
    contentQueries: function DxoHistoryToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
      }
    },
    inputs: {
      commands: "commands",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHistoryToolbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHistoryToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-history-toolbar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    commands: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }]
  });
})();
var DxoHistoryToolbarModule = class _DxoHistoryToolbarModule {
  /** @nocollapse */
  static ɵfac = function DxoHistoryToolbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHistoryToolbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHistoryToolbarModule,
    declarations: [DxoHistoryToolbarComponent],
    exports: [DxoHistoryToolbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHistoryToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHistoryToolbarComponent],
      exports: [DxoHistoryToolbarComponent]
    }]
  }], null, null);
})();
var DxoHorizontalLineComponent = class _DxoHorizontalLineComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "horizontalLine";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHorizontalLineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHorizontalLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHorizontalLineComponent,
    selectors: [["dxo-horizontal-line"]],
    inputs: {
      color: "color",
      dashStyle: "dashStyle",
      label: "label",
      opacity: "opacity",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHorizontalLineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHorizontalLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-horizontal-line",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoHorizontalLineModule = class _DxoHorizontalLineModule {
  /** @nocollapse */
  static ɵfac = function DxoHorizontalLineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHorizontalLineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHorizontalLineModule,
    declarations: [DxoHorizontalLineComponent],
    exports: [DxoHorizontalLineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHorizontalLineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHorizontalLineComponent],
      exports: [DxoHorizontalLineComponent]
    }]
  }], null, null);
})();
var DxoHoverStyleComponent = class _DxoHoverStyleComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get hatching() {
    return this._getOption("hatching");
  }
  set hatching(value) {
    this._setOption("hatching", value);
  }
  get highlight() {
    return this._getOption("highlight");
  }
  set highlight(value) {
    this._setOption("highlight", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "hoverStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoHoverStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHoverStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHoverStyleComponent,
    selectors: [["dxo-hover-style"]],
    inputs: {
      border: "border",
      color: "color",
      dashStyle: "dashStyle",
      hatching: "hatching",
      highlight: "highlight",
      width: "width",
      size: "size",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHoverStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHoverStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hover-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    hatching: [{
      type: Input
    }],
    highlight: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoHoverStyleModule = class _DxoHoverStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoHoverStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoHoverStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoHoverStyleModule,
    declarations: [DxoHoverStyleComponent],
    exports: [DxoHoverStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHoverStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoHoverStyleComponent],
      exports: [DxoHoverStyleComponent]
    }]
  }], null, null);
})();
var DxoIconsComponent = class _DxoIconsComponent extends NestedOption {
  get fix() {
    return this._getOption("fix");
  }
  set fix(value) {
    this._setOption("fix", value);
  }
  get leftPosition() {
    return this._getOption("leftPosition");
  }
  set leftPosition(value) {
    this._setOption("leftPosition", value);
  }
  get rightPosition() {
    return this._getOption("rightPosition");
  }
  set rightPosition(value) {
    this._setOption("rightPosition", value);
  }
  get stickyPosition() {
    return this._getOption("stickyPosition");
  }
  set stickyPosition(value) {
    this._setOption("stickyPosition", value);
  }
  get unfix() {
    return this._getOption("unfix");
  }
  set unfix(value) {
    this._setOption("unfix", value);
  }
  get _optionPath() {
    return "icons";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoIconsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoIconsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoIconsComponent,
    selectors: [["dxo-icons"]],
    inputs: {
      fix: "fix",
      leftPosition: "leftPosition",
      rightPosition: "rightPosition",
      stickyPosition: "stickyPosition",
      unfix: "unfix"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoIconsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIconsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-icons",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    fix: [{
      type: Input
    }],
    leftPosition: [{
      type: Input
    }],
    rightPosition: [{
      type: Input
    }],
    stickyPosition: [{
      type: Input
    }],
    unfix: [{
      type: Input
    }]
  });
})();
var DxoIconsModule = class _DxoIconsModule {
  /** @nocollapse */
  static ɵfac = function DxoIconsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoIconsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoIconsModule,
    declarations: [DxoIconsComponent],
    exports: [DxoIconsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIconsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoIconsComponent],
      exports: [DxoIconsComponent]
    }]
  }], null, null);
})();
var DxoHtmlEditorImageUpload = class _DxoHtmlEditorImageUpload extends NestedOption {
  get fileUploaderOptions() {
    return this._getOption("fileUploaderOptions");
  }
  set fileUploaderOptions(value) {
    this._setOption("fileUploaderOptions", value);
  }
  get fileUploadMode() {
    return this._getOption("fileUploadMode");
  }
  set fileUploadMode(value) {
    this._setOption("fileUploadMode", value);
  }
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get uploadDirectory() {
    return this._getOption("uploadDirectory");
  }
  set uploadDirectory(value) {
    this._setOption("uploadDirectory", value);
  }
  get uploadUrl() {
    return this._getOption("uploadUrl");
  }
  set uploadUrl(value) {
    this._setOption("uploadUrl", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoHtmlEditorImageUpload_BaseFactory;
    return function DxoHtmlEditorImageUpload_Factory(__ngFactoryType__) {
      return (ɵDxoHtmlEditorImageUpload_BaseFactory || (ɵDxoHtmlEditorImageUpload_BaseFactory = ɵɵgetInheritedFactory(_DxoHtmlEditorImageUpload)))(__ngFactoryType__ || _DxoHtmlEditorImageUpload);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHtmlEditorImageUpload,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHtmlEditorImageUpload_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorImageUpload, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoImageUploadComponent = class _DxoImageUploadComponent extends DxoHtmlEditorImageUpload {
  get _optionPath() {
    return "imageUpload";
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoImageUploadComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoImageUploadComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoImageUploadComponent,
    selectors: [["dxo-image-upload"]],
    contentQueries: function DxoImageUploadComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
      }
    },
    inputs: {
      fileUploaderOptions: "fileUploaderOptions",
      fileUploadMode: "fileUploadMode",
      tabs: "tabs",
      uploadDirectory: "uploadDirectory",
      uploadUrl: "uploadUrl"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoImageUploadComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageUploadComponent, [{
    type: Component,
    args: [{
      selector: "dxo-image-upload",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["fileUploaderOptions", "fileUploadMode", "tabs", "uploadDirectory", "uploadUrl"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    tabsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiTabComponent)]
    }]
  });
})();
var DxoImageUploadModule = class _DxoImageUploadModule {
  /** @nocollapse */
  static ɵfac = function DxoImageUploadModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoImageUploadModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoImageUploadModule,
    declarations: [DxoImageUploadComponent],
    exports: [DxoImageUploadComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageUploadModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoImageUploadComponent],
      exports: [DxoImageUploadComponent]
    }]
  }], null, null);
})();
var DxoImageComponent = class _DxoImageComponent extends NestedOption {
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get url() {
    return this._getOption("url");
  }
  set url(value) {
    this._setOption("url", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get _optionPath() {
    return "image";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoImageComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoImageComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoImageComponent,
    selectors: [["dxo-image"]],
    inputs: {
      height: "height",
      url: "url",
      width: "width",
      location: "location"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoImageComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageComponent, [{
    type: Component,
    args: [{
      selector: "dxo-image",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    height: [{
      type: Input
    }],
    url: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    location: [{
      type: Input
    }]
  });
})();
var DxoImageModule = class _DxoImageModule {
  /** @nocollapse */
  static ɵfac = function DxoImageModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoImageModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoImageModule,
    declarations: [DxoImageComponent],
    exports: [DxoImageComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoImageComponent],
      exports: [DxoImageComponent]
    }]
  }], null, null);
})();
var DxoIndentComponent = class _DxoIndentComponent extends NestedOption {
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get _optionPath() {
    return "indent";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoIndentComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoIndentComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoIndentComponent,
    selectors: [["dxo-indent"]],
    inputs: {
      left: "left",
      right: "right"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoIndentComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIndentComponent, [{
    type: Component,
    args: [{
      selector: "dxo-indent",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    left: [{
      type: Input
    }],
    right: [{
      type: Input
    }]
  });
})();
var DxoIndentModule = class _DxoIndentModule {
  /** @nocollapse */
  static ɵfac = function DxoIndentModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoIndentModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoIndentModule,
    declarations: [DxoIndentComponent],
    exports: [DxoIndentComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIndentModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoIndentComponent],
      exports: [DxoIndentComponent]
    }]
  }], null, null);
})();
var DxoSortableOptions = class _DxoSortableOptions extends NestedOption {
  get allowDropInsideItem() {
    return this._getOption("allowDropInsideItem");
  }
  set allowDropInsideItem(value) {
    this._setOption("allowDropInsideItem", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get cursorOffset() {
    return this._getOption("cursorOffset");
  }
  set cursorOffset(value) {
    this._setOption("cursorOffset", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get dragDirection() {
    return this._getOption("dragDirection");
  }
  set dragDirection(value) {
    this._setOption("dragDirection", value);
  }
  get dragTemplate() {
    return this._getOption("dragTemplate");
  }
  set dragTemplate(value) {
    this._setOption("dragTemplate", value);
  }
  get dropFeedbackMode() {
    return this._getOption("dropFeedbackMode");
  }
  set dropFeedbackMode(value) {
    this._setOption("dropFeedbackMode", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get filter() {
    return this._getOption("filter");
  }
  set filter(value) {
    this._setOption("filter", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get handle() {
    return this._getOption("handle");
  }
  set handle(value) {
    this._setOption("handle", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get itemOrientation() {
    return this._getOption("itemOrientation");
  }
  set itemOrientation(value) {
    this._setOption("itemOrientation", value);
  }
  get moveItemOnDrop() {
    return this._getOption("moveItemOnDrop");
  }
  set moveItemOnDrop(value) {
    this._setOption("moveItemOnDrop", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onDragChange() {
    return this._getOption("onDragChange");
  }
  set onDragChange(value) {
    this._setOption("onDragChange", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get onReorder() {
    return this._getOption("onReorder");
  }
  set onReorder(value) {
    this._setOption("onReorder", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoSortableOptions_BaseFactory;
    return function DxoSortableOptions_Factory(__ngFactoryType__) {
      return (ɵDxoSortableOptions_BaseFactory || (ɵDxoSortableOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoSortableOptions)))(__ngFactoryType__ || _DxoSortableOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSortableOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSortableOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortableOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoItemDraggingComponent = class _DxoItemDraggingComponent extends DxoSortableOptions {
  get _optionPath() {
    return "itemDragging";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoItemDraggingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoItemDraggingComponent,
    selectors: [["dxo-item-dragging"]],
    inputs: {
      allowDropInsideItem: "allowDropInsideItem",
      allowReordering: "allowReordering",
      autoScroll: "autoScroll",
      boundary: "boundary",
      container: "container",
      cursorOffset: "cursorOffset",
      data: "data",
      dragDirection: "dragDirection",
      dragTemplate: "dragTemplate",
      dropFeedbackMode: "dropFeedbackMode",
      elementAttr: "elementAttr",
      filter: "filter",
      group: "group",
      handle: "handle",
      height: "height",
      itemOrientation: "itemOrientation",
      moveItemOnDrop: "moveItemOnDrop",
      onAdd: "onAdd",
      onDisposing: "onDisposing",
      onDragChange: "onDragChange",
      onDragEnd: "onDragEnd",
      onDragMove: "onDragMove",
      onDragStart: "onDragStart",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onRemove: "onRemove",
      onReorder: "onReorder",
      rtlEnabled: "rtlEnabled",
      scrollSensitivity: "scrollSensitivity",
      scrollSpeed: "scrollSpeed",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoItemDraggingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-dragging",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowDropInsideItem", "allowReordering", "autoScroll", "boundary", "container", "cursorOffset", "data", "dragDirection", "dragTemplate", "dropFeedbackMode", "elementAttr", "filter", "group", "handle", "height", "itemOrientation", "moveItemOnDrop", "onAdd", "onDisposing", "onDragChange", "onDragEnd", "onDragMove", "onDragStart", "onInitialized", "onOptionChanged", "onRemove", "onReorder", "rtlEnabled", "scrollSensitivity", "scrollSpeed", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoItemDraggingModule = class _DxoItemDraggingModule {
  /** @nocollapse */
  static ɵfac = function DxoItemDraggingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemDraggingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoItemDraggingModule,
    declarations: [DxoItemDraggingComponent],
    exports: [DxoItemDraggingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoItemDraggingComponent],
      exports: [DxoItemDraggingComponent]
    }]
  }], null, null);
})();
var DxoItemTextFormatComponent = class _DxoItemTextFormatComponent extends DxoFormat {
  get _optionPath() {
    return "itemTextFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoItemTextFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemTextFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoItemTextFormatComponent,
    selectors: [["dxo-item-text-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoItemTextFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemTextFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-text-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoItemTextFormatModule = class _DxoItemTextFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoItemTextFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemTextFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoItemTextFormatModule,
    declarations: [DxoItemTextFormatComponent],
    exports: [DxoItemTextFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemTextFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoItemTextFormatComponent],
      exports: [DxoItemTextFormatComponent]
    }]
  }], null, null);
})();
var DxoItemViewComponent = class _DxoItemViewComponent extends NestedOption {
  get details() {
    return this._getOption("details");
  }
  set details(value) {
    this._setOption("details", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get showFolders() {
    return this._getOption("showFolders");
  }
  set showFolders(value) {
    this._setOption("showFolders", value);
  }
  get showParentFolder() {
    return this._getOption("showParentFolder");
  }
  set showParentFolder(value) {
    this._setOption("showParentFolder", value);
  }
  get _optionPath() {
    return "itemView";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoItemViewComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemViewComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoItemViewComponent,
    selectors: [["dxo-item-view"]],
    inputs: {
      details: "details",
      mode: "mode",
      showFolders: "showFolders",
      showParentFolder: "showParentFolder"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoItemViewComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemViewComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-view",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    details: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    showFolders: [{
      type: Input
    }],
    showParentFolder: [{
      type: Input
    }]
  });
})();
var DxoItemViewModule = class _DxoItemViewModule {
  /** @nocollapse */
  static ɵfac = function DxoItemViewModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemViewModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoItemViewModule,
    declarations: [DxoItemViewComponent],
    exports: [DxoItemViewComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemViewModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoItemViewComponent],
      exports: [DxoItemViewComponent]
    }]
  }], null, null);
})();
var DxoItemComponent = class _DxoItemComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "item";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoItemComponent,
    selectors: [["dxo-item"]],
    inputs: {
      border: "border",
      hoverStyle: "hoverStyle",
      selectionStyle: "selectionStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    selectionStyle: [{
      type: Input
    }]
  });
})();
var DxoItemModule = class _DxoItemModule {
  /** @nocollapse */
  static ɵfac = function DxoItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoItemModule,
    declarations: [DxoItemComponent],
    exports: [DxoItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoItemComponent],
      exports: [DxoItemComponent]
    }]
  }], null, null);
})();
var DxoKeyboardNavigationComponent = class _DxoKeyboardNavigationComponent extends NestedOption {
  get editOnKeyPress() {
    return this._getOption("editOnKeyPress");
  }
  set editOnKeyPress(value) {
    this._setOption("editOnKeyPress", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get enterKeyAction() {
    return this._getOption("enterKeyAction");
  }
  set enterKeyAction(value) {
    this._setOption("enterKeyAction", value);
  }
  get enterKeyDirection() {
    return this._getOption("enterKeyDirection");
  }
  set enterKeyDirection(value) {
    this._setOption("enterKeyDirection", value);
  }
  get _optionPath() {
    return "keyboardNavigation";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoKeyboardNavigationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoKeyboardNavigationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoKeyboardNavigationComponent,
    selectors: [["dxo-keyboard-navigation"]],
    inputs: {
      editOnKeyPress: "editOnKeyPress",
      enabled: "enabled",
      enterKeyAction: "enterKeyAction",
      enterKeyDirection: "enterKeyDirection"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoKeyboardNavigationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoKeyboardNavigationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-keyboard-navigation",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    editOnKeyPress: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    enterKeyAction: [{
      type: Input
    }],
    enterKeyDirection: [{
      type: Input
    }]
  });
})();
var DxoKeyboardNavigationModule = class _DxoKeyboardNavigationModule {
  /** @nocollapse */
  static ɵfac = function DxoKeyboardNavigationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoKeyboardNavigationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoKeyboardNavigationModule,
    declarations: [DxoKeyboardNavigationComponent],
    exports: [DxoKeyboardNavigationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoKeyboardNavigationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoKeyboardNavigationComponent],
      exports: [DxoKeyboardNavigationComponent]
    }]
  }], null, null);
})();
var DxoLabelComponent = class _DxoLabelComponent extends NestedOption {
  renderer;
  document;
  element;
  get connectorColor() {
    return this._getOption("connectorColor");
  }
  set connectorColor(value) {
    this._setOption("connectorColor", value);
  }
  get connectorWidth() {
    return this._getOption("connectorWidth");
  }
  set connectorWidth(value) {
    this._setOption("connectorWidth", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get indent() {
    return this._getOption("indent");
  }
  set indent(value) {
    this._setOption("indent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get indentFromAxis() {
    return this._getOption("indentFromAxis");
  }
  set indentFromAxis(value) {
    this._setOption("indentFromAxis", value);
  }
  get overlappingBehavior() {
    return this._getOption("overlappingBehavior");
  }
  set overlappingBehavior(value) {
    this._setOption("overlappingBehavior", value);
  }
  get rotationAngle() {
    return this._getOption("rotationAngle");
  }
  set rotationAngle(value) {
    this._setOption("rotationAngle", value);
  }
  get staggeringSpacing() {
    return this._getOption("staggeringSpacing");
  }
  set staggeringSpacing(value) {
    this._setOption("staggeringSpacing", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get argumentFormat() {
    return this._getOption("argumentFormat");
  }
  set argumentFormat(value) {
    this._setOption("argumentFormat", value);
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get connector() {
    return this._getOption("connector");
  }
  set connector(value) {
    this._setOption("connector", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get horizontalOffset() {
    return this._getOption("horizontalOffset");
  }
  set horizontalOffset(value) {
    this._setOption("horizontalOffset", value);
  }
  get showForZeroValues() {
    return this._getOption("showForZeroValues");
  }
  set showForZeroValues(value) {
    this._setOption("showForZeroValues", value);
  }
  get verticalOffset() {
    return this._getOption("verticalOffset");
  }
  set verticalOffset(value) {
    this._setOption("verticalOffset", value);
  }
  get hideFirstOrLast() {
    return this._getOption("hideFirstOrLast");
  }
  set hideFirstOrLast(value) {
    this._setOption("hideFirstOrLast", value);
  }
  get indentFromTick() {
    return this._getOption("indentFromTick");
  }
  set indentFromTick(value) {
    this._setOption("indentFromTick", value);
  }
  get useRangeColors() {
    return this._getOption("useRangeColors");
  }
  set useRangeColors(value) {
    this._setOption("useRangeColors", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get showColon() {
    return this._getOption("showColon");
  }
  set showColon(value) {
    this._setOption("showColon", value);
  }
  get radialOffset() {
    return this._getOption("radialOffset");
  }
  set radialOffset(value) {
    this._setOption("radialOffset", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get useNodeColors() {
    return this._getOption("useNodeColors");
  }
  set useNodeColors(value) {
    this._setOption("useNodeColors", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get _optionPath() {
    return "label";
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLabelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLabelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLabelComponent,
    selectors: [["dxo-label"]],
    inputs: {
      connectorColor: "connectorColor",
      connectorWidth: "connectorWidth",
      customizeText: "customizeText",
      font: "font",
      format: "format",
      indent: "indent",
      visible: "visible",
      horizontalAlignment: "horizontalAlignment",
      position: "position",
      text: "text",
      verticalAlignment: "verticalAlignment",
      alignment: "alignment",
      customizeHint: "customizeHint",
      displayMode: "displayMode",
      indentFromAxis: "indentFromAxis",
      overlappingBehavior: "overlappingBehavior",
      rotationAngle: "rotationAngle",
      staggeringSpacing: "staggeringSpacing",
      template: "template",
      textOverflow: "textOverflow",
      wordWrap: "wordWrap",
      argumentFormat: "argumentFormat",
      backgroundColor: "backgroundColor",
      border: "border",
      connector: "connector",
      displayFormat: "displayFormat",
      horizontalOffset: "horizontalOffset",
      showForZeroValues: "showForZeroValues",
      verticalOffset: "verticalOffset",
      hideFirstOrLast: "hideFirstOrLast",
      indentFromTick: "indentFromTick",
      useRangeColors: "useRangeColors",
      location: "location",
      showColon: "showColon",
      radialOffset: "radialOffset",
      topIndent: "topIndent",
      shadow: "shadow",
      useNodeColors: "useNodeColors",
      dataField: "dataField",
      enabled: "enabled"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxoLabelComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLabelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-label",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    connectorColor: [{
      type: Input
    }],
    connectorWidth: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    format: [{
      type: Input
    }],
    indent: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    horizontalAlignment: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    verticalAlignment: [{
      type: Input
    }],
    alignment: [{
      type: Input
    }],
    customizeHint: [{
      type: Input
    }],
    displayMode: [{
      type: Input
    }],
    indentFromAxis: [{
      type: Input
    }],
    overlappingBehavior: [{
      type: Input
    }],
    rotationAngle: [{
      type: Input
    }],
    staggeringSpacing: [{
      type: Input
    }],
    template: [{
      type: Input
    }],
    textOverflow: [{
      type: Input
    }],
    wordWrap: [{
      type: Input
    }],
    argumentFormat: [{
      type: Input
    }],
    backgroundColor: [{
      type: Input
    }],
    border: [{
      type: Input
    }],
    connector: [{
      type: Input
    }],
    displayFormat: [{
      type: Input
    }],
    horizontalOffset: [{
      type: Input
    }],
    showForZeroValues: [{
      type: Input
    }],
    verticalOffset: [{
      type: Input
    }],
    hideFirstOrLast: [{
      type: Input
    }],
    indentFromTick: [{
      type: Input
    }],
    useRangeColors: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    showColon: [{
      type: Input
    }],
    radialOffset: [{
      type: Input
    }],
    topIndent: [{
      type: Input
    }],
    shadow: [{
      type: Input
    }],
    useNodeColors: [{
      type: Input
    }],
    dataField: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }]
  });
})();
var DxoLabelModule = class _DxoLabelModule {
  /** @nocollapse */
  static ɵfac = function DxoLabelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLabelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLabelModule,
    declarations: [DxoLabelComponent],
    exports: [DxoLabelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLabelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLabelComponent],
      exports: [DxoLabelComponent]
    }]
  }], null, null);
})();
var DxiLayerComponent = class _DxiLayerComponent extends CollectionNestedOption {
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get borderWidth() {
    return this._getOption("borderWidth");
  }
  set borderWidth(value) {
    this._setOption("borderWidth", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get colorGroupingField() {
    return this._getOption("colorGroupingField");
  }
  set colorGroupingField(value) {
    this._setOption("colorGroupingField", value);
  }
  get colorGroups() {
    return this._getOption("colorGroups");
  }
  set colorGroups(value) {
    this._setOption("colorGroups", value);
  }
  get customize() {
    return this._getOption("customize");
  }
  set customize(value) {
    this._setOption("customize", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get elementType() {
    return this._getOption("elementType");
  }
  set elementType(value) {
    this._setOption("elementType", value);
  }
  get hoveredBorderColor() {
    return this._getOption("hoveredBorderColor");
  }
  set hoveredBorderColor(value) {
    this._setOption("hoveredBorderColor", value);
  }
  get hoveredBorderWidth() {
    return this._getOption("hoveredBorderWidth");
  }
  set hoveredBorderWidth(value) {
    this._setOption("hoveredBorderWidth", value);
  }
  get hoveredColor() {
    return this._getOption("hoveredColor");
  }
  set hoveredColor(value) {
    this._setOption("hoveredColor", value);
  }
  get hoverEnabled() {
    return this._getOption("hoverEnabled");
  }
  set hoverEnabled(value) {
    this._setOption("hoverEnabled", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get maxSize() {
    return this._getOption("maxSize");
  }
  set maxSize(value) {
    this._setOption("maxSize", value);
  }
  get minSize() {
    return this._getOption("minSize");
  }
  set minSize(value) {
    this._setOption("minSize", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteIndex() {
    return this._getOption("paletteIndex");
  }
  set paletteIndex(value) {
    this._setOption("paletteIndex", value);
  }
  get paletteSize() {
    return this._getOption("paletteSize");
  }
  set paletteSize(value) {
    this._setOption("paletteSize", value);
  }
  get selectedBorderColor() {
    return this._getOption("selectedBorderColor");
  }
  set selectedBorderColor(value) {
    this._setOption("selectedBorderColor", value);
  }
  get selectedBorderWidth() {
    return this._getOption("selectedBorderWidth");
  }
  set selectedBorderWidth(value) {
    this._setOption("selectedBorderWidth", value);
  }
  get selectedColor() {
    return this._getOption("selectedColor");
  }
  set selectedColor(value) {
    this._setOption("selectedColor", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get sizeGroupingField() {
    return this._getOption("sizeGroupingField");
  }
  set sizeGroupingField(value) {
    this._setOption("sizeGroupingField", value);
  }
  get sizeGroups() {
    return this._getOption("sizeGroups");
  }
  set sizeGroups(value) {
    this._setOption("sizeGroups", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "layers";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiLayerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLayerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiLayerComponent,
    selectors: [["dxi-layer"]],
    inputs: {
      borderColor: "borderColor",
      borderWidth: "borderWidth",
      color: "color",
      colorGroupingField: "colorGroupingField",
      colorGroups: "colorGroups",
      customize: "customize",
      dataField: "dataField",
      dataSource: "dataSource",
      elementType: "elementType",
      hoveredBorderColor: "hoveredBorderColor",
      hoveredBorderWidth: "hoveredBorderWidth",
      hoveredColor: "hoveredColor",
      hoverEnabled: "hoverEnabled",
      label: "label",
      maxSize: "maxSize",
      minSize: "minSize",
      name: "name",
      opacity: "opacity",
      palette: "palette",
      paletteIndex: "paletteIndex",
      paletteSize: "paletteSize",
      selectedBorderColor: "selectedBorderColor",
      selectedBorderWidth: "selectedBorderWidth",
      selectedColor: "selectedColor",
      selectionMode: "selectionMode",
      size: "size",
      sizeGroupingField: "sizeGroupingField",
      sizeGroups: "sizeGroups",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiLayerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLayerComponent, [{
    type: Component,
    args: [{
      selector: "dxi-layer",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    borderColor: [{
      type: Input
    }],
    borderWidth: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    colorGroupingField: [{
      type: Input
    }],
    colorGroups: [{
      type: Input
    }],
    customize: [{
      type: Input
    }],
    dataField: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    elementType: [{
      type: Input
    }],
    hoveredBorderColor: [{
      type: Input
    }],
    hoveredBorderWidth: [{
      type: Input
    }],
    hoveredColor: [{
      type: Input
    }],
    hoverEnabled: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    maxSize: [{
      type: Input
    }],
    minSize: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    palette: [{
      type: Input
    }],
    paletteIndex: [{
      type: Input
    }],
    paletteSize: [{
      type: Input
    }],
    selectedBorderColor: [{
      type: Input
    }],
    selectedBorderWidth: [{
      type: Input
    }],
    selectedColor: [{
      type: Input
    }],
    selectionMode: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    sizeGroupingField: [{
      type: Input
    }],
    sizeGroups: [{
      type: Input
    }],
    type: [{
      type: Input
    }]
  });
})();
var DxiLayerModule = class _DxiLayerModule {
  /** @nocollapse */
  static ɵfac = function DxiLayerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLayerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiLayerModule,
    declarations: [DxiLayerComponent],
    exports: [DxiLayerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLayerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiLayerComponent],
      exports: [DxiLayerComponent]
    }]
  }], null, null);
})();
var DxiLegendComponent = class _DxiLegendComponent extends CollectionNestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get columnCount() {
    return this._getOption("columnCount");
  }
  set columnCount(value) {
    this._setOption("columnCount", value);
  }
  get columnItemSpacing() {
    return this._getOption("columnItemSpacing");
  }
  set columnItemSpacing(value) {
    this._setOption("columnItemSpacing", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get customizeItems() {
    return this._getOption("customizeItems");
  }
  set customizeItems(value) {
    this._setOption("customizeItems", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get itemsAlignment() {
    return this._getOption("itemsAlignment");
  }
  set itemsAlignment(value) {
    this._setOption("itemsAlignment", value);
  }
  get itemTextPosition() {
    return this._getOption("itemTextPosition");
  }
  set itemTextPosition(value) {
    this._setOption("itemTextPosition", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get markerColor() {
    return this._getOption("markerColor");
  }
  set markerColor(value) {
    this._setOption("markerColor", value);
  }
  get markerShape() {
    return this._getOption("markerShape");
  }
  set markerShape(value) {
    this._setOption("markerShape", value);
  }
  get markerSize() {
    return this._getOption("markerSize");
  }
  set markerSize(value) {
    this._setOption("markerSize", value);
  }
  get markerTemplate() {
    return this._getOption("markerTemplate");
  }
  set markerTemplate(value) {
    this._setOption("markerTemplate", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get rowCount() {
    return this._getOption("rowCount");
  }
  set rowCount(value) {
    this._setOption("rowCount", value);
  }
  get rowItemSpacing() {
    return this._getOption("rowItemSpacing");
  }
  set rowItemSpacing(value) {
    this._setOption("rowItemSpacing", value);
  }
  get source() {
    return this._getOption("source");
  }
  set source(value) {
    this._setOption("source", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "legends";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiLegendComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLegendComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiLegendComponent,
    selectors: [["dxi-legend"]],
    inputs: {
      backgroundColor: "backgroundColor",
      border: "border",
      columnCount: "columnCount",
      columnItemSpacing: "columnItemSpacing",
      customizeHint: "customizeHint",
      customizeItems: "customizeItems",
      customizeText: "customizeText",
      font: "font",
      horizontalAlignment: "horizontalAlignment",
      itemsAlignment: "itemsAlignment",
      itemTextPosition: "itemTextPosition",
      margin: "margin",
      markerColor: "markerColor",
      markerShape: "markerShape",
      markerSize: "markerSize",
      markerTemplate: "markerTemplate",
      orientation: "orientation",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      rowCount: "rowCount",
      rowItemSpacing: "rowItemSpacing",
      source: "source",
      title: "title",
      verticalAlignment: "verticalAlignment",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiLegendComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLegendComponent, [{
    type: Component,
    args: [{
      selector: "dxi-legend",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    border: [{
      type: Input
    }],
    columnCount: [{
      type: Input
    }],
    columnItemSpacing: [{
      type: Input
    }],
    customizeHint: [{
      type: Input
    }],
    customizeItems: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    horizontalAlignment: [{
      type: Input
    }],
    itemsAlignment: [{
      type: Input
    }],
    itemTextPosition: [{
      type: Input
    }],
    margin: [{
      type: Input
    }],
    markerColor: [{
      type: Input
    }],
    markerShape: [{
      type: Input
    }],
    markerSize: [{
      type: Input
    }],
    markerTemplate: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    rowCount: [{
      type: Input
    }],
    rowItemSpacing: [{
      type: Input
    }],
    source: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    verticalAlignment: [{
      type: Input
    }],
    visible: [{
      type: Input
    }]
  });
})();
var DxiLegendModule = class _DxiLegendModule {
  /** @nocollapse */
  static ɵfac = function DxiLegendModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiLegendModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiLegendModule,
    declarations: [DxiLegendComponent],
    exports: [DxiLegendComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLegendModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiLegendComponent],
      exports: [DxiLegendComponent]
    }]
  }], null, null);
})();
var DxoLegendComponent = class _DxoLegendComponent extends NestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get columnCount() {
    return this._getOption("columnCount");
  }
  set columnCount(value) {
    this._setOption("columnCount", value);
  }
  get columnItemSpacing() {
    return this._getOption("columnItemSpacing");
  }
  set columnItemSpacing(value) {
    this._setOption("columnItemSpacing", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get customizeItems() {
    return this._getOption("customizeItems");
  }
  set customizeItems(value) {
    this._setOption("customizeItems", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get itemsAlignment() {
    return this._getOption("itemsAlignment");
  }
  set itemsAlignment(value) {
    this._setOption("itemsAlignment", value);
  }
  get itemTextFormat() {
    return this._getOption("itemTextFormat");
  }
  set itemTextFormat(value) {
    this._setOption("itemTextFormat", value);
  }
  get itemTextPosition() {
    return this._getOption("itemTextPosition");
  }
  set itemTextPosition(value) {
    this._setOption("itemTextPosition", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get markerSize() {
    return this._getOption("markerSize");
  }
  set markerSize(value) {
    this._setOption("markerSize", value);
  }
  get markerTemplate() {
    return this._getOption("markerTemplate");
  }
  set markerTemplate(value) {
    this._setOption("markerTemplate", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get rowCount() {
    return this._getOption("rowCount");
  }
  set rowCount(value) {
    this._setOption("rowCount", value);
  }
  get rowItemSpacing() {
    return this._getOption("rowItemSpacing");
  }
  set rowItemSpacing(value) {
    this._setOption("rowItemSpacing", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get _optionPath() {
    return "legend";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLegendComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLegendComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLegendComponent,
    selectors: [["dxo-legend"]],
    inputs: {
      backgroundColor: "backgroundColor",
      border: "border",
      columnCount: "columnCount",
      columnItemSpacing: "columnItemSpacing",
      customizeHint: "customizeHint",
      customizeItems: "customizeItems",
      customizeText: "customizeText",
      font: "font",
      horizontalAlignment: "horizontalAlignment",
      itemsAlignment: "itemsAlignment",
      itemTextFormat: "itemTextFormat",
      itemTextPosition: "itemTextPosition",
      margin: "margin",
      markerSize: "markerSize",
      markerTemplate: "markerTemplate",
      orientation: "orientation",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      rowCount: "rowCount",
      rowItemSpacing: "rowItemSpacing",
      title: "title",
      verticalAlignment: "verticalAlignment",
      visible: "visible",
      hoverMode: "hoverMode",
      position: "position"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLegendComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLegendComponent, [{
    type: Component,
    args: [{
      selector: "dxo-legend",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    border: [{
      type: Input
    }],
    columnCount: [{
      type: Input
    }],
    columnItemSpacing: [{
      type: Input
    }],
    customizeHint: [{
      type: Input
    }],
    customizeItems: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    horizontalAlignment: [{
      type: Input
    }],
    itemsAlignment: [{
      type: Input
    }],
    itemTextFormat: [{
      type: Input
    }],
    itemTextPosition: [{
      type: Input
    }],
    margin: [{
      type: Input
    }],
    markerSize: [{
      type: Input
    }],
    markerTemplate: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    rowCount: [{
      type: Input
    }],
    rowItemSpacing: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    verticalAlignment: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    hoverMode: [{
      type: Input
    }],
    position: [{
      type: Input
    }]
  });
})();
var DxoLegendModule = class _DxoLegendModule {
  /** @nocollapse */
  static ɵfac = function DxoLegendModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLegendModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLegendModule,
    declarations: [DxoLegendComponent],
    exports: [DxoLegendComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLegendModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLegendComponent],
      exports: [DxoLegendComponent]
    }]
  }], null, null);
})();
var DxoLineComponent = class _DxoLineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "line";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLineComponent,
    selectors: [["dxo-line"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-line",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoLineModule = class _DxoLineModule {
  /** @nocollapse */
  static ɵfac = function DxoLineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLineModule,
    declarations: [DxoLineComponent],
    exports: [DxoLineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLineComponent],
      exports: [DxoLineComponent]
    }]
  }], null, null);
})();
var DxoLinkComponent = class _DxoLinkComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get colorMode() {
    return this._getOption("colorMode");
  }
  set colorMode(value) {
    this._setOption("colorMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "link";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLinkComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLinkComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLinkComponent,
    selectors: [["dxo-link"]],
    inputs: {
      border: "border",
      color: "color",
      colorMode: "colorMode",
      hoverStyle: "hoverStyle",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLinkComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLinkComponent, [{
    type: Component,
    args: [{
      selector: "dxo-link",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    colorMode: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoLinkModule = class _DxoLinkModule {
  /** @nocollapse */
  static ɵfac = function DxoLinkModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLinkModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLinkModule,
    declarations: [DxoLinkComponent],
    exports: [DxoLinkComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLinkModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLinkComponent],
      exports: [DxoLinkComponent]
    }]
  }], null, null);
})();
var DxoLoadPanelComponent = class _DxoLoadPanelComponent extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get indicatorSrc() {
    return this._getOption("indicatorSrc");
  }
  set indicatorSrc(value) {
    this._setOption("indicatorSrc", value);
  }
  get shading() {
    return this._getOption("shading");
  }
  set shading(value) {
    this._setOption("shading", value);
  }
  get shadingColor() {
    return this._getOption("shadingColor");
  }
  set shadingColor(value) {
    this._setOption("shadingColor", value);
  }
  get showIndicator() {
    return this._getOption("showIndicator");
  }
  set showIndicator(value) {
    this._setOption("showIndicator", value);
  }
  get showPane() {
    return this._getOption("showPane");
  }
  set showPane(value) {
    this._setOption("showPane", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "loadPanel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLoadPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLoadPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLoadPanelComponent,
    selectors: [["dxo-load-panel"]],
    inputs: {
      enabled: "enabled",
      height: "height",
      indicatorSrc: "indicatorSrc",
      shading: "shading",
      shadingColor: "shadingColor",
      showIndicator: "showIndicator",
      showPane: "showPane",
      text: "text",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLoadPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-load-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    enabled: [{
      type: Input
    }],
    height: [{
      type: Input
    }],
    indicatorSrc: [{
      type: Input
    }],
    shading: [{
      type: Input
    }],
    shadingColor: [{
      type: Input
    }],
    showIndicator: [{
      type: Input
    }],
    showPane: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoLoadPanelModule = class _DxoLoadPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoLoadPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLoadPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLoadPanelModule,
    declarations: [DxoLoadPanelComponent],
    exports: [DxoLoadPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLoadPanelComponent],
      exports: [DxoLoadPanelComponent]
    }]
  }], null, null);
})();
var DxoLoadingIndicatorComponent = class _DxoLoadingIndicatorComponent extends NestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  showChange;
  get _optionPath() {
    return "loadingIndicator";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "showChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLoadingIndicatorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLoadingIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLoadingIndicatorComponent,
    selectors: [["dxo-loading-indicator"]],
    inputs: {
      backgroundColor: "backgroundColor",
      font: "font",
      show: "show",
      text: "text",
      enabled: "enabled"
    },
    outputs: {
      showChange: "showChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLoadingIndicatorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadingIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-loading-indicator",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    show: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    showChange: [{
      type: Output
    }]
  });
})();
var DxoLoadingIndicatorModule = class _DxoLoadingIndicatorModule {
  /** @nocollapse */
  static ɵfac = function DxoLoadingIndicatorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLoadingIndicatorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLoadingIndicatorModule,
    declarations: [DxoLoadingIndicatorComponent],
    exports: [DxoLoadingIndicatorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadingIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLoadingIndicatorComponent],
      exports: [DxoLoadingIndicatorComponent]
    }]
  }], null, null);
})();
var DxoLookupComponent = class _DxoLookupComponent extends NestedOption {
  get allowClearing() {
    return this._getOption("allowClearing");
  }
  set allowClearing(value) {
    this._setOption("allowClearing", value);
  }
  get calculateCellValue() {
    return this._getOption("calculateCellValue");
  }
  set calculateCellValue(value) {
    this._setOption("calculateCellValue", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
  get _optionPath() {
    return "lookup";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoLookupComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLookupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoLookupComponent,
    selectors: [["dxo-lookup"]],
    inputs: {
      allowClearing: "allowClearing",
      calculateCellValue: "calculateCellValue",
      dataSource: "dataSource",
      displayExpr: "displayExpr",
      valueExpr: "valueExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoLookupComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLookupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-lookup",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowClearing: [{
      type: Input
    }],
    calculateCellValue: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    displayExpr: [{
      type: Input
    }],
    valueExpr: [{
      type: Input
    }]
  });
})();
var DxoLookupModule = class _DxoLookupModule {
  /** @nocollapse */
  static ɵfac = function DxoLookupModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoLookupModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoLookupModule,
    declarations: [DxoLookupComponent],
    exports: [DxoLookupComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLookupModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoLookupComponent],
      exports: [DxoLookupComponent]
    }]
  }], null, null);
})();
var DxoMainToolbarComponent = class _DxoMainToolbarComponent extends NestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "mainToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMainToolbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMainToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMainToolbarComponent,
    selectors: [["dxo-main-toolbar"]],
    contentQueries: function DxoMainToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
      }
    },
    inputs: {
      commands: "commands",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMainToolbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMainToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-main-toolbar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    commands: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }]
  });
})();
var DxoMainToolbarModule = class _DxoMainToolbarModule {
  /** @nocollapse */
  static ɵfac = function DxoMainToolbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMainToolbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMainToolbarModule,
    declarations: [DxoMainToolbarComponent],
    exports: [DxoMainToolbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMainToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMainToolbarComponent],
      exports: [DxoMainToolbarComponent]
    }]
  }], null, null);
})();
var DxoMarginComponent = class _DxoMarginComponent extends NestedOption {
  get bottom() {
    return this._getOption("bottom");
  }
  set bottom(value) {
    this._setOption("bottom", value);
  }
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
  get _optionPath() {
    return "margin";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMarginComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMarginComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMarginComponent,
    selectors: [["dxo-margin"]],
    inputs: {
      bottom: "bottom",
      left: "left",
      right: "right",
      top: "top"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMarginComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarginComponent, [{
    type: Component,
    args: [{
      selector: "dxo-margin",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    bottom: [{
      type: Input
    }],
    left: [{
      type: Input
    }],
    right: [{
      type: Input
    }],
    top: [{
      type: Input
    }]
  });
})();
var DxoMarginModule = class _DxoMarginModule {
  /** @nocollapse */
  static ɵfac = function DxoMarginModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMarginModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMarginModule,
    declarations: [DxoMarginComponent],
    exports: [DxoMarginComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarginModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMarginComponent],
      exports: [DxoMarginComponent]
    }]
  }], null, null);
})();
var DxiMarkerComponent = class _DxiMarkerComponent extends CollectionNestedOption {
  get iconSrc() {
    return this._getOption("iconSrc");
  }
  set iconSrc(value) {
    this._setOption("iconSrc", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get tooltip() {
    return this._getOption("tooltip");
  }
  set tooltip(value) {
    this._setOption("tooltip", value);
  }
  get _optionPath() {
    return "markers";
  }
  get locationChildren() {
    return this._getOption("location");
  }
  set locationChildren(value) {
    this.setChildren("location", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiMarkerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiMarkerComponent,
    selectors: [["dxi-marker"]],
    contentQueries: function DxiMarkerComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationChildren = _t);
      }
    },
    inputs: {
      iconSrc: "iconSrc",
      location: "location",
      onClick: "onClick",
      tooltip: "tooltip"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiMarkerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxi-marker",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    iconSrc: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    onClick: [{
      type: Input
    }],
    tooltip: [{
      type: Input
    }],
    locationChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiLocationComponent)]
    }]
  });
})();
var DxiMarkerModule = class _DxiMarkerModule {
  /** @nocollapse */
  static ɵfac = function DxiMarkerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMarkerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiMarkerModule,
    declarations: [DxiMarkerComponent],
    exports: [DxiMarkerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiMarkerComponent],
      exports: [DxiMarkerComponent]
    }]
  }], null, null);
})();
var DxoMarkerComponent = class _DxoMarkerComponent extends NestedOption {
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get separatorHeight() {
    return this._getOption("separatorHeight");
  }
  set separatorHeight(value) {
    this._setOption("separatorHeight", value);
  }
  get textLeftIndent() {
    return this._getOption("textLeftIndent");
  }
  set textLeftIndent(value) {
    this._setOption("textLeftIndent", value);
  }
  get textTopIndent() {
    return this._getOption("textTopIndent");
  }
  set textTopIndent(value) {
    this._setOption("textTopIndent", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "marker";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMarkerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMarkerComponent,
    selectors: [["dxo-marker"]],
    inputs: {
      label: "label",
      separatorHeight: "separatorHeight",
      textLeftIndent: "textLeftIndent",
      textTopIndent: "textTopIndent",
      topIndent: "topIndent",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMarkerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-marker",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    label: [{
      type: Input
    }],
    separatorHeight: [{
      type: Input
    }],
    textLeftIndent: [{
      type: Input
    }],
    textTopIndent: [{
      type: Input
    }],
    topIndent: [{
      type: Input
    }],
    visible: [{
      type: Input
    }]
  });
})();
var DxoMarkerModule = class _DxoMarkerModule {
  /** @nocollapse */
  static ɵfac = function DxoMarkerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMarkerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMarkerModule,
    declarations: [DxoMarkerComponent],
    exports: [DxoMarkerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMarkerComponent],
      exports: [DxoMarkerComponent]
    }]
  }], null, null);
})();
var DxoMasterDetailComponent = class _DxoMasterDetailComponent extends NestedOption {
  renderer;
  document;
  element;
  get autoExpandAll() {
    return this._getOption("autoExpandAll");
  }
  set autoExpandAll(value) {
    this._setOption("autoExpandAll", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get _optionPath() {
    return "masterDetail";
  }
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMasterDetailComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMasterDetailComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMasterDetailComponent,
    selectors: [["dxo-master-detail"]],
    inputs: {
      autoExpandAll: "autoExpandAll",
      enabled: "enabled",
      template: "template"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function DxoMasterDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMasterDetailComponent, [{
    type: Component,
    args: [{
      selector: "dxo-master-detail",
      template: "<ng-content></ng-content>",
      providers: [NestedOptionHost, DxTemplateHost],
      styles: [":host{display:block}\n"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: Renderer2
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DxTemplateHost,
    decorators: [{
      type: Host
    }]
  }, {
    type: ElementRef
  }], {
    autoExpandAll: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    template: [{
      type: Input
    }]
  });
})();
var DxoMasterDetailModule = class _DxoMasterDetailModule {
  /** @nocollapse */
  static ɵfac = function DxoMasterDetailModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMasterDetailModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMasterDetailModule,
    declarations: [DxoMasterDetailComponent],
    exports: [DxoMasterDetailComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMasterDetailModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMasterDetailComponent],
      exports: [DxoMasterDetailComponent]
    }]
  }], null, null);
})();
var DxoMaxRangeComponent = class _DxoMaxRangeComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "maxRange";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMaxRangeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMaxRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMaxRangeComponent,
    selectors: [["dxo-max-range"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMaxRangeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMaxRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-max-range",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoMaxRangeModule = class _DxoMaxRangeModule {
  /** @nocollapse */
  static ɵfac = function DxoMaxRangeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMaxRangeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMaxRangeModule,
    declarations: [DxoMaxRangeComponent],
    exports: [DxoMaxRangeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMaxRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMaxRangeComponent],
      exports: [DxoMaxRangeComponent]
    }]
  }], null, null);
})();
var DxoHtmlEditorMediaResizing = class _DxoHtmlEditorMediaResizing extends NestedOption {
  get allowedTargets() {
    return this._getOption("allowedTargets");
  }
  set allowedTargets(value) {
    this._setOption("allowedTargets", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoHtmlEditorMediaResizing_BaseFactory;
    return function DxoHtmlEditorMediaResizing_Factory(__ngFactoryType__) {
      return (ɵDxoHtmlEditorMediaResizing_BaseFactory || (ɵDxoHtmlEditorMediaResizing_BaseFactory = ɵɵgetInheritedFactory(_DxoHtmlEditorMediaResizing)))(__ngFactoryType__ || _DxoHtmlEditorMediaResizing);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHtmlEditorMediaResizing,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHtmlEditorMediaResizing_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorMediaResizing, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoMediaResizingComponent = class _DxoMediaResizingComponent extends DxoHtmlEditorMediaResizing {
  get _optionPath() {
    return "mediaResizing";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMediaResizingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMediaResizingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMediaResizingComponent,
    selectors: [["dxo-media-resizing"]],
    inputs: {
      allowedTargets: "allowedTargets",
      enabled: "enabled"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMediaResizingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMediaResizingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-media-resizing",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowedTargets", "enabled"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoMediaResizingModule = class _DxoMediaResizingModule {
  /** @nocollapse */
  static ɵfac = function DxoMediaResizingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMediaResizingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMediaResizingModule,
    declarations: [DxoMediaResizingComponent],
    exports: [DxoMediaResizingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMediaResizingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMediaResizingComponent],
      exports: [DxoMediaResizingComponent]
    }]
  }], null, null);
})();
var DxiHtmlEditorMention = class _DxiHtmlEditorMention extends CollectionNestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get marker() {
    return this._getOption("marker");
  }
  set marker(value) {
    this._setOption("marker", value);
  }
  get minSearchLength() {
    return this._getOption("minSearchLength");
  }
  set minSearchLength(value) {
    this._setOption("minSearchLength", value);
  }
  get searchExpr() {
    return this._getOption("searchExpr");
  }
  set searchExpr(value) {
    this._setOption("searchExpr", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiHtmlEditorMention_BaseFactory;
    return function DxiHtmlEditorMention_Factory(__ngFactoryType__) {
      return (ɵDxiHtmlEditorMention_BaseFactory || (ɵDxiHtmlEditorMention_BaseFactory = ɵɵgetInheritedFactory(_DxiHtmlEditorMention)))(__ngFactoryType__ || _DxiHtmlEditorMention);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiHtmlEditorMention,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiHtmlEditorMention_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiHtmlEditorMention, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiMentionComponent = class _DxiMentionComponent extends DxiHtmlEditorMention {
  get _optionPath() {
    return "mentions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiMentionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMentionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiMentionComponent,
    selectors: [["dxi-mention"]],
    inputs: {
      dataSource: "dataSource",
      displayExpr: "displayExpr",
      itemTemplate: "itemTemplate",
      marker: "marker",
      minSearchLength: "minSearchLength",
      searchExpr: "searchExpr",
      searchTimeout: "searchTimeout",
      template: "template",
      valueExpr: "valueExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiMentionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMentionComponent, [{
    type: Component,
    args: [{
      selector: "dxi-mention",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["dataSource", "displayExpr", "itemTemplate", "marker", "minSearchLength", "searchExpr", "searchTimeout", "template", "valueExpr"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiMentionModule = class _DxiMentionModule {
  /** @nocollapse */
  static ɵfac = function DxiMentionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMentionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiMentionModule,
    declarations: [DxiMentionComponent],
    exports: [DxiMentionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMentionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiMentionComponent],
      exports: [DxiMentionComponent]
    }]
  }], null, null);
})();
var DxiMenuItemComponent = class _DxiMenuItemComponent extends CollectionNestedOption {
  get action() {
    return this._getOption("action");
  }
  set action(value) {
    this._setOption("action", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get _optionPath() {
    return "menuItems";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiMenuItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMenuItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiMenuItemComponent,
    selectors: [["dxi-menu-item"]],
    inputs: {
      action: "action",
      text: "text"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiMenuItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMenuItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-menu-item",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    action: [{
      type: Input
    }],
    text: [{
      type: Input
    }]
  });
})();
var DxiMenuItemModule = class _DxiMenuItemModule {
  /** @nocollapse */
  static ɵfac = function DxiMenuItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiMenuItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiMenuItemModule,
    declarations: [DxiMenuItemComponent],
    exports: [DxiMenuItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMenuItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiMenuItemComponent],
      exports: [DxiMenuItemComponent]
    }]
  }], null, null);
})();
var DxoMessageTimestampFormatComponent = class _DxoMessageTimestampFormatComponent extends DxoFormat {
  get _optionPath() {
    return "messageTimestampFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMessageTimestampFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMessageTimestampFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMessageTimestampFormatComponent,
    selectors: [["dxo-message-timestamp-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMessageTimestampFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMessageTimestampFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-message-timestamp-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoMessageTimestampFormatModule = class _DxoMessageTimestampFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoMessageTimestampFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMessageTimestampFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMessageTimestampFormatModule,
    declarations: [DxoMessageTimestampFormatComponent],
    exports: [DxoMessageTimestampFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMessageTimestampFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMessageTimestampFormatComponent],
      exports: [DxoMessageTimestampFormatComponent]
    }]
  }], null, null);
})();
var DxoMinRangeComponent = class _DxoMinRangeComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minRange";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMinRangeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMinRangeComponent,
    selectors: [["dxo-min-range"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMinRangeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-min-range",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoMinRangeModule = class _DxoMinRangeModule {
  /** @nocollapse */
  static ɵfac = function DxoMinRangeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinRangeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMinRangeModule,
    declarations: [DxoMinRangeComponent],
    exports: [DxoMinRangeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMinRangeComponent],
      exports: [DxoMinRangeComponent]
    }]
  }], null, null);
})();
var DxoMinVisualRangeLengthComponent = class _DxoMinVisualRangeLengthComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minVisualRangeLength";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMinVisualRangeLengthComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinVisualRangeLengthComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMinVisualRangeLengthComponent,
    selectors: [["dxo-min-visual-range-length"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMinVisualRangeLengthComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinVisualRangeLengthComponent, [{
    type: Component,
    args: [{
      selector: "dxo-min-visual-range-length",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoMinVisualRangeLengthModule = class _DxoMinVisualRangeLengthModule {
  /** @nocollapse */
  static ɵfac = function DxoMinVisualRangeLengthModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinVisualRangeLengthModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMinVisualRangeLengthModule,
    declarations: [DxoMinVisualRangeLengthComponent],
    exports: [DxoMinVisualRangeLengthComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinVisualRangeLengthModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMinVisualRangeLengthComponent],
      exports: [DxoMinVisualRangeLengthComponent]
    }]
  }], null, null);
})();
var DxoMinorGridComponent = class _DxoMinorGridComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "minorGrid";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMinorGridComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorGridComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMinorGridComponent,
    selectors: [["dxo-minor-grid"]],
    inputs: {
      color: "color",
      opacity: "opacity",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMinorGridComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorGridComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-grid",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoMinorGridModule = class _DxoMinorGridModule {
  /** @nocollapse */
  static ɵfac = function DxoMinorGridModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorGridModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMinorGridModule,
    declarations: [DxoMinorGridComponent],
    exports: [DxoMinorGridComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorGridModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMinorGridComponent],
      exports: [DxoMinorGridComponent]
    }]
  }], null, null);
})();
var DxoMinorTickIntervalComponent = class _DxoMinorTickIntervalComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minorTickInterval";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMinorTickIntervalComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorTickIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMinorTickIntervalComponent,
    selectors: [["dxo-minor-tick-interval"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMinorTickIntervalComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-tick-interval",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoMinorTickIntervalModule = class _DxoMinorTickIntervalModule {
  /** @nocollapse */
  static ɵfac = function DxoMinorTickIntervalModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorTickIntervalModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMinorTickIntervalModule,
    declarations: [DxoMinorTickIntervalComponent],
    exports: [DxoMinorTickIntervalComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMinorTickIntervalComponent],
      exports: [DxoMinorTickIntervalComponent]
    }]
  }], null, null);
})();
var DxoMinorTickComponent = class _DxoMinorTickComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get shift() {
    return this._getOption("shift");
  }
  set shift(value) {
    this._setOption("shift", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "minorTick";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMinorTickComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorTickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMinorTickComponent,
    selectors: [["dxo-minor-tick"]],
    inputs: {
      color: "color",
      length: "length",
      opacity: "opacity",
      shift: "shift",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMinorTickComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-tick",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    length: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    shift: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoMinorTickModule = class _DxoMinorTickModule {
  /** @nocollapse */
  static ɵfac = function DxoMinorTickModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMinorTickModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMinorTickModule,
    declarations: [DxoMinorTickComponent],
    exports: [DxoMinorTickComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMinorTickComponent],
      exports: [DxoMinorTickComponent]
    }]
  }], null, null);
})();
var DxoMyComponent = class _DxoMyComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "my";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoMyComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMyComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoMyComponent,
    selectors: [["dxo-my"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoMyComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMyComponent, [{
    type: Component,
    args: [{
      selector: "dxo-my",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoMyModule = class _DxoMyModule {
  /** @nocollapse */
  static ɵfac = function DxoMyModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoMyModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoMyModule,
    declarations: [DxoMyComponent],
    exports: [DxoMyComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMyModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoMyComponent],
      exports: [DxoMyComponent]
    }]
  }], null, null);
})();
var DxoNodeComponent = class _DxoNodeComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get padding() {
    return this._getOption("padding");
  }
  set padding(value) {
    this._setOption("padding", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "node";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoNodeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNodeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoNodeComponent,
    selectors: [["dxo-node"]],
    inputs: {
      border: "border",
      color: "color",
      hoverStyle: "hoverStyle",
      opacity: "opacity",
      padding: "padding",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoNodeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-node",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    padding: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoNodeModule = class _DxoNodeModule {
  /** @nocollapse */
  static ɵfac = function DxoNodeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNodeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoNodeModule,
    declarations: [DxoNodeComponent],
    exports: [DxoNodeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoNodeComponent],
      exports: [DxoNodeComponent]
    }]
  }], null, null);
})();
var DxoNodesComponent = class _DxoNodesComponent extends NestedOption {
  get autoLayout() {
    return this._getOption("autoLayout");
  }
  set autoLayout(value) {
    this._setOption("autoLayout", value);
  }
  get autoSizeEnabled() {
    return this._getOption("autoSizeEnabled");
  }
  set autoSizeEnabled(value) {
    this._setOption("autoSizeEnabled", value);
  }
  get containerChildrenExpr() {
    return this._getOption("containerChildrenExpr");
  }
  set containerChildrenExpr(value) {
    this._setOption("containerChildrenExpr", value);
  }
  get containerKeyExpr() {
    return this._getOption("containerKeyExpr");
  }
  set containerKeyExpr(value) {
    this._setOption("containerKeyExpr", value);
  }
  get customDataExpr() {
    return this._getOption("customDataExpr");
  }
  set customDataExpr(value) {
    this._setOption("customDataExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get heightExpr() {
    return this._getOption("heightExpr");
  }
  set heightExpr(value) {
    this._setOption("heightExpr", value);
  }
  get imageUrlExpr() {
    return this._getOption("imageUrlExpr");
  }
  set imageUrlExpr(value) {
    this._setOption("imageUrlExpr", value);
  }
  get itemsExpr() {
    return this._getOption("itemsExpr");
  }
  set itemsExpr(value) {
    this._setOption("itemsExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get leftExpr() {
    return this._getOption("leftExpr");
  }
  set leftExpr(value) {
    this._setOption("leftExpr", value);
  }
  get lockedExpr() {
    return this._getOption("lockedExpr");
  }
  set lockedExpr(value) {
    this._setOption("lockedExpr", value);
  }
  get parentKeyExpr() {
    return this._getOption("parentKeyExpr");
  }
  set parentKeyExpr(value) {
    this._setOption("parentKeyExpr", value);
  }
  get styleExpr() {
    return this._getOption("styleExpr");
  }
  set styleExpr(value) {
    this._setOption("styleExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get textStyleExpr() {
    return this._getOption("textStyleExpr");
  }
  set textStyleExpr(value) {
    this._setOption("textStyleExpr", value);
  }
  get topExpr() {
    return this._getOption("topExpr");
  }
  set topExpr(value) {
    this._setOption("topExpr", value);
  }
  get typeExpr() {
    return this._getOption("typeExpr");
  }
  set typeExpr(value) {
    this._setOption("typeExpr", value);
  }
  get widthExpr() {
    return this._getOption("widthExpr");
  }
  set widthExpr(value) {
    this._setOption("widthExpr", value);
  }
  get zIndexExpr() {
    return this._getOption("zIndexExpr");
  }
  set zIndexExpr(value) {
    this._setOption("zIndexExpr", value);
  }
  get _optionPath() {
    return "nodes";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoNodesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNodesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoNodesComponent,
    selectors: [["dxo-nodes"]],
    inputs: {
      autoLayout: "autoLayout",
      autoSizeEnabled: "autoSizeEnabled",
      containerChildrenExpr: "containerChildrenExpr",
      containerKeyExpr: "containerKeyExpr",
      customDataExpr: "customDataExpr",
      dataSource: "dataSource",
      heightExpr: "heightExpr",
      imageUrlExpr: "imageUrlExpr",
      itemsExpr: "itemsExpr",
      keyExpr: "keyExpr",
      leftExpr: "leftExpr",
      lockedExpr: "lockedExpr",
      parentKeyExpr: "parentKeyExpr",
      styleExpr: "styleExpr",
      textExpr: "textExpr",
      textStyleExpr: "textStyleExpr",
      topExpr: "topExpr",
      typeExpr: "typeExpr",
      widthExpr: "widthExpr",
      zIndexExpr: "zIndexExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoNodesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-nodes",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    autoLayout: [{
      type: Input
    }],
    autoSizeEnabled: [{
      type: Input
    }],
    containerChildrenExpr: [{
      type: Input
    }],
    containerKeyExpr: [{
      type: Input
    }],
    customDataExpr: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    heightExpr: [{
      type: Input
    }],
    imageUrlExpr: [{
      type: Input
    }],
    itemsExpr: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    leftExpr: [{
      type: Input
    }],
    lockedExpr: [{
      type: Input
    }],
    parentKeyExpr: [{
      type: Input
    }],
    styleExpr: [{
      type: Input
    }],
    textExpr: [{
      type: Input
    }],
    textStyleExpr: [{
      type: Input
    }],
    topExpr: [{
      type: Input
    }],
    typeExpr: [{
      type: Input
    }],
    widthExpr: [{
      type: Input
    }],
    zIndexExpr: [{
      type: Input
    }]
  });
})();
var DxoNodesModule = class _DxoNodesModule {
  /** @nocollapse */
  static ɵfac = function DxoNodesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNodesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoNodesModule,
    declarations: [DxoNodesComponent],
    exports: [DxoNodesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoNodesComponent],
      exports: [DxoNodesComponent]
    }]
  }], null, null);
})();
var DxoNotificationsComponent = class _DxoNotificationsComponent extends NestedOption {
  get showPanel() {
    return this._getOption("showPanel");
  }
  set showPanel(value) {
    this._setOption("showPanel", value);
  }
  get showPopup() {
    return this._getOption("showPopup");
  }
  set showPopup(value) {
    this._setOption("showPopup", value);
  }
  get _optionPath() {
    return "notifications";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoNotificationsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNotificationsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoNotificationsComponent,
    selectors: [["dxo-notifications"]],
    inputs: {
      showPanel: "showPanel",
      showPopup: "showPopup"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoNotificationsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNotificationsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-notifications",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    showPanel: [{
      type: Input
    }],
    showPopup: [{
      type: Input
    }]
  });
})();
var DxoNotificationsModule = class _DxoNotificationsModule {
  /** @nocollapse */
  static ɵfac = function DxoNotificationsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoNotificationsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoNotificationsModule,
    declarations: [DxoNotificationsComponent],
    exports: [DxoNotificationsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNotificationsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoNotificationsComponent],
      exports: [DxoNotificationsComponent]
    }]
  }], null, null);
})();
var DxoOffsetComponent = class _DxoOffsetComponent extends NestedOption {
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "offset";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoOffsetComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoOffsetComponent,
    selectors: [["dxo-offset"]],
    inputs: {
      x: "x",
      y: "y"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoOffsetComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-offset",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    x: [{
      type: Input
    }],
    y: [{
      type: Input
    }]
  });
})();
var DxoOffsetModule = class _DxoOffsetModule {
  /** @nocollapse */
  static ɵfac = function DxoOffsetModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOffsetModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoOffsetModule,
    declarations: [DxoOffsetComponent],
    exports: [DxoOffsetComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoOffsetComponent],
      exports: [DxoOffsetComponent]
    }]
  }], null, null);
})();
var DxoGanttFilterRowOperationDescriptions = class _DxoGanttFilterRowOperationDescriptions extends NestedOption {
  get between() {
    return this._getOption("between");
  }
  set between(value) {
    this._setOption("between", value);
  }
  get contains() {
    return this._getOption("contains");
  }
  set contains(value) {
    this._setOption("contains", value);
  }
  get endsWith() {
    return this._getOption("endsWith");
  }
  set endsWith(value) {
    this._setOption("endsWith", value);
  }
  get equal() {
    return this._getOption("equal");
  }
  set equal(value) {
    this._setOption("equal", value);
  }
  get greaterThan() {
    return this._getOption("greaterThan");
  }
  set greaterThan(value) {
    this._setOption("greaterThan", value);
  }
  get greaterThanOrEqual() {
    return this._getOption("greaterThanOrEqual");
  }
  set greaterThanOrEqual(value) {
    this._setOption("greaterThanOrEqual", value);
  }
  get lessThan() {
    return this._getOption("lessThan");
  }
  set lessThan(value) {
    this._setOption("lessThan", value);
  }
  get lessThanOrEqual() {
    return this._getOption("lessThanOrEqual");
  }
  set lessThanOrEqual(value) {
    this._setOption("lessThanOrEqual", value);
  }
  get notContains() {
    return this._getOption("notContains");
  }
  set notContains(value) {
    this._setOption("notContains", value);
  }
  get notEqual() {
    return this._getOption("notEqual");
  }
  set notEqual(value) {
    this._setOption("notEqual", value);
  }
  get startsWith() {
    return this._getOption("startsWith");
  }
  set startsWith(value) {
    this._setOption("startsWith", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGanttFilterRowOperationDescriptions_BaseFactory;
    return function DxoGanttFilterRowOperationDescriptions_Factory(__ngFactoryType__) {
      return (ɵDxoGanttFilterRowOperationDescriptions_BaseFactory || (ɵDxoGanttFilterRowOperationDescriptions_BaseFactory = ɵɵgetInheritedFactory(_DxoGanttFilterRowOperationDescriptions)))(__ngFactoryType__ || _DxoGanttFilterRowOperationDescriptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGanttFilterRowOperationDescriptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGanttFilterRowOperationDescriptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttFilterRowOperationDescriptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoOperationDescriptionsComponent = class _DxoOperationDescriptionsComponent extends DxoGanttFilterRowOperationDescriptions {
  get _optionPath() {
    return "operationDescriptions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoOperationDescriptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoOperationDescriptionsComponent,
    selectors: [["dxo-operation-descriptions"]],
    inputs: {
      between: "between",
      contains: "contains",
      endsWith: "endsWith",
      equal: "equal",
      greaterThan: "greaterThan",
      greaterThanOrEqual: "greaterThanOrEqual",
      lessThan: "lessThan",
      lessThanOrEqual: "lessThanOrEqual",
      notContains: "notContains",
      notEqual: "notEqual",
      startsWith: "startsWith"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoOperationDescriptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-operation-descriptions",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["between", "contains", "endsWith", "equal", "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual", "notContains", "notEqual", "startsWith"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoOperationDescriptionsModule = class _DxoOperationDescriptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoOperationDescriptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOperationDescriptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoOperationDescriptionsModule,
    declarations: [DxoOperationDescriptionsComponent],
    exports: [DxoOperationDescriptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoOperationDescriptionsComponent],
      exports: [DxoOperationDescriptionsComponent]
    }]
  }], null, null);
})();
var DxoOptionsComponent = class _DxoOptionsComponent extends DxoButtonOptions {
  get _optionPath() {
    return "options";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoOptionsComponent,
    selectors: [["dxo-options"]],
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      disabled: "disabled",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      icon: "icon",
      onClick: "onClick",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      rtlEnabled: "rtlEnabled",
      stylingMode: "stylingMode",
      tabIndex: "tabIndex",
      template: "template",
      text: "text",
      type: "type",
      useSubmitBehavior: "useSubmitBehavior",
      validationGroup: "validationGroup",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "disabled", "elementAttr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "icon", "onClick", "onContentReady", "onDisposing", "onInitialized", "onOptionChanged", "rtlEnabled", "stylingMode", "tabIndex", "template", "text", "type", "useSubmitBehavior", "validationGroup", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoOptionsModule = class _DxoOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoOptionsModule,
    declarations: [DxoOptionsComponent],
    exports: [DxoOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoOptionsComponent],
      exports: [DxoOptionsComponent]
    }]
  }], null, null);
})();
var DxoPageSizeComponent = class _DxoPageSizeComponent extends NestedOption {
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  heightChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  widthChange;
  get _optionPath() {
    return "pageSize";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "heightChange"
    }, {
      emit: "widthChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPageSizeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPageSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPageSizeComponent,
    selectors: [["dxo-page-size"]],
    contentQueries: function DxoPageSizeComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      height: "height",
      items: "items",
      width: "width"
    },
    outputs: {
      heightChange: "heightChange",
      widthChange: "widthChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPageSizeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPageSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-page-size",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    height: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    heightChange: [{
      type: Output
    }],
    widthChange: [{
      type: Output
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoPageSizeModule = class _DxoPageSizeModule {
  /** @nocollapse */
  static ɵfac = function DxoPageSizeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPageSizeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPageSizeModule,
    declarations: [DxoPageSizeComponent],
    exports: [DxoPageSizeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPageSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPageSizeComponent],
      exports: [DxoPageSizeComponent]
    }]
  }], null, null);
})();
var DxoPager = class _DxoPager extends NestedOption {
  get allowedPageSizes() {
    return this._getOption("allowedPageSizes");
  }
  set allowedPageSizes(value) {
    this._setOption("allowedPageSizes", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get infoText() {
    return this._getOption("infoText");
  }
  set infoText(value) {
    this._setOption("infoText", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get showInfo() {
    return this._getOption("showInfo");
  }
  set showInfo(value) {
    this._setOption("showInfo", value);
  }
  get showNavigationButtons() {
    return this._getOption("showNavigationButtons");
  }
  set showNavigationButtons(value) {
    this._setOption("showNavigationButtons", value);
  }
  get showPageSizeSelector() {
    return this._getOption("showPageSizeSelector");
  }
  set showPageSizeSelector(value) {
    this._setOption("showPageSizeSelector", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoPager_BaseFactory;
    return function DxoPager_Factory(__ngFactoryType__) {
      return (ɵDxoPager_BaseFactory || (ɵDxoPager_BaseFactory = ɵɵgetInheritedFactory(_DxoPager)))(__ngFactoryType__ || _DxoPager);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPager,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPager_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPager, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoPagerComponent = class _DxoPagerComponent extends DxoPager {
  get _optionPath() {
    return "pager";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPagerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPagerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPagerComponent,
    selectors: [["dxo-pager"]],
    inputs: {
      allowedPageSizes: "allowedPageSizes",
      displayMode: "displayMode",
      infoText: "infoText",
      label: "label",
      showInfo: "showInfo",
      showNavigationButtons: "showNavigationButtons",
      showPageSizeSelector: "showPageSizeSelector",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPagerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-pager",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowedPageSizes", "displayMode", "infoText", "label", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoPagerModule = class _DxoPagerModule {
  /** @nocollapse */
  static ɵfac = function DxoPagerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPagerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPagerModule,
    declarations: [DxoPagerComponent],
    exports: [DxoPagerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPagerComponent],
      exports: [DxoPagerComponent]
    }]
  }], null, null);
})();
var DxoPagingComponent = class _DxoPagingComponent extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get pageIndex() {
    return this._getOption("pageIndex");
  }
  set pageIndex(value) {
    this._setOption("pageIndex", value);
  }
  get pageSize() {
    return this._getOption("pageSize");
  }
  set pageSize(value) {
    this._setOption("pageSize", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  pageIndexChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  pageSizeChange;
  get _optionPath() {
    return "paging";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "pageIndexChange"
    }, {
      emit: "pageSizeChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPagingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPagingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPagingComponent,
    selectors: [["dxo-paging"]],
    inputs: {
      enabled: "enabled",
      pageIndex: "pageIndex",
      pageSize: "pageSize"
    },
    outputs: {
      pageIndexChange: "pageIndexChange",
      pageSizeChange: "pageSizeChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPagingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-paging",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    enabled: [{
      type: Input
    }],
    pageIndex: [{
      type: Input
    }],
    pageSize: [{
      type: Input
    }],
    pageIndexChange: [{
      type: Output
    }],
    pageSizeChange: [{
      type: Output
    }]
  });
})();
var DxoPagingModule = class _DxoPagingModule {
  /** @nocollapse */
  static ɵfac = function DxoPagingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPagingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPagingModule,
    declarations: [DxoPagingComponent],
    exports: [DxoPagingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPagingComponent],
      exports: [DxoPagingComponent]
    }]
  }], null, null);
})();
var DxiPaneComponent = class _DxiPaneComponent extends CollectionNestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "panes";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiPaneComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiPaneComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiPaneComponent,
    selectors: [["dxi-pane"]],
    inputs: {
      backgroundColor: "backgroundColor",
      border: "border",
      height: "height",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiPaneComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiPaneComponent, [{
    type: Component,
    args: [{
      selector: "dxi-pane",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    border: [{
      type: Input
    }],
    height: [{
      type: Input
    }],
    name: [{
      type: Input
    }]
  });
})();
var DxiPaneModule = class _DxiPaneModule {
  /** @nocollapse */
  static ɵfac = function DxiPaneModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiPaneModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiPaneModule,
    declarations: [DxiPaneComponent],
    exports: [DxiPaneComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiPaneModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiPaneComponent],
      exports: [DxiPaneComponent]
    }]
  }], null, null);
})();
var DxoPermissionsComponent = class _DxoPermissionsComponent extends NestedOption {
  get copy() {
    return this._getOption("copy");
  }
  set copy(value) {
    this._setOption("copy", value);
  }
  get create() {
    return this._getOption("create");
  }
  set create(value) {
    this._setOption("create", value);
  }
  get delete() {
    return this._getOption("delete");
  }
  set delete(value) {
    this._setOption("delete", value);
  }
  get download() {
    return this._getOption("download");
  }
  set download(value) {
    this._setOption("download", value);
  }
  get move() {
    return this._getOption("move");
  }
  set move(value) {
    this._setOption("move", value);
  }
  get rename() {
    return this._getOption("rename");
  }
  set rename(value) {
    this._setOption("rename", value);
  }
  get upload() {
    return this._getOption("upload");
  }
  set upload(value) {
    this._setOption("upload", value);
  }
  get _optionPath() {
    return "permissions";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPermissionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPermissionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPermissionsComponent,
    selectors: [["dxo-permissions"]],
    inputs: {
      copy: "copy",
      create: "create",
      delete: "delete",
      download: "download",
      move: "move",
      rename: "rename",
      upload: "upload"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPermissionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPermissionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-permissions",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    copy: [{
      type: Input
    }],
    create: [{
      type: Input
    }],
    delete: [{
      type: Input
    }],
    download: [{
      type: Input
    }],
    move: [{
      type: Input
    }],
    rename: [{
      type: Input
    }],
    upload: [{
      type: Input
    }]
  });
})();
var DxoPermissionsModule = class _DxoPermissionsModule {
  /** @nocollapse */
  static ɵfac = function DxoPermissionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPermissionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPermissionsModule,
    declarations: [DxoPermissionsComponent],
    exports: [DxoPermissionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPermissionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPermissionsComponent],
      exports: [DxoPermissionsComponent]
    }]
  }], null, null);
})();
var DxoPointComponent = class _DxoPointComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get symbol() {
    return this._getOption("symbol");
  }
  set symbol(value) {
    this._setOption("symbol", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "point";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPointComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPointComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPointComponent,
    selectors: [["dxo-point"]],
    inputs: {
      border: "border",
      color: "color",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      image: "image",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      size: "size",
      symbol: "symbol",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPointComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPointComponent, [{
    type: Component,
    args: [{
      selector: "dxo-point",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    hoverMode: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    image: [{
      type: Input
    }],
    selectionMode: [{
      type: Input
    }],
    selectionStyle: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    symbol: [{
      type: Input
    }],
    visible: [{
      type: Input
    }]
  });
})();
var DxoPointModule = class _DxoPointModule {
  /** @nocollapse */
  static ɵfac = function DxoPointModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPointModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPointModule,
    declarations: [DxoPointComponent],
    exports: [DxoPointComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPointModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPointComponent],
      exports: [DxoPointComponent]
    }]
  }], null, null);
})();
var DxoPopupComponent = class _DxoPopupComponent extends DxoPopupOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  heightChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  positionChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visibleChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  widthChange;
  get _optionPath() {
    return "popup";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "heightChange"
    }, {
      emit: "positionChange"
    }, {
      emit: "visibleChange"
    }, {
      emit: "widthChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPopupComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPopupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPopupComponent,
    selectors: [["dxo-popup"]],
    contentQueries: function DxoPopupComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      animation: "animation",
      closeOnOutsideClick: "closeOnOutsideClick",
      container: "container",
      contentTemplate: "contentTemplate",
      deferRendering: "deferRendering",
      disabled: "disabled",
      dragAndResizeArea: "dragAndResizeArea",
      dragEnabled: "dragEnabled",
      dragOutsideBoundary: "dragOutsideBoundary",
      enableBodyScroll: "enableBodyScroll",
      focusStateEnabled: "focusStateEnabled",
      fullScreen: "fullScreen",
      height: "height",
      hideOnOutsideClick: "hideOnOutsideClick",
      hideOnParentScroll: "hideOnParentScroll",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      maxHeight: "maxHeight",
      maxWidth: "maxWidth",
      minHeight: "minHeight",
      minWidth: "minWidth",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onHidden: "onHidden",
      onHiding: "onHiding",
      onInitialized: "onInitialized",
      onOptionChanged: "onOptionChanged",
      onResize: "onResize",
      onResizeEnd: "onResizeEnd",
      onResizeStart: "onResizeStart",
      onShowing: "onShowing",
      onShown: "onShown",
      onTitleRendered: "onTitleRendered",
      position: "position",
      resizeEnabled: "resizeEnabled",
      restorePosition: "restorePosition",
      rtlEnabled: "rtlEnabled",
      shading: "shading",
      shadingColor: "shadingColor",
      showCloseButton: "showCloseButton",
      showTitle: "showTitle",
      tabIndex: "tabIndex",
      title: "title",
      titleTemplate: "titleTemplate",
      toolbarItems: "toolbarItems",
      visible: "visible",
      width: "width",
      wrapperAttr: "wrapperAttr"
    },
    outputs: {
      heightChange: "heightChange",
      positionChange: "positionChange",
      visibleChange: "visibleChange",
      widthChange: "widthChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPopupComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-popup",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "enableBodyScroll", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    heightChange: [{
      type: Output
    }],
    positionChange: [{
      type: Output
    }],
    visibleChange: [{
      type: Output
    }],
    widthChange: [{
      type: Output
    }],
    toolbarItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiToolbarItemComponent)]
    }]
  });
})();
var DxoPopupModule = class _DxoPopupModule {
  /** @nocollapse */
  static ɵfac = function DxoPopupModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPopupModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPopupModule,
    declarations: [DxoPopupComponent],
    exports: [DxoPopupComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPopupComponent],
      exports: [DxoPopupComponent]
    }]
  }], null, null);
})();
var DxoPositionConfig = class _DxoPositionConfig extends NestedOption {
  get at() {
    return this._getOption("at");
  }
  set at(value) {
    this._setOption("at", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get boundaryOffset() {
    return this._getOption("boundaryOffset");
  }
  set boundaryOffset(value) {
    this._setOption("boundaryOffset", value);
  }
  get collision() {
    return this._getOption("collision");
  }
  set collision(value) {
    this._setOption("collision", value);
  }
  get my() {
    return this._getOption("my");
  }
  set my(value) {
    this._setOption("my", value);
  }
  get of() {
    return this._getOption("of");
  }
  set of(value) {
    this._setOption("of", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoPositionConfig_BaseFactory;
    return function DxoPositionConfig_Factory(__ngFactoryType__) {
      return (ɵDxoPositionConfig_BaseFactory || (ɵDxoPositionConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoPositionConfig)))(__ngFactoryType__ || _DxoPositionConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPositionConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPositionConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoPositionComponent = class _DxoPositionComponent extends DxoPositionConfig {
  get _optionPath() {
    return "position";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPositionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPositionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPositionComponent,
    selectors: [["dxo-position"]],
    inputs: {
      at: "at",
      boundary: "boundary",
      boundaryOffset: "boundaryOffset",
      collision: "collision",
      my: "my",
      of: "of",
      offset: "offset"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPositionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-position",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["at", "boundary", "boundaryOffset", "collision", "my", "of", "offset"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoPositionModule = class _DxoPositionModule {
  /** @nocollapse */
  static ɵfac = function DxoPositionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPositionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPositionModule,
    declarations: [DxoPositionComponent],
    exports: [DxoPositionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPositionComponent],
      exports: [DxoPositionComponent]
    }]
  }], null, null);
})();
var DxoVectorMapProjectionConfig = class _DxoVectorMapProjectionConfig extends NestedOption {
  get aspectRatio() {
    return this._getOption("aspectRatio");
  }
  set aspectRatio(value) {
    this._setOption("aspectRatio", value);
  }
  get from() {
    return this._getOption("from");
  }
  set from(value) {
    this._setOption("from", value);
  }
  get to() {
    return this._getOption("to");
  }
  set to(value) {
    this._setOption("to", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoVectorMapProjectionConfig_BaseFactory;
    return function DxoVectorMapProjectionConfig_Factory(__ngFactoryType__) {
      return (ɵDxoVectorMapProjectionConfig_BaseFactory || (ɵDxoVectorMapProjectionConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoVectorMapProjectionConfig)))(__ngFactoryType__ || _DxoVectorMapProjectionConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoVectorMapProjectionConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoVectorMapProjectionConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVectorMapProjectionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoProjectionComponent = class _DxoProjectionComponent extends DxoVectorMapProjectionConfig {
  get _optionPath() {
    return "projection";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoProjectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoProjectionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoProjectionComponent,
    selectors: [["dxo-projection"]],
    inputs: {
      aspectRatio: "aspectRatio",
      from: "from",
      to: "to"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoProjectionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProjectionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-projection",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aspectRatio", "from", "to"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoProjectionModule = class _DxoProjectionModule {
  /** @nocollapse */
  static ɵfac = function DxoProjectionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoProjectionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoProjectionModule,
    declarations: [DxoProjectionComponent],
    exports: [DxoProjectionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProjectionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoProjectionComponent],
      exports: [DxoProjectionComponent]
    }]
  }], null, null);
})();
var DxoPropertiesPanelComponent = class _DxoPropertiesPanelComponent extends NestedOption {
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get visibility() {
    return this._getOption("visibility");
  }
  set visibility(value) {
    this._setOption("visibility", value);
  }
  get _optionPath() {
    return "propertiesPanel";
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoPropertiesPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPropertiesPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoPropertiesPanelComponent,
    selectors: [["dxo-properties-panel"]],
    contentQueries: function DxoPropertiesPanelComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
      }
    },
    inputs: {
      tabs: "tabs",
      visibility: "visibility"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoPropertiesPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPropertiesPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-properties-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    tabs: [{
      type: Input
    }],
    visibility: [{
      type: Input
    }],
    tabsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiTabComponent)]
    }]
  });
})();
var DxoPropertiesPanelModule = class _DxoPropertiesPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoPropertiesPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoPropertiesPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoPropertiesPanelModule,
    declarations: [DxoPropertiesPanelComponent],
    exports: [DxoPropertiesPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPropertiesPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoPropertiesPanelComponent],
      exports: [DxoPropertiesPanelComponent]
    }]
  }], null, null);
})();
var DxoProviderConfigComponent = class _DxoProviderConfigComponent extends NestedOption {
  get mapId() {
    return this._getOption("mapId");
  }
  set mapId(value) {
    this._setOption("mapId", value);
  }
  get useAdvancedMarkers() {
    return this._getOption("useAdvancedMarkers");
  }
  set useAdvancedMarkers(value) {
    this._setOption("useAdvancedMarkers", value);
  }
  get _optionPath() {
    return "providerConfig";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoProviderConfigComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoProviderConfigComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoProviderConfigComponent,
    selectors: [["dxo-provider-config"]],
    inputs: {
      mapId: "mapId",
      useAdvancedMarkers: "useAdvancedMarkers"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoProviderConfigComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProviderConfigComponent, [{
    type: Component,
    args: [{
      selector: "dxo-provider-config",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    mapId: [{
      type: Input
    }],
    useAdvancedMarkers: [{
      type: Input
    }]
  });
})();
var DxoProviderConfigModule = class _DxoProviderConfigModule {
  /** @nocollapse */
  static ɵfac = function DxoProviderConfigModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoProviderConfigModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoProviderConfigModule,
    declarations: [DxoProviderConfigComponent],
    exports: [DxoProviderConfigComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProviderConfigModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoProviderConfigComponent],
      exports: [DxoProviderConfigComponent]
    }]
  }], null, null);
})();
var DxiRangeComponent = class _DxiRangeComponent extends CollectionNestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get _optionPath() {
    return "ranges";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiRangeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiRangeComponent,
    selectors: [["dxi-range"]],
    inputs: {
      color: "color",
      endValue: "endValue",
      startValue: "startValue"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiRangeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-range",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    endValue: [{
      type: Input
    }],
    startValue: [{
      type: Input
    }]
  });
})();
var DxiRangeModule = class _DxiRangeModule {
  /** @nocollapse */
  static ɵfac = function DxiRangeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRangeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiRangeModule,
    declarations: [DxiRangeComponent],
    exports: [DxiRangeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiRangeComponent],
      exports: [DxiRangeComponent]
    }]
  }], null, null);
})();
var DxoRangeContainerComponent = class _DxoRangeContainerComponent extends NestedOption {
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get ranges() {
    return this._getOption("ranges");
  }
  set ranges(value) {
    this._setOption("ranges", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get _optionPath() {
    return "rangeContainer";
  }
  get rangesChildren() {
    return this._getOption("ranges");
  }
  set rangesChildren(value) {
    this.setChildren("ranges", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoRangeContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangeContainerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoRangeContainerComponent,
    selectors: [["dxo-range-container"]],
    contentQueries: function DxoRangeContainerComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiRangeComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rangesChildren = _t);
      }
    },
    inputs: {
      backgroundColor: "backgroundColor",
      offset: "offset",
      orientation: "orientation",
      palette: "palette",
      paletteExtensionMode: "paletteExtensionMode",
      ranges: "ranges",
      width: "width",
      horizontalOrientation: "horizontalOrientation",
      verticalOrientation: "verticalOrientation"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoRangeContainerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeContainerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-range-container",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    backgroundColor: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }],
    palette: [{
      type: Input
    }],
    paletteExtensionMode: [{
      type: Input
    }],
    ranges: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    horizontalOrientation: [{
      type: Input
    }],
    verticalOrientation: [{
      type: Input
    }],
    rangesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiRangeComponent)]
    }]
  });
})();
var DxoRangeContainerModule = class _DxoRangeContainerModule {
  /** @nocollapse */
  static ɵfac = function DxoRangeContainerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangeContainerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoRangeContainerModule,
    declarations: [DxoRangeContainerComponent],
    exports: [DxoRangeContainerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeContainerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoRangeContainerComponent],
      exports: [DxoRangeContainerComponent]
    }]
  }], null, null);
})();
var DxoRangeareaComponent = class _DxoRangeareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "rangearea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoRangeareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangeareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoRangeareaComponent,
    selectors: [["dxo-rangearea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoRangeareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-rangearea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoRangeareaModule = class _DxoRangeareaModule {
  /** @nocollapse */
  static ɵfac = function DxoRangeareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangeareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoRangeareaModule,
    declarations: [DxoRangeareaComponent],
    exports: [DxoRangeareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoRangeareaComponent],
      exports: [DxoRangeareaComponent]
    }]
  }], null, null);
})();
var DxoRangebarComponent = class _DxoRangebarComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "rangebar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoRangebarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangebarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoRangebarComponent,
    selectors: [["dxo-rangebar"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoRangebarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangebarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-rangebar",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoRangebarModule = class _DxoRangebarModule {
  /** @nocollapse */
  static ɵfac = function DxoRangebarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRangebarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoRangebarModule,
    declarations: [DxoRangebarComponent],
    exports: [DxoRangebarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangebarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoRangebarComponent],
      exports: [DxoRangebarComponent]
    }]
  }], null, null);
})();
var DxoReductionComponent = class _DxoReductionComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get level() {
    return this._getOption("level");
  }
  set level(value) {
    this._setOption("level", value);
  }
  get _optionPath() {
    return "reduction";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoReductionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoReductionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoReductionComponent,
    selectors: [["dxo-reduction"]],
    inputs: {
      color: "color",
      level: "level"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoReductionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoReductionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-reduction",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    level: [{
      type: Input
    }]
  });
})();
var DxoReductionModule = class _DxoReductionModule {
  /** @nocollapse */
  static ɵfac = function DxoReductionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoReductionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoReductionModule,
    declarations: [DxoReductionComponent],
    exports: [DxoReductionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoReductionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoReductionComponent],
      exports: [DxoReductionComponent]
    }]
  }], null, null);
})();
var DxoRemoteOperationsComponent = class _DxoRemoteOperationsComponent extends NestedOption {
  get filtering() {
    return this._getOption("filtering");
  }
  set filtering(value) {
    this._setOption("filtering", value);
  }
  get grouping() {
    return this._getOption("grouping");
  }
  set grouping(value) {
    this._setOption("grouping", value);
  }
  get groupPaging() {
    return this._getOption("groupPaging");
  }
  set groupPaging(value) {
    this._setOption("groupPaging", value);
  }
  get paging() {
    return this._getOption("paging");
  }
  set paging(value) {
    this._setOption("paging", value);
  }
  get sorting() {
    return this._getOption("sorting");
  }
  set sorting(value) {
    this._setOption("sorting", value);
  }
  get summary() {
    return this._getOption("summary");
  }
  set summary(value) {
    this._setOption("summary", value);
  }
  get _optionPath() {
    return "remoteOperations";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoRemoteOperationsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRemoteOperationsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoRemoteOperationsComponent,
    selectors: [["dxo-remote-operations"]],
    inputs: {
      filtering: "filtering",
      grouping: "grouping",
      groupPaging: "groupPaging",
      paging: "paging",
      sorting: "sorting",
      summary: "summary"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoRemoteOperationsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRemoteOperationsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-remote-operations",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    filtering: [{
      type: Input
    }],
    grouping: [{
      type: Input
    }],
    groupPaging: [{
      type: Input
    }],
    paging: [{
      type: Input
    }],
    sorting: [{
      type: Input
    }],
    summary: [{
      type: Input
    }]
  });
})();
var DxoRemoteOperationsModule = class _DxoRemoteOperationsModule {
  /** @nocollapse */
  static ɵfac = function DxoRemoteOperationsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRemoteOperationsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoRemoteOperationsModule,
    declarations: [DxoRemoteOperationsComponent],
    exports: [DxoRemoteOperationsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRemoteOperationsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoRemoteOperationsComponent],
      exports: [DxoRemoteOperationsComponent]
    }]
  }], null, null);
})();
var DxoResourceAssignmentsComponent = class _DxoResourceAssignmentsComponent extends NestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get resourceIdExpr() {
    return this._getOption("resourceIdExpr");
  }
  set resourceIdExpr(value) {
    this._setOption("resourceIdExpr", value);
  }
  get taskIdExpr() {
    return this._getOption("taskIdExpr");
  }
  set taskIdExpr(value) {
    this._setOption("taskIdExpr", value);
  }
  get _optionPath() {
    return "resourceAssignments";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoResourceAssignmentsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoResourceAssignmentsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoResourceAssignmentsComponent,
    selectors: [["dxo-resource-assignments"]],
    inputs: {
      dataSource: "dataSource",
      keyExpr: "keyExpr",
      resourceIdExpr: "resourceIdExpr",
      taskIdExpr: "taskIdExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoResourceAssignmentsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourceAssignmentsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-resource-assignments",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    dataSource: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    resourceIdExpr: [{
      type: Input
    }],
    taskIdExpr: [{
      type: Input
    }]
  });
})();
var DxoResourceAssignmentsModule = class _DxoResourceAssignmentsModule {
  /** @nocollapse */
  static ɵfac = function DxoResourceAssignmentsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoResourceAssignmentsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoResourceAssignmentsModule,
    declarations: [DxoResourceAssignmentsComponent],
    exports: [DxoResourceAssignmentsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourceAssignmentsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoResourceAssignmentsComponent],
      exports: [DxoResourceAssignmentsComponent]
    }]
  }], null, null);
})();
var DxiResourceComponent = class _DxiResourceComponent extends CollectionNestedOption {
  get allowMultiple() {
    return this._getOption("allowMultiple");
  }
  set allowMultiple(value) {
    this._setOption("allowMultiple", value);
  }
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get fieldExpr() {
    return this._getOption("fieldExpr");
  }
  set fieldExpr(value) {
    this._setOption("fieldExpr", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get useColorAsDefault() {
    return this._getOption("useColorAsDefault");
  }
  set useColorAsDefault(value) {
    this._setOption("useColorAsDefault", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
  get _optionPath() {
    return "resources";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiResourceComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiResourceComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiResourceComponent,
    selectors: [["dxi-resource"]],
    inputs: {
      allowMultiple: "allowMultiple",
      colorExpr: "colorExpr",
      dataSource: "dataSource",
      displayExpr: "displayExpr",
      fieldExpr: "fieldExpr",
      label: "label",
      useColorAsDefault: "useColorAsDefault",
      valueExpr: "valueExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiResourceComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiResourceComponent, [{
    type: Component,
    args: [{
      selector: "dxi-resource",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowMultiple: [{
      type: Input
    }],
    colorExpr: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    displayExpr: [{
      type: Input
    }],
    fieldExpr: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    useColorAsDefault: [{
      type: Input
    }],
    valueExpr: [{
      type: Input
    }]
  });
})();
var DxiResourceModule = class _DxiResourceModule {
  /** @nocollapse */
  static ɵfac = function DxiResourceModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiResourceModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiResourceModule,
    declarations: [DxiResourceComponent],
    exports: [DxiResourceComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiResourceModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiResourceComponent],
      exports: [DxiResourceComponent]
    }]
  }], null, null);
})();
var DxoResourcesComponent = class _DxoResourcesComponent extends NestedOption {
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get _optionPath() {
    return "resources";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoResourcesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoResourcesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoResourcesComponent,
    selectors: [["dxo-resources"]],
    inputs: {
      colorExpr: "colorExpr",
      dataSource: "dataSource",
      keyExpr: "keyExpr",
      textExpr: "textExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoResourcesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourcesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-resources",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    colorExpr: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    textExpr: [{
      type: Input
    }]
  });
})();
var DxoResourcesModule = class _DxoResourcesModule {
  /** @nocollapse */
  static ɵfac = function DxoResourcesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoResourcesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoResourcesModule,
    declarations: [DxoResourcesComponent],
    exports: [DxoResourcesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourcesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoResourcesComponent],
      exports: [DxoResourcesComponent]
    }]
  }], null, null);
})();
var DxiRouteComponent = class _DxiRouteComponent extends CollectionNestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get locations() {
    return this._getOption("locations");
  }
  set locations(value) {
    this._setOption("locations", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get weight() {
    return this._getOption("weight");
  }
  set weight(value) {
    this._setOption("weight", value);
  }
  get _optionPath() {
    return "routes";
  }
  get locationsChildren() {
    return this._getOption("locations");
  }
  set locationsChildren(value) {
    this.setChildren("locations", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiRouteComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRouteComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiRouteComponent,
    selectors: [["dxi-route"]],
    contentQueries: function DxiRouteComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationsChildren = _t);
      }
    },
    inputs: {
      color: "color",
      locations: "locations",
      mode: "mode",
      opacity: "opacity",
      weight: "weight"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiRouteComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRouteComponent, [{
    type: Component,
    args: [{
      selector: "dxi-route",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    locations: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    weight: [{
      type: Input
    }],
    locationsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiLocationComponent)]
    }]
  });
})();
var DxiRouteModule = class _DxiRouteModule {
  /** @nocollapse */
  static ɵfac = function DxiRouteModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRouteModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiRouteModule,
    declarations: [DxiRouteComponent],
    exports: [DxiRouteComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRouteModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiRouteComponent],
      exports: [DxiRouteComponent]
    }]
  }], null, null);
})();
var DxoRowDraggingComponent = class _DxoRowDraggingComponent extends NestedOption {
  get allowDropInsideItem() {
    return this._getOption("allowDropInsideItem");
  }
  set allowDropInsideItem(value) {
    this._setOption("allowDropInsideItem", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get cursorOffset() {
    return this._getOption("cursorOffset");
  }
  set cursorOffset(value) {
    this._setOption("cursorOffset", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get dragDirection() {
    return this._getOption("dragDirection");
  }
  set dragDirection(value) {
    this._setOption("dragDirection", value);
  }
  get dragTemplate() {
    return this._getOption("dragTemplate");
  }
  set dragTemplate(value) {
    this._setOption("dragTemplate", value);
  }
  get dropFeedbackMode() {
    return this._getOption("dropFeedbackMode");
  }
  set dropFeedbackMode(value) {
    this._setOption("dropFeedbackMode", value);
  }
  get filter() {
    return this._getOption("filter");
  }
  set filter(value) {
    this._setOption("filter", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get handle() {
    return this._getOption("handle");
  }
  set handle(value) {
    this._setOption("handle", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDragChange() {
    return this._getOption("onDragChange");
  }
  set onDragChange(value) {
    this._setOption("onDragChange", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get onReorder() {
    return this._getOption("onReorder");
  }
  set onReorder(value) {
    this._setOption("onReorder", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get showDragIcons() {
    return this._getOption("showDragIcons");
  }
  set showDragIcons(value) {
    this._setOption("showDragIcons", value);
  }
  get _optionPath() {
    return "rowDragging";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoRowDraggingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRowDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoRowDraggingComponent,
    selectors: [["dxo-row-dragging"]],
    inputs: {
      allowDropInsideItem: "allowDropInsideItem",
      allowReordering: "allowReordering",
      autoScroll: "autoScroll",
      boundary: "boundary",
      container: "container",
      cursorOffset: "cursorOffset",
      data: "data",
      dragDirection: "dragDirection",
      dragTemplate: "dragTemplate",
      dropFeedbackMode: "dropFeedbackMode",
      filter: "filter",
      group: "group",
      handle: "handle",
      onAdd: "onAdd",
      onDragChange: "onDragChange",
      onDragEnd: "onDragEnd",
      onDragMove: "onDragMove",
      onDragStart: "onDragStart",
      onRemove: "onRemove",
      onReorder: "onReorder",
      scrollSensitivity: "scrollSensitivity",
      scrollSpeed: "scrollSpeed",
      showDragIcons: "showDragIcons"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoRowDraggingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRowDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-row-dragging",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowDropInsideItem: [{
      type: Input
    }],
    allowReordering: [{
      type: Input
    }],
    autoScroll: [{
      type: Input
    }],
    boundary: [{
      type: Input
    }],
    container: [{
      type: Input
    }],
    cursorOffset: [{
      type: Input
    }],
    data: [{
      type: Input
    }],
    dragDirection: [{
      type: Input
    }],
    dragTemplate: [{
      type: Input
    }],
    dropFeedbackMode: [{
      type: Input
    }],
    filter: [{
      type: Input
    }],
    group: [{
      type: Input
    }],
    handle: [{
      type: Input
    }],
    onAdd: [{
      type: Input
    }],
    onDragChange: [{
      type: Input
    }],
    onDragEnd: [{
      type: Input
    }],
    onDragMove: [{
      type: Input
    }],
    onDragStart: [{
      type: Input
    }],
    onRemove: [{
      type: Input
    }],
    onReorder: [{
      type: Input
    }],
    scrollSensitivity: [{
      type: Input
    }],
    scrollSpeed: [{
      type: Input
    }],
    showDragIcons: [{
      type: Input
    }]
  });
})();
var DxoRowDraggingModule = class _DxoRowDraggingModule {
  /** @nocollapse */
  static ɵfac = function DxoRowDraggingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoRowDraggingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoRowDraggingModule,
    declarations: [DxoRowDraggingComponent],
    exports: [DxoRowDraggingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRowDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoRowDraggingComponent],
      exports: [DxoRowDraggingComponent]
    }]
  }], null, null);
})();
var DxiRowComponent = class _DxiRowComponent extends CollectionNestedOption {
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get _optionPath() {
    return "rows";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiRowComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiRowComponent,
    selectors: [["dxi-row"]],
    inputs: {
      baseSize: "baseSize",
      ratio: "ratio",
      screen: "screen",
      shrink: "shrink"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiRowComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRowComponent, [{
    type: Component,
    args: [{
      selector: "dxi-row",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    baseSize: [{
      type: Input
    }],
    ratio: [{
      type: Input
    }],
    screen: [{
      type: Input
    }],
    shrink: [{
      type: Input
    }]
  });
})();
var DxiRowModule = class _DxiRowModule {
  /** @nocollapse */
  static ɵfac = function DxiRowModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiRowModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiRowModule,
    declarations: [DxiRowComponent],
    exports: [DxiRowComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRowModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiRowComponent],
      exports: [DxiRowComponent]
    }]
  }], null, null);
})();
var DxoScaleTypeRangeComponent = class _DxoScaleTypeRangeComponent extends NestedOption {
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get _optionPath() {
    return "scaleTypeRange";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoScaleTypeRangeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScaleTypeRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoScaleTypeRangeComponent,
    selectors: [["dxo-scale-type-range"]],
    inputs: {
      max: "max",
      min: "min"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoScaleTypeRangeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleTypeRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scale-type-range",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    max: [{
      type: Input
    }],
    min: [{
      type: Input
    }]
  });
})();
var DxoScaleTypeRangeModule = class _DxoScaleTypeRangeModule {
  /** @nocollapse */
  static ɵfac = function DxoScaleTypeRangeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScaleTypeRangeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoScaleTypeRangeModule,
    declarations: [DxoScaleTypeRangeComponent],
    exports: [DxoScaleTypeRangeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleTypeRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoScaleTypeRangeComponent],
      exports: [DxoScaleTypeRangeComponent]
    }]
  }], null, null);
})();
var DxoScaleComponent = class _DxoScaleComponent extends NestedOption {
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get customMinorTicks() {
    return this._getOption("customMinorTicks");
  }
  set customMinorTicks(value) {
    this._setOption("customMinorTicks", value);
  }
  get customTicks() {
    return this._getOption("customTicks");
  }
  set customTicks(value) {
    this._setOption("customTicks", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get scaleDivisionFactor() {
    return this._getOption("scaleDivisionFactor");
  }
  set scaleDivisionFactor(value) {
    this._setOption("scaleDivisionFactor", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get aggregateByCategory() {
    return this._getOption("aggregateByCategory");
  }
  set aggregateByCategory(value) {
    this._setOption("aggregateByCategory", value);
  }
  get aggregationGroupWidth() {
    return this._getOption("aggregationGroupWidth");
  }
  set aggregationGroupWidth(value) {
    this._setOption("aggregationGroupWidth", value);
  }
  get aggregationInterval() {
    return this._getOption("aggregationInterval");
  }
  set aggregationInterval(value) {
    this._setOption("aggregationInterval", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get holidays() {
    return this._getOption("holidays");
  }
  set holidays(value) {
    this._setOption("holidays", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get marker() {
    return this._getOption("marker");
  }
  set marker(value) {
    this._setOption("marker", value);
  }
  get maxRange() {
    return this._getOption("maxRange");
  }
  set maxRange(value) {
    this._setOption("maxRange", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minRange() {
    return this._getOption("minRange");
  }
  set minRange(value) {
    this._setOption("minRange", value);
  }
  get placeholderHeight() {
    return this._getOption("placeholderHeight");
  }
  set placeholderHeight(value) {
    this._setOption("placeholderHeight", value);
  }
  get showCustomBoundaryTicks() {
    return this._getOption("showCustomBoundaryTicks");
  }
  set showCustomBoundaryTicks(value) {
    this._setOption("showCustomBoundaryTicks", value);
  }
  get singleWorkdays() {
    return this._getOption("singleWorkdays");
  }
  set singleWorkdays(value) {
    this._setOption("singleWorkdays", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get workdaysOnly() {
    return this._getOption("workdaysOnly");
  }
  set workdaysOnly(value) {
    this._setOption("workdaysOnly", value);
  }
  get workWeek() {
    return this._getOption("workWeek");
  }
  set workWeek(value) {
    this._setOption("workWeek", value);
  }
  get _optionPath() {
    return "scale";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoScaleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScaleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoScaleComponent,
    selectors: [["dxo-scale"]],
    contentQueries: function DxoScaleComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
      }
    },
    inputs: {
      allowDecimals: "allowDecimals",
      customMinorTicks: "customMinorTicks",
      customTicks: "customTicks",
      endValue: "endValue",
      label: "label",
      minorTick: "minorTick",
      minorTickInterval: "minorTickInterval",
      orientation: "orientation",
      scaleDivisionFactor: "scaleDivisionFactor",
      startValue: "startValue",
      tick: "tick",
      tickInterval: "tickInterval",
      horizontalOrientation: "horizontalOrientation",
      verticalOrientation: "verticalOrientation",
      aggregateByCategory: "aggregateByCategory",
      aggregationGroupWidth: "aggregationGroupWidth",
      aggregationInterval: "aggregationInterval",
      breaks: "breaks",
      breakStyle: "breakStyle",
      categories: "categories",
      discreteAxisDivisionMode: "discreteAxisDivisionMode",
      endOnTick: "endOnTick",
      holidays: "holidays",
      linearThreshold: "linearThreshold",
      logarithmBase: "logarithmBase",
      marker: "marker",
      maxRange: "maxRange",
      minorTickCount: "minorTickCount",
      minRange: "minRange",
      placeholderHeight: "placeholderHeight",
      showCustomBoundaryTicks: "showCustomBoundaryTicks",
      singleWorkdays: "singleWorkdays",
      type: "type",
      valueType: "valueType",
      workdaysOnly: "workdaysOnly",
      workWeek: "workWeek"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoScaleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scale",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowDecimals: [{
      type: Input
    }],
    customMinorTicks: [{
      type: Input
    }],
    customTicks: [{
      type: Input
    }],
    endValue: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    minorTick: [{
      type: Input
    }],
    minorTickInterval: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }],
    scaleDivisionFactor: [{
      type: Input
    }],
    startValue: [{
      type: Input
    }],
    tick: [{
      type: Input
    }],
    tickInterval: [{
      type: Input
    }],
    horizontalOrientation: [{
      type: Input
    }],
    verticalOrientation: [{
      type: Input
    }],
    aggregateByCategory: [{
      type: Input
    }],
    aggregationGroupWidth: [{
      type: Input
    }],
    aggregationInterval: [{
      type: Input
    }],
    breaks: [{
      type: Input
    }],
    breakStyle: [{
      type: Input
    }],
    categories: [{
      type: Input
    }],
    discreteAxisDivisionMode: [{
      type: Input
    }],
    endOnTick: [{
      type: Input
    }],
    holidays: [{
      type: Input
    }],
    linearThreshold: [{
      type: Input
    }],
    logarithmBase: [{
      type: Input
    }],
    marker: [{
      type: Input
    }],
    maxRange: [{
      type: Input
    }],
    minorTickCount: [{
      type: Input
    }],
    minRange: [{
      type: Input
    }],
    placeholderHeight: [{
      type: Input
    }],
    showCustomBoundaryTicks: [{
      type: Input
    }],
    singleWorkdays: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    valueType: [{
      type: Input
    }],
    workdaysOnly: [{
      type: Input
    }],
    workWeek: [{
      type: Input
    }],
    breaksChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiBreakComponent)]
    }]
  });
})();
var DxoScaleModule = class _DxoScaleModule {
  /** @nocollapse */
  static ɵfac = function DxoScaleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScaleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoScaleModule,
    declarations: [DxoScaleComponent],
    exports: [DxoScaleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoScaleComponent],
      exports: [DxoScaleComponent]
    }]
  }], null, null);
})();
var DxoScatterComponent = class _DxoScatterComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "scatter";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoScatterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScatterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoScatterComponent,
    selectors: [["dxo-scatter"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoScatterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScatterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scatter",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoScatterModule = class _DxoScatterModule {
  /** @nocollapse */
  static ɵfac = function DxoScatterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScatterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoScatterModule,
    declarations: [DxoScatterComponent],
    exports: [DxoScatterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScatterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoScatterComponent],
      exports: [DxoScatterComponent]
    }]
  }], null, null);
})();
var DxoScrollBarComponent = class _DxoScrollBarComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "scrollBar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoScrollBarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScrollBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoScrollBarComponent,
    selectors: [["dxo-scroll-bar"]],
    inputs: {
      color: "color",
      offset: "offset",
      opacity: "opacity",
      position: "position",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoScrollBarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scroll-bar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoScrollBarModule = class _DxoScrollBarModule {
  /** @nocollapse */
  static ɵfac = function DxoScrollBarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScrollBarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoScrollBarModule,
    declarations: [DxoScrollBarComponent],
    exports: [DxoScrollBarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollBarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoScrollBarComponent],
      exports: [DxoScrollBarComponent]
    }]
  }], null, null);
})();
var DxoSchedulerScrolling = class _DxoSchedulerScrolling extends NestedOption {
  get columnRenderingMode() {
    return this._getOption("columnRenderingMode");
  }
  set columnRenderingMode(value) {
    this._setOption("columnRenderingMode", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get preloadEnabled() {
    return this._getOption("preloadEnabled");
  }
  set preloadEnabled(value) {
    this._setOption("preloadEnabled", value);
  }
  get renderAsync() {
    return this._getOption("renderAsync");
  }
  set renderAsync(value) {
    this._setOption("renderAsync", value);
  }
  get rowRenderingMode() {
    return this._getOption("rowRenderingMode");
  }
  set rowRenderingMode(value) {
    this._setOption("rowRenderingMode", value);
  }
  get scrollByContent() {
    return this._getOption("scrollByContent");
  }
  set scrollByContent(value) {
    this._setOption("scrollByContent", value);
  }
  get scrollByThumb() {
    return this._getOption("scrollByThumb");
  }
  set scrollByThumb(value) {
    this._setOption("scrollByThumb", value);
  }
  get showScrollbar() {
    return this._getOption("showScrollbar");
  }
  set showScrollbar(value) {
    this._setOption("showScrollbar", value);
  }
  get useNative() {
    return this._getOption("useNative");
  }
  set useNative(value) {
    this._setOption("useNative", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoSchedulerScrolling_BaseFactory;
    return function DxoSchedulerScrolling_Factory(__ngFactoryType__) {
      return (ɵDxoSchedulerScrolling_BaseFactory || (ɵDxoSchedulerScrolling_BaseFactory = ɵɵgetInheritedFactory(_DxoSchedulerScrolling)))(__ngFactoryType__ || _DxoSchedulerScrolling);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSchedulerScrolling,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSchedulerScrolling_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSchedulerScrolling, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoScrollingComponent = class _DxoScrollingComponent extends DxoSchedulerScrolling {
  get _optionPath() {
    return "scrolling";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoScrollingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScrollingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoScrollingComponent,
    selectors: [["dxo-scrolling"]],
    inputs: {
      columnRenderingMode: "columnRenderingMode",
      mode: "mode",
      preloadEnabled: "preloadEnabled",
      renderAsync: "renderAsync",
      rowRenderingMode: "rowRenderingMode",
      scrollByContent: "scrollByContent",
      scrollByThumb: "scrollByThumb",
      showScrollbar: "showScrollbar",
      useNative: "useNative"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoScrollingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scrolling",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["columnRenderingMode", "mode", "preloadEnabled", "renderAsync", "rowRenderingMode", "scrollByContent", "scrollByThumb", "showScrollbar", "useNative"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoScrollingModule = class _DxoScrollingModule {
  /** @nocollapse */
  static ɵfac = function DxoScrollingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoScrollingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoScrollingModule,
    declarations: [DxoScrollingComponent],
    exports: [DxoScrollingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoScrollingComponent],
      exports: [DxoScrollingComponent]
    }]
  }], null, null);
})();
var DxoTextBoxOptions = class _DxoTextBoxOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get buttons() {
    return this._getOption("buttons");
  }
  set buttons(value) {
    this._setOption("buttons", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get inputAttr() {
    return this._getOption("inputAttr");
  }
  set inputAttr(value) {
    this._setOption("inputAttr", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get labelMode() {
    return this._getOption("labelMode");
  }
  set labelMode(value) {
    this._setOption("labelMode", value);
  }
  get mask() {
    return this._getOption("mask");
  }
  set mask(value) {
    this._setOption("mask", value);
  }
  get maskChar() {
    return this._getOption("maskChar");
  }
  set maskChar(value) {
    this._setOption("maskChar", value);
  }
  get maskInvalidMessage() {
    return this._getOption("maskInvalidMessage");
  }
  set maskInvalidMessage(value) {
    this._setOption("maskInvalidMessage", value);
  }
  get maskRules() {
    return this._getOption("maskRules");
  }
  set maskRules(value) {
    this._setOption("maskRules", value);
  }
  get maxLength() {
    return this._getOption("maxLength");
  }
  set maxLength(value) {
    this._setOption("maxLength", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onChange() {
    return this._getOption("onChange");
  }
  set onChange(value) {
    this._setOption("onChange", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onCopy() {
    return this._getOption("onCopy");
  }
  set onCopy(value) {
    this._setOption("onCopy", value);
  }
  get onCut() {
    return this._getOption("onCut");
  }
  set onCut(value) {
    this._setOption("onCut", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEnterKey() {
    return this._getOption("onEnterKey");
  }
  set onEnterKey(value) {
    this._setOption("onEnterKey", value);
  }
  get onFocusIn() {
    return this._getOption("onFocusIn");
  }
  set onFocusIn(value) {
    this._setOption("onFocusIn", value);
  }
  get onFocusOut() {
    return this._getOption("onFocusOut");
  }
  set onFocusOut(value) {
    this._setOption("onFocusOut", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onInput() {
    return this._getOption("onInput");
  }
  set onInput(value) {
    this._setOption("onInput", value);
  }
  get onKeyDown() {
    return this._getOption("onKeyDown");
  }
  set onKeyDown(value) {
    this._setOption("onKeyDown", value);
  }
  get onKeyUp() {
    return this._getOption("onKeyUp");
  }
  set onKeyUp(value) {
    this._setOption("onKeyUp", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onPaste() {
    return this._getOption("onPaste");
  }
  set onPaste(value) {
    this._setOption("onPaste", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get placeholder() {
    return this._getOption("placeholder");
  }
  set placeholder(value) {
    this._setOption("placeholder", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get showClearButton() {
    return this._getOption("showClearButton");
  }
  set showClearButton(value) {
    this._setOption("showClearButton", value);
  }
  get showMaskMode() {
    return this._getOption("showMaskMode");
  }
  set showMaskMode(value) {
    this._setOption("showMaskMode", value);
  }
  get spellcheck() {
    return this._getOption("spellcheck");
  }
  set spellcheck(value) {
    this._setOption("spellcheck", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get useMaskedValue() {
    return this._getOption("useMaskedValue");
  }
  set useMaskedValue(value) {
    this._setOption("useMaskedValue", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationMessageMode() {
    return this._getOption("validationMessageMode");
  }
  set validationMessageMode(value) {
    this._setOption("validationMessageMode", value);
  }
  get validationMessagePosition() {
    return this._getOption("validationMessagePosition");
  }
  set validationMessagePosition(value) {
    this._setOption("validationMessagePosition", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get valueChangeEvent() {
    return this._getOption("valueChangeEvent");
  }
  set valueChangeEvent(value) {
    this._setOption("valueChangeEvent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoTextBoxOptions_BaseFactory;
    return function DxoTextBoxOptions_Factory(__ngFactoryType__) {
      return (ɵDxoTextBoxOptions_BaseFactory || (ɵDxoTextBoxOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoTextBoxOptions)))(__ngFactoryType__ || _DxoTextBoxOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTextBoxOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTextBoxOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextBoxOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSearchEditorOptionsComponent = class _DxoSearchEditorOptionsComponent extends DxoTextBoxOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  textChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  get _optionPath() {
    return "searchEditorOptions";
  }
  get buttonsChildren() {
    return this._getOption("buttons");
  }
  set buttonsChildren(value) {
    this.setChildren("buttons", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "textChange"
    }, {
      emit: "valueChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSearchEditorOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchEditorOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSearchEditorOptionsComponent,
    selectors: [["dxo-search-editor-options"]],
    contentQueries: function DxoSearchEditorOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      buttons: "buttons",
      disabled: "disabled",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      inputAttr: "inputAttr",
      isDirty: "isDirty",
      isValid: "isValid",
      label: "label",
      labelMode: "labelMode",
      mask: "mask",
      maskChar: "maskChar",
      maskInvalidMessage: "maskInvalidMessage",
      maskRules: "maskRules",
      maxLength: "maxLength",
      mode: "mode",
      name: "name",
      onChange: "onChange",
      onContentReady: "onContentReady",
      onCopy: "onCopy",
      onCut: "onCut",
      onDisposing: "onDisposing",
      onEnterKey: "onEnterKey",
      onFocusIn: "onFocusIn",
      onFocusOut: "onFocusOut",
      onInitialized: "onInitialized",
      onInput: "onInput",
      onKeyDown: "onKeyDown",
      onKeyUp: "onKeyUp",
      onOptionChanged: "onOptionChanged",
      onPaste: "onPaste",
      onValueChanged: "onValueChanged",
      placeholder: "placeholder",
      readOnly: "readOnly",
      rtlEnabled: "rtlEnabled",
      showClearButton: "showClearButton",
      showMaskMode: "showMaskMode",
      spellcheck: "spellcheck",
      stylingMode: "stylingMode",
      tabIndex: "tabIndex",
      text: "text",
      useMaskedValue: "useMaskedValue",
      validationError: "validationError",
      validationErrors: "validationErrors",
      validationMessageMode: "validationMessageMode",
      validationMessagePosition: "validationMessagePosition",
      validationStatus: "validationStatus",
      value: "value",
      valueChangeEvent: "valueChangeEvent",
      visible: "visible",
      width: "width"
    },
    outputs: {
      textChange: "textChange",
      valueChange: "valueChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSearchEditorOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchEditorOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search-editor-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "buttons", "disabled", "elementAttr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "inputAttr", "isDirty", "isValid", "label", "labelMode", "mask", "maskChar", "maskInvalidMessage", "maskRules", "maxLength", "mode", "name", "onChange", "onContentReady", "onCopy", "onCut", "onDisposing", "onEnterKey", "onFocusIn", "onFocusOut", "onInitialized", "onInput", "onKeyDown", "onKeyUp", "onOptionChanged", "onPaste", "onValueChanged", "placeholder", "readOnly", "rtlEnabled", "showClearButton", "showMaskMode", "spellcheck", "stylingMode", "tabIndex", "text", "useMaskedValue", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "valueChangeEvent", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    textChange: [{
      type: Output
    }],
    valueChange: [{
      type: Output
    }],
    buttonsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiButtonComponent)]
    }]
  });
})();
var DxoSearchEditorOptionsModule = class _DxoSearchEditorOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoSearchEditorOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchEditorOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSearchEditorOptionsModule,
    declarations: [DxoSearchEditorOptionsComponent],
    exports: [DxoSearchEditorOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchEditorOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSearchEditorOptionsComponent],
      exports: [DxoSearchEditorOptionsComponent]
    }]
  }], null, null);
})();
var DxoSearchPanelComponent = class _DxoSearchPanelComponent extends NestedOption {
  get highlightCaseSensitive() {
    return this._getOption("highlightCaseSensitive");
  }
  set highlightCaseSensitive(value) {
    this._setOption("highlightCaseSensitive", value);
  }
  get highlightSearchText() {
    return this._getOption("highlightSearchText");
  }
  set highlightSearchText(value) {
    this._setOption("highlightSearchText", value);
  }
  get placeholder() {
    return this._getOption("placeholder");
  }
  set placeholder(value) {
    this._setOption("placeholder", value);
  }
  get searchVisibleColumnsOnly() {
    return this._getOption("searchVisibleColumnsOnly");
  }
  set searchVisibleColumnsOnly(value) {
    this._setOption("searchVisibleColumnsOnly", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  textChange;
  get _optionPath() {
    return "searchPanel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "textChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSearchPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSearchPanelComponent,
    selectors: [["dxo-search-panel"]],
    inputs: {
      highlightCaseSensitive: "highlightCaseSensitive",
      highlightSearchText: "highlightSearchText",
      placeholder: "placeholder",
      searchVisibleColumnsOnly: "searchVisibleColumnsOnly",
      text: "text",
      visible: "visible",
      width: "width"
    },
    outputs: {
      textChange: "textChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSearchPanelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search-panel",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    highlightCaseSensitive: [{
      type: Input
    }],
    highlightSearchText: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    searchVisibleColumnsOnly: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    textChange: [{
      type: Output
    }]
  });
})();
var DxoSearchPanelModule = class _DxoSearchPanelModule {
  /** @nocollapse */
  static ɵfac = function DxoSearchPanelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchPanelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSearchPanelModule,
    declarations: [DxoSearchPanelComponent],
    exports: [DxoSearchPanelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSearchPanelComponent],
      exports: [DxoSearchPanelComponent]
    }]
  }], null, null);
})();
var DxoColumnChooserSearchConfig = class _DxoColumnChooserSearchConfig extends NestedOption {
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get timeout() {
    return this._getOption("timeout");
  }
  set timeout(value) {
    this._setOption("timeout", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get searchExpr() {
    return this._getOption("searchExpr");
  }
  set searchExpr(value) {
    this._setOption("searchExpr", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoColumnChooserSearchConfig_BaseFactory;
    return function DxoColumnChooserSearchConfig_Factory(__ngFactoryType__) {
      return (ɵDxoColumnChooserSearchConfig_BaseFactory || (ɵDxoColumnChooserSearchConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoColumnChooserSearchConfig)))(__ngFactoryType__ || _DxoColumnChooserSearchConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColumnChooserSearchConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColumnChooserSearchConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserSearchConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSearchComponent = class _DxoSearchComponent extends DxoColumnChooserSearchConfig {
  get _optionPath() {
    return "search";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSearchComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSearchComponent,
    selectors: [["dxo-search"]],
    inputs: {
      editorOptions: "editorOptions",
      enabled: "enabled",
      timeout: "timeout",
      mode: "mode",
      searchExpr: "searchExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSearchComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["editorOptions", "enabled", "timeout", "mode", "searchExpr"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSearchModule = class _DxoSearchModule {
  /** @nocollapse */
  static ɵfac = function DxoSearchModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSearchModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSearchModule,
    declarations: [DxoSearchComponent],
    exports: [DxoSearchComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSearchComponent],
      exports: [DxoSearchComponent]
    }]
  }], null, null);
})();
var DxoSelectionStyleComponent = class _DxoSelectionStyleComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get hatching() {
    return this._getOption("hatching");
  }
  set hatching(value) {
    this._setOption("hatching", value);
  }
  get highlight() {
    return this._getOption("highlight");
  }
  set highlight(value) {
    this._setOption("highlight", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "selectionStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSelectionStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSelectionStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSelectionStyleComponent,
    selectors: [["dxo-selection-style"]],
    inputs: {
      border: "border",
      color: "color",
      size: "size",
      dashStyle: "dashStyle",
      hatching: "hatching",
      highlight: "highlight",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSelectionStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-selection-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    hatching: [{
      type: Input
    }],
    highlight: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoSelectionStyleModule = class _DxoSelectionStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoSelectionStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSelectionStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSelectionStyleModule,
    declarations: [DxoSelectionStyleComponent],
    exports: [DxoSelectionStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSelectionStyleComponent],
      exports: [DxoSelectionStyleComponent]
    }]
  }], null, null);
})();
var DxoColumnChooserSelectionConfig = class _DxoColumnChooserSelectionConfig extends NestedOption {
  get allowSelectAll() {
    return this._getOption("allowSelectAll");
  }
  set allowSelectAll(value) {
    this._setOption("allowSelectAll", value);
  }
  get recursive() {
    return this._getOption("recursive");
  }
  set recursive(value) {
    this._setOption("recursive", value);
  }
  get selectByClick() {
    return this._getOption("selectByClick");
  }
  set selectByClick(value) {
    this._setOption("selectByClick", value);
  }
  get deferred() {
    return this._getOption("deferred");
  }
  set deferred(value) {
    this._setOption("deferred", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get selectAllMode() {
    return this._getOption("selectAllMode");
  }
  set selectAllMode(value) {
    this._setOption("selectAllMode", value);
  }
  get sensitivity() {
    return this._getOption("sensitivity");
  }
  set sensitivity(value) {
    this._setOption("sensitivity", value);
  }
  get showCheckBoxesMode() {
    return this._getOption("showCheckBoxesMode");
  }
  set showCheckBoxesMode(value) {
    this._setOption("showCheckBoxesMode", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoColumnChooserSelectionConfig_BaseFactory;
    return function DxoColumnChooserSelectionConfig_Factory(__ngFactoryType__) {
      return (ɵDxoColumnChooserSelectionConfig_BaseFactory || (ɵDxoColumnChooserSelectionConfig_BaseFactory = ɵɵgetInheritedFactory(_DxoColumnChooserSelectionConfig)))(__ngFactoryType__ || _DxoColumnChooserSelectionConfig);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoColumnChooserSelectionConfig,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoColumnChooserSelectionConfig_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserSelectionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSelectionComponent = class _DxoSelectionComponent extends DxoColumnChooserSelectionConfig {
  get _optionPath() {
    return "selection";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSelectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSelectionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSelectionComponent,
    selectors: [["dxo-selection"]],
    inputs: {
      allowSelectAll: "allowSelectAll",
      recursive: "recursive",
      selectByClick: "selectByClick",
      deferred: "deferred",
      mode: "mode",
      selectAllMode: "selectAllMode",
      sensitivity: "sensitivity",
      showCheckBoxesMode: "showCheckBoxesMode"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSelectionComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-selection",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowSelectAll", "recursive", "selectByClick", "deferred", "mode", "selectAllMode", "sensitivity", "showCheckBoxesMode"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSelectionModule = class _DxoSelectionModule {
  /** @nocollapse */
  static ɵfac = function DxoSelectionModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSelectionModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSelectionModule,
    declarations: [DxoSelectionComponent],
    exports: [DxoSelectionComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSelectionComponent],
      exports: [DxoSelectionComponent]
    }]
  }], null, null);
})();
var DxoSeriesTemplateComponent = class _DxoSeriesTemplateComponent extends NestedOption {
  get customizeSeries() {
    return this._getOption("customizeSeries");
  }
  set customizeSeries(value) {
    this._setOption("customizeSeries", value);
  }
  get nameField() {
    return this._getOption("nameField");
  }
  set nameField(value) {
    this._setOption("nameField", value);
  }
  get _optionPath() {
    return "seriesTemplate";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSeriesTemplateComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSeriesTemplateComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSeriesTemplateComponent,
    selectors: [["dxo-series-template"]],
    inputs: {
      customizeSeries: "customizeSeries",
      nameField: "nameField"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSeriesTemplateComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSeriesTemplateComponent, [{
    type: Component,
    args: [{
      selector: "dxo-series-template",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    customizeSeries: [{
      type: Input
    }],
    nameField: [{
      type: Input
    }]
  });
})();
var DxoSeriesTemplateModule = class _DxoSeriesTemplateModule {
  /** @nocollapse */
  static ɵfac = function DxoSeriesTemplateModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSeriesTemplateModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSeriesTemplateModule,
    declarations: [DxoSeriesTemplateComponent],
    exports: [DxoSeriesTemplateComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSeriesTemplateModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSeriesTemplateComponent],
      exports: [DxoSeriesTemplateComponent]
    }]
  }], null, null);
})();
var DxoShadowComponent = class _DxoShadowComponent extends NestedOption {
  get blur() {
    return this._getOption("blur");
  }
  set blur(value) {
    this._setOption("blur", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "shadow";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShadowComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShadowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShadowComponent,
    selectors: [["dxo-shadow"]],
    inputs: {
      blur: "blur",
      color: "color",
      offsetX: "offsetX",
      offsetY: "offsetY",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShadowComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShadowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-shadow",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    blur: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    offsetX: [{
      type: Input
    }],
    offsetY: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoShadowModule = class _DxoShadowModule {
  /** @nocollapse */
  static ɵfac = function DxoShadowModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShadowModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShadowModule,
    declarations: [DxoShadowComponent],
    exports: [DxoShadowComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShadowModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShadowComponent],
      exports: [DxoShadowComponent]
    }]
  }], null, null);
})();
var DxoShowEventComponent = class _DxoShowEventComponent extends NestedOption {
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showEvent";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShowEventComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowEventComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShowEventComponent,
    selectors: [["dxo-show-event"]],
    inputs: {
      delay: "delay",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShowEventComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowEventComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-event",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    delay: [{
      type: Input
    }],
    name: [{
      type: Input
    }]
  });
})();
var DxoShowEventModule = class _DxoShowEventModule {
  /** @nocollapse */
  static ɵfac = function DxoShowEventModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowEventModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShowEventModule,
    declarations: [DxoShowEventComponent],
    exports: [DxoShowEventComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowEventModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShowEventComponent],
      exports: [DxoShowEventComponent]
    }]
  }], null, null);
})();
var DxoShowFirstSubmenuModeComponent = class _DxoShowFirstSubmenuModeComponent extends NestedOption {
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showFirstSubmenuMode";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShowFirstSubmenuModeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowFirstSubmenuModeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShowFirstSubmenuModeComponent,
    selectors: [["dxo-show-first-submenu-mode"]],
    inputs: {
      delay: "delay",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShowFirstSubmenuModeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowFirstSubmenuModeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-first-submenu-mode",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    delay: [{
      type: Input
    }],
    name: [{
      type: Input
    }]
  });
})();
var DxoShowFirstSubmenuModeModule = class _DxoShowFirstSubmenuModeModule {
  /** @nocollapse */
  static ɵfac = function DxoShowFirstSubmenuModeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowFirstSubmenuModeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShowFirstSubmenuModeModule,
    declarations: [DxoShowFirstSubmenuModeComponent],
    exports: [DxoShowFirstSubmenuModeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowFirstSubmenuModeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShowFirstSubmenuModeComponent],
      exports: [DxoShowFirstSubmenuModeComponent]
    }]
  }], null, null);
})();
var DxoShowSubmenuModeComponent = class _DxoShowSubmenuModeComponent extends NestedOption {
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showSubmenuMode";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShowSubmenuModeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowSubmenuModeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShowSubmenuModeComponent,
    selectors: [["dxo-show-submenu-mode"]],
    inputs: {
      delay: "delay",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShowSubmenuModeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowSubmenuModeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-submenu-mode",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    delay: [{
      type: Input
    }],
    name: [{
      type: Input
    }]
  });
})();
var DxoShowSubmenuModeModule = class _DxoShowSubmenuModeModule {
  /** @nocollapse */
  static ɵfac = function DxoShowSubmenuModeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowSubmenuModeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShowSubmenuModeModule,
    declarations: [DxoShowSubmenuModeComponent],
    exports: [DxoShowSubmenuModeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowSubmenuModeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShowSubmenuModeComponent],
      exports: [DxoShowSubmenuModeComponent]
    }]
  }], null, null);
})();
var DxoShowComponent = class _DxoShowComponent extends DxoAnimationConfig {
  get _optionPath() {
    return "show";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShowComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShowComponent,
    selectors: [["dxo-show"]],
    inputs: {
      complete: "complete",
      delay: "delay",
      direction: "direction",
      duration: "duration",
      easing: "easing",
      from: "from",
      staggerDelay: "staggerDelay",
      start: "start",
      to: "to",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShowComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["complete", "delay", "direction", "duration", "easing", "from", "staggerDelay", "start", "to", "type"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoShowModule = class _DxoShowModule {
  /** @nocollapse */
  static ɵfac = function DxoShowModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShowModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShowModule,
    declarations: [DxoShowComponent],
    exports: [DxoShowComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShowComponent],
      exports: [DxoShowComponent]
    }]
  }], null, null);
})();
var DxoShutterComponent = class _DxoShutterComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "shutter";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoShutterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShutterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoShutterComponent,
    selectors: [["dxo-shutter"]],
    inputs: {
      color: "color",
      opacity: "opacity"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoShutterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShutterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-shutter",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }]
  });
})();
var DxoShutterModule = class _DxoShutterModule {
  /** @nocollapse */
  static ɵfac = function DxoShutterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoShutterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoShutterModule,
    declarations: [DxoShutterComponent],
    exports: [DxoShutterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShutterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoShutterComponent],
      exports: [DxoShutterComponent]
    }]
  }], null, null);
})();
var DxoSizeComponent = class _DxoSizeComponent extends NestedOption {
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "size";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSizeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSizeComponent,
    selectors: [["dxo-size"]],
    inputs: {
      height: "height",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSizeComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-size",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    height: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoSizeModule = class _DxoSizeModule {
  /** @nocollapse */
  static ɵfac = function DxoSizeModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSizeModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSizeModule,
    declarations: [DxoSizeComponent],
    exports: [DxoSizeComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSizeComponent],
      exports: [DxoSizeComponent]
    }]
  }], null, null);
})();
var DxoSliderHandleComponent = class _DxoSliderHandleComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "sliderHandle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSliderHandleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSliderHandleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSliderHandleComponent,
    selectors: [["dxo-slider-handle"]],
    inputs: {
      color: "color",
      opacity: "opacity",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSliderHandleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderHandleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-slider-handle",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoSliderHandleModule = class _DxoSliderHandleModule {
  /** @nocollapse */
  static ɵfac = function DxoSliderHandleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSliderHandleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSliderHandleModule,
    declarations: [DxoSliderHandleComponent],
    exports: [DxoSliderHandleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderHandleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSliderHandleComponent],
      exports: [DxoSliderHandleComponent]
    }]
  }], null, null);
})();
var DxoSliderMarkerComponent = class _DxoSliderMarkerComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get invalidRangeColor() {
    return this._getOption("invalidRangeColor");
  }
  set invalidRangeColor(value) {
    this._setOption("invalidRangeColor", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get placeholderHeight() {
    return this._getOption("placeholderHeight");
  }
  set placeholderHeight(value) {
    this._setOption("placeholderHeight", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "sliderMarker";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSliderMarkerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSliderMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSliderMarkerComponent,
    selectors: [["dxo-slider-marker"]],
    inputs: {
      color: "color",
      customizeText: "customizeText",
      font: "font",
      format: "format",
      invalidRangeColor: "invalidRangeColor",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      placeholderHeight: "placeholderHeight",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSliderMarkerComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-slider-marker",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    format: [{
      type: Input
    }],
    invalidRangeColor: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    placeholderHeight: [{
      type: Input
    }],
    visible: [{
      type: Input
    }]
  });
})();
var DxoSliderMarkerModule = class _DxoSliderMarkerModule {
  /** @nocollapse */
  static ɵfac = function DxoSliderMarkerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSliderMarkerModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSliderMarkerModule,
    declarations: [DxoSliderMarkerComponent],
    exports: [DxoSliderMarkerComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSliderMarkerComponent],
      exports: [DxoSliderMarkerComponent]
    }]
  }], null, null);
})();
var DxoSmallValuesGroupingComponent = class _DxoSmallValuesGroupingComponent extends NestedOption {
  get groupName() {
    return this._getOption("groupName");
  }
  set groupName(value) {
    this._setOption("groupName", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get threshold() {
    return this._getOption("threshold");
  }
  set threshold(value) {
    this._setOption("threshold", value);
  }
  get topCount() {
    return this._getOption("topCount");
  }
  set topCount(value) {
    this._setOption("topCount", value);
  }
  get _optionPath() {
    return "smallValuesGrouping";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSmallValuesGroupingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSmallValuesGroupingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSmallValuesGroupingComponent,
    selectors: [["dxo-small-values-grouping"]],
    inputs: {
      groupName: "groupName",
      mode: "mode",
      threshold: "threshold",
      topCount: "topCount"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSmallValuesGroupingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSmallValuesGroupingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-small-values-grouping",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    groupName: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    threshold: [{
      type: Input
    }],
    topCount: [{
      type: Input
    }]
  });
})();
var DxoSmallValuesGroupingModule = class _DxoSmallValuesGroupingModule {
  /** @nocollapse */
  static ɵfac = function DxoSmallValuesGroupingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSmallValuesGroupingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSmallValuesGroupingModule,
    declarations: [DxoSmallValuesGroupingComponent],
    exports: [DxoSmallValuesGroupingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSmallValuesGroupingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSmallValuesGroupingComponent],
      exports: [DxoSmallValuesGroupingComponent]
    }]
  }], null, null);
})();
var DxiSortByGroupSummaryInfoComponent = class _DxiSortByGroupSummaryInfoComponent extends CollectionNestedOption {
  get groupColumn() {
    return this._getOption("groupColumn");
  }
  set groupColumn(value) {
    this._setOption("groupColumn", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get summaryItem() {
    return this._getOption("summaryItem");
  }
  set summaryItem(value) {
    this._setOption("summaryItem", value);
  }
  get _optionPath() {
    return "sortByGroupSummaryInfo";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiSortByGroupSummaryInfoComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiSortByGroupSummaryInfoComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiSortByGroupSummaryInfoComponent,
    selectors: [["dxi-sort-by-group-summary-info"]],
    inputs: {
      groupColumn: "groupColumn",
      sortOrder: "sortOrder",
      summaryItem: "summaryItem"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiSortByGroupSummaryInfoComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSortByGroupSummaryInfoComponent, [{
    type: Component,
    args: [{
      selector: "dxi-sort-by-group-summary-info",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    groupColumn: [{
      type: Input
    }],
    sortOrder: [{
      type: Input
    }],
    summaryItem: [{
      type: Input
    }]
  });
})();
var DxiSortByGroupSummaryInfoModule = class _DxiSortByGroupSummaryInfoModule {
  /** @nocollapse */
  static ɵfac = function DxiSortByGroupSummaryInfoModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiSortByGroupSummaryInfoModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiSortByGroupSummaryInfoModule,
    declarations: [DxiSortByGroupSummaryInfoComponent],
    exports: [DxiSortByGroupSummaryInfoComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSortByGroupSummaryInfoModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiSortByGroupSummaryInfoComponent],
      exports: [DxiSortByGroupSummaryInfoComponent]
    }]
  }], null, null);
})();
var DxoGanttSorting = class _DxoGanttSorting extends NestedOption {
  get ascendingText() {
    return this._getOption("ascendingText");
  }
  set ascendingText(value) {
    this._setOption("ascendingText", value);
  }
  get clearText() {
    return this._getOption("clearText");
  }
  set clearText(value) {
    this._setOption("clearText", value);
  }
  get descendingText() {
    return this._getOption("descendingText");
  }
  set descendingText(value) {
    this._setOption("descendingText", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get showSortIndexes() {
    return this._getOption("showSortIndexes");
  }
  set showSortIndexes(value) {
    this._setOption("showSortIndexes", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGanttSorting_BaseFactory;
    return function DxoGanttSorting_Factory(__ngFactoryType__) {
      return (ɵDxoGanttSorting_BaseFactory || (ɵDxoGanttSorting_BaseFactory = ɵɵgetInheritedFactory(_DxoGanttSorting)))(__ngFactoryType__ || _DxoGanttSorting);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGanttSorting,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGanttSorting_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttSorting, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSortingComponent = class _DxoSortingComponent extends DxoGanttSorting {
  get _optionPath() {
    return "sorting";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSortingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSortingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSortingComponent,
    selectors: [["dxo-sorting"]],
    inputs: {
      ascendingText: "ascendingText",
      clearText: "clearText",
      descendingText: "descendingText",
      mode: "mode",
      showSortIndexes: "showSortIndexes"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSortingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-sorting",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["ascendingText", "clearText", "descendingText", "mode", "showSortIndexes"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSortingModule = class _DxoSortingModule {
  /** @nocollapse */
  static ɵfac = function DxoSortingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSortingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSortingModule,
    declarations: [DxoSortingComponent],
    exports: [DxoSortingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSortingComponent],
      exports: [DxoSortingComponent]
    }]
  }], null, null);
})();
var DxoSourceComponent = class _DxoSourceComponent extends NestedOption {
  get grouping() {
    return this._getOption("grouping");
  }
  set grouping(value) {
    this._setOption("grouping", value);
  }
  get layer() {
    return this._getOption("layer");
  }
  set layer(value) {
    this._setOption("layer", value);
  }
  get _optionPath() {
    return "source";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSourceComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSourceComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSourceComponent,
    selectors: [["dxo-source"]],
    inputs: {
      grouping: "grouping",
      layer: "layer"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSourceComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSourceComponent, [{
    type: Component,
    args: [{
      selector: "dxo-source",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    grouping: [{
      type: Input
    }],
    layer: [{
      type: Input
    }]
  });
})();
var DxoSourceModule = class _DxoSourceModule {
  /** @nocollapse */
  static ɵfac = function DxoSourceModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSourceModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSourceModule,
    declarations: [DxoSourceComponent],
    exports: [DxoSourceComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSourceModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSourceComponent],
      exports: [DxoSourceComponent]
    }]
  }], null, null);
})();
var DxoSplineComponent = class _DxoSplineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "spline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSplineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSplineComponent,
    selectors: [["dxo-spline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSplineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-spline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSplineModule = class _DxoSplineModule {
  /** @nocollapse */
  static ɵfac = function DxoSplineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSplineModule,
    declarations: [DxoSplineComponent],
    exports: [DxoSplineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSplineComponent],
      exports: [DxoSplineComponent]
    }]
  }], null, null);
})();
var DxoSplineareaComponent = class _DxoSplineareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "splinearea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSplineareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSplineareaComponent,
    selectors: [["dxo-splinearea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSplineareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-splinearea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSplineareaModule = class _DxoSplineareaModule {
  /** @nocollapse */
  static ɵfac = function DxoSplineareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplineareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSplineareaModule,
    declarations: [DxoSplineareaComponent],
    exports: [DxoSplineareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSplineareaComponent],
      exports: [DxoSplineareaComponent]
    }]
  }], null, null);
})();
var DxoSplitterOptions = class _DxoSplitterOptions extends NestedOption {
  get allowKeyboardNavigation() {
    return this._getOption("allowKeyboardNavigation");
  }
  set allowKeyboardNavigation(value) {
    this._setOption("allowKeyboardNavigation", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onItemClick() {
    return this._getOption("onItemClick");
  }
  set onItemClick(value) {
    this._setOption("onItemClick", value);
  }
  get onItemCollapsed() {
    return this._getOption("onItemCollapsed");
  }
  set onItemCollapsed(value) {
    this._setOption("onItemCollapsed", value);
  }
  get onItemContextMenu() {
    return this._getOption("onItemContextMenu");
  }
  set onItemContextMenu(value) {
    this._setOption("onItemContextMenu", value);
  }
  get onItemExpanded() {
    return this._getOption("onItemExpanded");
  }
  set onItemExpanded(value) {
    this._setOption("onItemExpanded", value);
  }
  get onItemRendered() {
    return this._getOption("onItemRendered");
  }
  set onItemRendered(value) {
    this._setOption("onItemRendered", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onResize() {
    return this._getOption("onResize");
  }
  set onResize(value) {
    this._setOption("onResize", value);
  }
  get onResizeEnd() {
    return this._getOption("onResizeEnd");
  }
  set onResizeEnd(value) {
    this._setOption("onResizeEnd", value);
  }
  get onResizeStart() {
    return this._getOption("onResizeStart");
  }
  set onResizeStart(value) {
    this._setOption("onResizeStart", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get separatorSize() {
    return this._getOption("separatorSize");
  }
  set separatorSize(value) {
    this._setOption("separatorSize", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoSplitterOptions_BaseFactory;
    return function DxoSplitterOptions_Factory(__ngFactoryType__) {
      return (ɵDxoSplitterOptions_BaseFactory || (ɵDxoSplitterOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoSplitterOptions)))(__ngFactoryType__ || _DxoSplitterOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSplitterOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSplitterOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplitterOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSplitterComponent = class _DxoSplitterComponent extends DxoSplitterOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  itemsChange;
  get _optionPath() {
    return "splitter";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "itemsChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSplitterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplitterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSplitterComponent,
    selectors: [["dxo-splitter"]],
    contentQueries: function DxoSplitterComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      allowKeyboardNavigation: "allowKeyboardNavigation",
      dataSource: "dataSource",
      disabled: "disabled",
      elementAttr: "elementAttr",
      height: "height",
      hoverStateEnabled: "hoverStateEnabled",
      items: "items",
      itemTemplate: "itemTemplate",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onItemClick: "onItemClick",
      onItemCollapsed: "onItemCollapsed",
      onItemContextMenu: "onItemContextMenu",
      onItemExpanded: "onItemExpanded",
      onItemRendered: "onItemRendered",
      onOptionChanged: "onOptionChanged",
      onResize: "onResize",
      onResizeEnd: "onResizeEnd",
      onResizeStart: "onResizeStart",
      orientation: "orientation",
      rtlEnabled: "rtlEnabled",
      separatorSize: "separatorSize",
      visible: "visible",
      width: "width"
    },
    outputs: {
      itemsChange: "itemsChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSplitterComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplitterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-splitter",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["allowKeyboardNavigation", "dataSource", "disabled", "elementAttr", "height", "hoverStateEnabled", "items", "itemTemplate", "onContentReady", "onDisposing", "onInitialized", "onItemClick", "onItemCollapsed", "onItemContextMenu", "onItemExpanded", "onItemRendered", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "orientation", "rtlEnabled", "separatorSize", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChange: [{
      type: Output
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoSplitterModule = class _DxoSplitterModule {
  /** @nocollapse */
  static ɵfac = function DxoSplitterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSplitterModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSplitterModule,
    declarations: [DxoSplitterComponent],
    exports: [DxoSplitterComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplitterModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSplitterComponent],
      exports: [DxoSplitterComponent]
    }]
  }], null, null);
})();
var DxoStackedareaComponent = class _DxoStackedareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stackedarea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStackedareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStackedareaComponent,
    selectors: [["dxo-stackedarea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStackedareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedarea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStackedareaModule = class _DxoStackedareaModule {
  /** @nocollapse */
  static ɵfac = function DxoStackedareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStackedareaModule,
    declarations: [DxoStackedareaComponent],
    exports: [DxoStackedareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStackedareaComponent],
      exports: [DxoStackedareaComponent]
    }]
  }], null, null);
})();
var DxoStackedbarComponent = class _DxoStackedbarComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stackedbar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStackedbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStackedbarComponent,
    selectors: [["dxo-stackedbar"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width",
      closed: "closed"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStackedbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedbar",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width", "closed"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStackedbarModule = class _DxoStackedbarModule {
  /** @nocollapse */
  static ɵfac = function DxoStackedbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStackedbarModule,
    declarations: [DxoStackedbarComponent],
    exports: [DxoStackedbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStackedbarComponent],
      exports: [DxoStackedbarComponent]
    }]
  }], null, null);
})();
var DxoStackedlineComponent = class _DxoStackedlineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stackedline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStackedlineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedlineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStackedlineComponent,
    selectors: [["dxo-stackedline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStackedlineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedlineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStackedlineModule = class _DxoStackedlineModule {
  /** @nocollapse */
  static ɵfac = function DxoStackedlineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedlineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStackedlineModule,
    declarations: [DxoStackedlineComponent],
    exports: [DxoStackedlineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedlineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStackedlineComponent],
      exports: [DxoStackedlineComponent]
    }]
  }], null, null);
})();
var DxoStackedsplineComponent = class _DxoStackedsplineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stackedspline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStackedsplineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedsplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStackedsplineComponent,
    selectors: [["dxo-stackedspline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStackedsplineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedspline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStackedsplineModule = class _DxoStackedsplineModule {
  /** @nocollapse */
  static ɵfac = function DxoStackedsplineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedsplineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStackedsplineModule,
    declarations: [DxoStackedsplineComponent],
    exports: [DxoStackedsplineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStackedsplineComponent],
      exports: [DxoStackedsplineComponent]
    }]
  }], null, null);
})();
var DxoStackedsplineareaComponent = class _DxoStackedsplineareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stackedsplinearea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStackedsplineareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedsplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStackedsplineareaComponent,
    selectors: [["dxo-stackedsplinearea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStackedsplineareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedsplinearea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStackedsplineareaModule = class _DxoStackedsplineareaModule {
  /** @nocollapse */
  static ɵfac = function DxoStackedsplineareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStackedsplineareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStackedsplineareaModule,
    declarations: [DxoStackedsplineareaComponent],
    exports: [DxoStackedsplineareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStackedsplineareaComponent],
      exports: [DxoStackedsplineareaComponent]
    }]
  }], null, null);
})();
var DxoStateStoringComponent = class _DxoStateStoringComponent extends NestedOption {
  get customLoad() {
    return this._getOption("customLoad");
  }
  set customLoad(value) {
    this._setOption("customLoad", value);
  }
  get customSave() {
    return this._getOption("customSave");
  }
  set customSave(value) {
    this._setOption("customSave", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get savingTimeout() {
    return this._getOption("savingTimeout");
  }
  set savingTimeout(value) {
    this._setOption("savingTimeout", value);
  }
  get storageKey() {
    return this._getOption("storageKey");
  }
  set storageKey(value) {
    this._setOption("storageKey", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "stateStoring";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStateStoringComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStateStoringComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStateStoringComponent,
    selectors: [["dxo-state-storing"]],
    inputs: {
      customLoad: "customLoad",
      customSave: "customSave",
      enabled: "enabled",
      savingTimeout: "savingTimeout",
      storageKey: "storageKey",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStateStoringComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStateStoringComponent, [{
    type: Component,
    args: [{
      selector: "dxo-state-storing",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    customLoad: [{
      type: Input
    }],
    customSave: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    savingTimeout: [{
      type: Input
    }],
    storageKey: [{
      type: Input
    }],
    type: [{
      type: Input
    }]
  });
})();
var DxoStateStoringModule = class _DxoStateStoringModule {
  /** @nocollapse */
  static ɵfac = function DxoStateStoringModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStateStoringModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStateStoringModule,
    declarations: [DxoStateStoringComponent],
    exports: [DxoStateStoringComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStateStoringModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStateStoringComponent],
      exports: [DxoStateStoringComponent]
    }]
  }], null, null);
})();
var DxoStepareaComponent = class _DxoStepareaComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "steparea";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStepareaComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStepareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStepareaComponent,
    selectors: [["dxo-steparea"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStepareaComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStepareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-steparea",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStepareaModule = class _DxoStepareaModule {
  /** @nocollapse */
  static ɵfac = function DxoStepareaModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStepareaModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStepareaModule,
    declarations: [DxoStepareaComponent],
    exports: [DxoStepareaComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStepareaModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStepareaComponent],
      exports: [DxoStepareaComponent]
    }]
  }], null, null);
})();
var DxoSteplineComponent = class _DxoSteplineComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stepline";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSteplineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSteplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSteplineComponent,
    selectors: [["dxo-stepline"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSteplineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSteplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stepline",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSteplineModule = class _DxoSteplineModule {
  /** @nocollapse */
  static ɵfac = function DxoSteplineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSteplineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSteplineModule,
    declarations: [DxoSteplineComponent],
    exports: [DxoSteplineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSteplineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSteplineComponent],
      exports: [DxoSteplineComponent]
    }]
  }], null, null);
})();
var DxoStockComponent = class _DxoStockComponent extends DxoChartCommonSeriesSettings {
  get _optionPath() {
    return "stock";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStockComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStockComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStockComponent,
    selectors: [["dxo-stock"]],
    inputs: {
      aggregation: "aggregation",
      area: "area",
      argumentField: "argumentField",
      axis: "axis",
      bar: "bar",
      barOverlapGroup: "barOverlapGroup",
      barPadding: "barPadding",
      barWidth: "barWidth",
      border: "border",
      bubble: "bubble",
      candlestick: "candlestick",
      closeValueField: "closeValueField",
      color: "color",
      cornerRadius: "cornerRadius",
      dashStyle: "dashStyle",
      fullstackedarea: "fullstackedarea",
      fullstackedbar: "fullstackedbar",
      fullstackedline: "fullstackedline",
      fullstackedspline: "fullstackedspline",
      fullstackedsplinearea: "fullstackedsplinearea",
      highValueField: "highValueField",
      hoverMode: "hoverMode",
      hoverStyle: "hoverStyle",
      ignoreEmptyPoints: "ignoreEmptyPoints",
      innerColor: "innerColor",
      label: "label",
      line: "line",
      lowValueField: "lowValueField",
      maxLabelCount: "maxLabelCount",
      minBarSize: "minBarSize",
      opacity: "opacity",
      openValueField: "openValueField",
      pane: "pane",
      point: "point",
      rangearea: "rangearea",
      rangebar: "rangebar",
      rangeValue1Field: "rangeValue1Field",
      rangeValue2Field: "rangeValue2Field",
      reduction: "reduction",
      scatter: "scatter",
      selectionMode: "selectionMode",
      selectionStyle: "selectionStyle",
      showInLegend: "showInLegend",
      sizeField: "sizeField",
      spline: "spline",
      splinearea: "splinearea",
      stack: "stack",
      stackedarea: "stackedarea",
      stackedbar: "stackedbar",
      stackedline: "stackedline",
      stackedspline: "stackedspline",
      stackedsplinearea: "stackedsplinearea",
      steparea: "steparea",
      stepline: "stepline",
      stock: "stock",
      tagField: "tagField",
      type: "type",
      valueErrorBar: "valueErrorBar",
      valueField: "valueField",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStockComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStockComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stock",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["aggregation", "area", "argumentField", "axis", "bar", "barOverlapGroup", "barPadding", "barWidth", "border", "bubble", "candlestick", "closeValueField", "color", "cornerRadius", "dashStyle", "fullstackedarea", "fullstackedbar", "fullstackedline", "fullstackedspline", "fullstackedsplinearea", "highValueField", "hoverMode", "hoverStyle", "ignoreEmptyPoints", "innerColor", "label", "line", "lowValueField", "maxLabelCount", "minBarSize", "opacity", "openValueField", "pane", "point", "rangearea", "rangebar", "rangeValue1Field", "rangeValue2Field", "reduction", "scatter", "selectionMode", "selectionStyle", "showInLegend", "sizeField", "spline", "splinearea", "stack", "stackedarea", "stackedbar", "stackedline", "stackedspline", "stackedsplinearea", "steparea", "stepline", "stock", "tagField", "type", "valueErrorBar", "valueField", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoStockModule = class _DxoStockModule {
  /** @nocollapse */
  static ɵfac = function DxoStockModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStockModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStockModule,
    declarations: [DxoStockComponent],
    exports: [DxoStockComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStockModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStockComponent],
      exports: [DxoStockComponent]
    }]
  }], null, null);
})();
var DxiGanttStripLine = class _DxiGanttStripLine extends CollectionNestedOption {
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get end() {
    return this._getOption("end");
  }
  set end(value) {
    this._setOption("end", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiGanttStripLine_BaseFactory;
    return function DxiGanttStripLine_Factory(__ngFactoryType__) {
      return (ɵDxiGanttStripLine_BaseFactory || (ɵDxiGanttStripLine_BaseFactory = ɵɵgetInheritedFactory(_DxiGanttStripLine)))(__ngFactoryType__ || _DxiGanttStripLine);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiGanttStripLine,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiGanttStripLine_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGanttStripLine, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiStripLineComponent = class _DxiStripLineComponent extends DxiGanttStripLine {
  get _optionPath() {
    return "stripLines";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiStripLineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiStripLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiStripLineComponent,
    selectors: [["dxi-strip-line"]],
    inputs: {
      cssClass: "cssClass",
      end: "end",
      start: "start",
      title: "title"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiStripLineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripLineComponent, [{
    type: Component,
    args: [{
      selector: "dxi-strip-line",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["cssClass", "end", "start", "title"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiStripLineModule = class _DxiStripLineModule {
  /** @nocollapse */
  static ɵfac = function DxiStripLineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiStripLineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiStripLineModule,
    declarations: [DxiStripLineComponent],
    exports: [DxiStripLineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripLineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiStripLineComponent],
      exports: [DxiStripLineComponent]
    }]
  }], null, null);
})();
var DxoStripStyleComponent = class _DxoStripStyleComponent extends NestedOption {
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get _optionPath() {
    return "stripStyle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoStripStyleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStripStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoStripStyleComponent,
    selectors: [["dxo-strip-style"]],
    inputs: {
      label: "label",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoStripStyleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStripStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-strip-style",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    label: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }]
  });
})();
var DxoStripStyleModule = class _DxoStripStyleModule {
  /** @nocollapse */
  static ɵfac = function DxoStripStyleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoStripStyleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoStripStyleModule,
    declarations: [DxoStripStyleComponent],
    exports: [DxoStripStyleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStripStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoStripStyleComponent],
      exports: [DxoStripStyleComponent]
    }]
  }], null, null);
})();
var DxoSubtitleComponent = class _DxoSubtitleComponent extends NestedOption {
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get _optionPath() {
    return "subtitle";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSubtitleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSubtitleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSubtitleComponent,
    selectors: [["dxo-subtitle"]],
    inputs: {
      font: "font",
      offset: "offset",
      text: "text",
      textOverflow: "textOverflow",
      wordWrap: "wordWrap"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSubtitleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubtitleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-subtitle",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    font: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    textOverflow: [{
      type: Input
    }],
    wordWrap: [{
      type: Input
    }]
  });
})();
var DxoSubtitleModule = class _DxoSubtitleModule {
  /** @nocollapse */
  static ɵfac = function DxoSubtitleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSubtitleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSubtitleModule,
    declarations: [DxoSubtitleComponent],
    exports: [DxoSubtitleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubtitleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSubtitleComponent],
      exports: [DxoSubtitleComponent]
    }]
  }], null, null);
})();
var DxoGaugeIndicator = class _DxoGaugeIndicator extends NestedOption {
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get baseValue() {
    return this._getOption("baseValue");
  }
  set baseValue(value) {
    this._setOption("baseValue", value);
  }
  get beginAdaptingAtRadius() {
    return this._getOption("beginAdaptingAtRadius");
  }
  set beginAdaptingAtRadius(value) {
    this._setOption("beginAdaptingAtRadius", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get indentFromCenter() {
    return this._getOption("indentFromCenter");
  }
  set indentFromCenter(value) {
    this._setOption("indentFromCenter", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get secondColor() {
    return this._getOption("secondColor");
  }
  set secondColor(value) {
    this._setOption("secondColor", value);
  }
  get secondFraction() {
    return this._getOption("secondFraction");
  }
  set secondFraction(value) {
    this._setOption("secondFraction", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get spindleGapSize() {
    return this._getOption("spindleGapSize");
  }
  set spindleGapSize(value) {
    this._setOption("spindleGapSize", value);
  }
  get spindleSize() {
    return this._getOption("spindleSize");
  }
  set spindleSize(value) {
    this._setOption("spindleSize", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGaugeIndicator_BaseFactory;
    return function DxoGaugeIndicator_Factory(__ngFactoryType__) {
      return (ɵDxoGaugeIndicator_BaseFactory || (ɵDxoGaugeIndicator_BaseFactory = ɵɵgetInheritedFactory(_DxoGaugeIndicator)))(__ngFactoryType__ || _DxoGaugeIndicator);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGaugeIndicator,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGaugeIndicator_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGaugeIndicator, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSubvalueIndicatorComponent = class _DxoSubvalueIndicatorComponent extends DxoGaugeIndicator {
  get _optionPath() {
    return "subvalueIndicator";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSubvalueIndicatorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSubvalueIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSubvalueIndicatorComponent,
    selectors: [["dxo-subvalue-indicator"]],
    inputs: {
      arrowLength: "arrowLength",
      backgroundColor: "backgroundColor",
      baseValue: "baseValue",
      beginAdaptingAtRadius: "beginAdaptingAtRadius",
      color: "color",
      horizontalOrientation: "horizontalOrientation",
      indentFromCenter: "indentFromCenter",
      length: "length",
      offset: "offset",
      palette: "palette",
      secondColor: "secondColor",
      secondFraction: "secondFraction",
      size: "size",
      spindleGapSize: "spindleGapSize",
      spindleSize: "spindleSize",
      text: "text",
      type: "type",
      verticalOrientation: "verticalOrientation",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSubvalueIndicatorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubvalueIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-subvalue-indicator",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["arrowLength", "backgroundColor", "baseValue", "beginAdaptingAtRadius", "color", "horizontalOrientation", "indentFromCenter", "length", "offset", "palette", "secondColor", "secondFraction", "size", "spindleGapSize", "spindleSize", "text", "type", "verticalOrientation", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoSubvalueIndicatorModule = class _DxoSubvalueIndicatorModule {
  /** @nocollapse */
  static ɵfac = function DxoSubvalueIndicatorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSubvalueIndicatorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSubvalueIndicatorModule,
    declarations: [DxoSubvalueIndicatorComponent],
    exports: [DxoSubvalueIndicatorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubvalueIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSubvalueIndicatorComponent],
      exports: [DxoSubvalueIndicatorComponent]
    }]
  }], null, null);
})();
var DxiTotalItemComponent = class _DxiTotalItemComponent extends CollectionNestedOption {
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get column() {
    return this._getOption("column");
  }
  set column(value) {
    this._setOption("column", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get showInColumn() {
    return this._getOption("showInColumn");
  }
  set showInColumn(value) {
    this._setOption("showInColumn", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get summaryType() {
    return this._getOption("summaryType");
  }
  set summaryType(value) {
    this._setOption("summaryType", value);
  }
  get valueFormat() {
    return this._getOption("valueFormat");
  }
  set valueFormat(value) {
    this._setOption("valueFormat", value);
  }
  get _optionPath() {
    return "totalItems";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiTotalItemComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTotalItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiTotalItemComponent,
    selectors: [["dxi-total-item"]],
    inputs: {
      alignment: "alignment",
      column: "column",
      cssClass: "cssClass",
      customizeText: "customizeText",
      displayFormat: "displayFormat",
      name: "name",
      showInColumn: "showInColumn",
      skipEmptyValues: "skipEmptyValues",
      summaryType: "summaryType",
      valueFormat: "valueFormat"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiTotalItemComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTotalItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-total-item",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    alignment: [{
      type: Input
    }],
    column: [{
      type: Input
    }],
    cssClass: [{
      type: Input
    }],
    customizeText: [{
      type: Input
    }],
    displayFormat: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    showInColumn: [{
      type: Input
    }],
    skipEmptyValues: [{
      type: Input
    }],
    summaryType: [{
      type: Input
    }],
    valueFormat: [{
      type: Input
    }]
  });
})();
var DxiTotalItemModule = class _DxiTotalItemModule {
  /** @nocollapse */
  static ɵfac = function DxiTotalItemModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTotalItemModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiTotalItemModule,
    declarations: [DxiTotalItemComponent],
    exports: [DxiTotalItemComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTotalItemModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiTotalItemComponent],
      exports: [DxiTotalItemComponent]
    }]
  }], null, null);
})();
var DxoSummaryComponent = class _DxoSummaryComponent extends NestedOption {
  get calculateCustomSummary() {
    return this._getOption("calculateCustomSummary");
  }
  set calculateCustomSummary(value) {
    this._setOption("calculateCustomSummary", value);
  }
  get groupItems() {
    return this._getOption("groupItems");
  }
  set groupItems(value) {
    this._setOption("groupItems", value);
  }
  get recalculateWhileEditing() {
    return this._getOption("recalculateWhileEditing");
  }
  set recalculateWhileEditing(value) {
    this._setOption("recalculateWhileEditing", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get totalItems() {
    return this._getOption("totalItems");
  }
  set totalItems(value) {
    this._setOption("totalItems", value);
  }
  get _optionPath() {
    return "summary";
  }
  get groupItemsChildren() {
    return this._getOption("groupItems");
  }
  set groupItemsChildren(value) {
    this.setChildren("groupItems", value);
  }
  get totalItemsChildren() {
    return this._getOption("totalItems");
  }
  set totalItemsChildren(value) {
    this.setChildren("totalItems", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoSummaryComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSummaryComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoSummaryComponent,
    selectors: [["dxo-summary"]],
    contentQueries: function DxoSummaryComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiGroupItemComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiTotalItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupItemsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.totalItemsChildren = _t);
      }
    },
    inputs: {
      calculateCustomSummary: "calculateCustomSummary",
      groupItems: "groupItems",
      recalculateWhileEditing: "recalculateWhileEditing",
      skipEmptyValues: "skipEmptyValues",
      texts: "texts",
      totalItems: "totalItems"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoSummaryComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSummaryComponent, [{
    type: Component,
    args: [{
      selector: "dxo-summary",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    calculateCustomSummary: [{
      type: Input
    }],
    groupItems: [{
      type: Input
    }],
    recalculateWhileEditing: [{
      type: Input
    }],
    skipEmptyValues: [{
      type: Input
    }],
    texts: [{
      type: Input
    }],
    totalItems: [{
      type: Input
    }],
    groupItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiGroupItemComponent)]
    }],
    totalItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiTotalItemComponent)]
    }]
  });
})();
var DxoSummaryModule = class _DxoSummaryModule {
  /** @nocollapse */
  static ɵfac = function DxoSummaryModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoSummaryModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoSummaryModule,
    declarations: [DxoSummaryComponent],
    exports: [DxoSummaryComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSummaryModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoSummaryComponent],
      exports: [DxoSummaryComponent]
    }]
  }], null, null);
})();
var DxoTabPanelOptions = class _DxoTabPanelOptions extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get animationEnabled() {
    return this._getOption("animationEnabled");
  }
  set animationEnabled(value) {
    this._setOption("animationEnabled", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get deferRendering() {
    return this._getOption("deferRendering");
  }
  set deferRendering(value) {
    this._setOption("deferRendering", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get iconPosition() {
    return this._getOption("iconPosition");
  }
  set iconPosition(value) {
    this._setOption("iconPosition", value);
  }
  get itemHoldTimeout() {
    return this._getOption("itemHoldTimeout");
  }
  set itemHoldTimeout(value) {
    this._setOption("itemHoldTimeout", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get itemTitleTemplate() {
    return this._getOption("itemTitleTemplate");
  }
  set itemTitleTemplate(value) {
    this._setOption("itemTitleTemplate", value);
  }
  get loop() {
    return this._getOption("loop");
  }
  set loop(value) {
    this._setOption("loop", value);
  }
  get noDataText() {
    return this._getOption("noDataText");
  }
  set noDataText(value) {
    this._setOption("noDataText", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onItemClick() {
    return this._getOption("onItemClick");
  }
  set onItemClick(value) {
    this._setOption("onItemClick", value);
  }
  get onItemContextMenu() {
    return this._getOption("onItemContextMenu");
  }
  set onItemContextMenu(value) {
    this._setOption("onItemContextMenu", value);
  }
  get onItemHold() {
    return this._getOption("onItemHold");
  }
  set onItemHold(value) {
    this._setOption("onItemHold", value);
  }
  get onItemRendered() {
    return this._getOption("onItemRendered");
  }
  set onItemRendered(value) {
    this._setOption("onItemRendered", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onSelectionChanged() {
    return this._getOption("onSelectionChanged");
  }
  set onSelectionChanged(value) {
    this._setOption("onSelectionChanged", value);
  }
  get onSelectionChanging() {
    return this._getOption("onSelectionChanging");
  }
  set onSelectionChanging(value) {
    this._setOption("onSelectionChanging", value);
  }
  get onTitleClick() {
    return this._getOption("onTitleClick");
  }
  set onTitleClick(value) {
    this._setOption("onTitleClick", value);
  }
  get onTitleHold() {
    return this._getOption("onTitleHold");
  }
  set onTitleHold(value) {
    this._setOption("onTitleHold", value);
  }
  get onTitleRendered() {
    return this._getOption("onTitleRendered");
  }
  set onTitleRendered(value) {
    this._setOption("onTitleRendered", value);
  }
  get repaintChangesOnly() {
    return this._getOption("repaintChangesOnly");
  }
  set repaintChangesOnly(value) {
    this._setOption("repaintChangesOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get scrollByContent() {
    return this._getOption("scrollByContent");
  }
  set scrollByContent(value) {
    this._setOption("scrollByContent", value);
  }
  get scrollingEnabled() {
    return this._getOption("scrollingEnabled");
  }
  set scrollingEnabled(value) {
    this._setOption("scrollingEnabled", value);
  }
  get selectedIndex() {
    return this._getOption("selectedIndex");
  }
  set selectedIndex(value) {
    this._setOption("selectedIndex", value);
  }
  get selectedItem() {
    return this._getOption("selectedItem");
  }
  set selectedItem(value) {
    this._setOption("selectedItem", value);
  }
  get showNavButtons() {
    return this._getOption("showNavButtons");
  }
  set showNavButtons(value) {
    this._setOption("showNavButtons", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get swipeEnabled() {
    return this._getOption("swipeEnabled");
  }
  set swipeEnabled(value) {
    this._setOption("swipeEnabled", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get tabsPosition() {
    return this._getOption("tabsPosition");
  }
  set tabsPosition(value) {
    this._setOption("tabsPosition", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoTabPanelOptions_BaseFactory;
    return function DxoTabPanelOptions_Factory(__ngFactoryType__) {
      return (ɵDxoTabPanelOptions_BaseFactory || (ɵDxoTabPanelOptions_BaseFactory = ɵɵgetInheritedFactory(_DxoTabPanelOptions)))(__ngFactoryType__ || _DxoTabPanelOptions);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTabPanelOptions,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTabPanelOptions_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTabPanelOptionsComponent = class _DxoTabPanelOptionsComponent extends DxoTabPanelOptions {
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  itemsChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  selectedIndexChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  selectedItemChange;
  get _optionPath() {
    return "tabPanelOptions";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "itemsChange"
    }, {
      emit: "selectedIndexChange"
    }, {
      emit: "selectedItemChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTabPanelOptionsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTabPanelOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTabPanelOptionsComponent,
    selectors: [["dxo-tab-panel-options"]],
    contentQueries: function DxoTabPanelOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      accessKey: "accessKey",
      activeStateEnabled: "activeStateEnabled",
      animationEnabled: "animationEnabled",
      dataSource: "dataSource",
      deferRendering: "deferRendering",
      disabled: "disabled",
      elementAttr: "elementAttr",
      focusStateEnabled: "focusStateEnabled",
      height: "height",
      hint: "hint",
      hoverStateEnabled: "hoverStateEnabled",
      iconPosition: "iconPosition",
      itemHoldTimeout: "itemHoldTimeout",
      items: "items",
      itemTemplate: "itemTemplate",
      itemTitleTemplate: "itemTitleTemplate",
      loop: "loop",
      noDataText: "noDataText",
      onContentReady: "onContentReady",
      onDisposing: "onDisposing",
      onInitialized: "onInitialized",
      onItemClick: "onItemClick",
      onItemContextMenu: "onItemContextMenu",
      onItemHold: "onItemHold",
      onItemRendered: "onItemRendered",
      onOptionChanged: "onOptionChanged",
      onSelectionChanged: "onSelectionChanged",
      onSelectionChanging: "onSelectionChanging",
      onTitleClick: "onTitleClick",
      onTitleHold: "onTitleHold",
      onTitleRendered: "onTitleRendered",
      repaintChangesOnly: "repaintChangesOnly",
      rtlEnabled: "rtlEnabled",
      scrollByContent: "scrollByContent",
      scrollingEnabled: "scrollingEnabled",
      selectedIndex: "selectedIndex",
      selectedItem: "selectedItem",
      showNavButtons: "showNavButtons",
      stylingMode: "stylingMode",
      swipeEnabled: "swipeEnabled",
      tabIndex: "tabIndex",
      tabsPosition: "tabsPosition",
      visible: "visible",
      width: "width"
    },
    outputs: {
      itemsChange: "itemsChange",
      selectedIndexChange: "selectedIndexChange",
      selectedItemChange: "selectedItemChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTabPanelOptionsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tab-panel-options",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["accessKey", "activeStateEnabled", "animationEnabled", "dataSource", "deferRendering", "disabled", "elementAttr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "iconPosition", "itemHoldTimeout", "items", "itemTemplate", "itemTitleTemplate", "loop", "noDataText", "onContentReady", "onDisposing", "onInitialized", "onItemClick", "onItemContextMenu", "onItemHold", "onItemRendered", "onOptionChanged", "onSelectionChanged", "onSelectionChanging", "onTitleClick", "onTitleHold", "onTitleRendered", "repaintChangesOnly", "rtlEnabled", "scrollByContent", "scrollingEnabled", "selectedIndex", "selectedItem", "showNavButtons", "stylingMode", "swipeEnabled", "tabIndex", "tabsPosition", "visible", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChange: [{
      type: Output
    }],
    selectedIndexChange: [{
      type: Output
    }],
    selectedItemChange: [{
      type: Output
    }],
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoTabPanelOptionsModule = class _DxoTabPanelOptionsModule {
  /** @nocollapse */
  static ɵfac = function DxoTabPanelOptionsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTabPanelOptionsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTabPanelOptionsModule,
    declarations: [DxoTabPanelOptionsComponent],
    exports: [DxoTabPanelOptionsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTabPanelOptionsComponent],
      exports: [DxoTabPanelOptionsComponent]
    }]
  }], null, null);
})();
var DxoHtmlEditorTableContextMenu = class _DxoHtmlEditorTableContextMenu extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoHtmlEditorTableContextMenu_BaseFactory;
    return function DxoHtmlEditorTableContextMenu_Factory(__ngFactoryType__) {
      return (ɵDxoHtmlEditorTableContextMenu_BaseFactory || (ɵDxoHtmlEditorTableContextMenu_BaseFactory = ɵɵgetInheritedFactory(_DxoHtmlEditorTableContextMenu)))(__ngFactoryType__ || _DxoHtmlEditorTableContextMenu);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHtmlEditorTableContextMenu,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHtmlEditorTableContextMenu_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorTableContextMenu, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTableContextMenuComponent = class _DxoTableContextMenuComponent extends DxoHtmlEditorTableContextMenu {
  get _optionPath() {
    return "tableContextMenu";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTableContextMenuComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTableContextMenuComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTableContextMenuComponent,
    selectors: [["dxo-table-context-menu"]],
    contentQueries: function DxoTableContextMenuComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
      }
    },
    inputs: {
      enabled: "enabled",
      items: "items"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTableContextMenuComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableContextMenuComponent, [{
    type: Component,
    args: [{
      selector: "dxo-table-context-menu",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["enabled", "items"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }]
  });
})();
var DxoTableContextMenuModule = class _DxoTableContextMenuModule {
  /** @nocollapse */
  static ɵfac = function DxoTableContextMenuModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTableContextMenuModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTableContextMenuModule,
    declarations: [DxoTableContextMenuComponent],
    exports: [DxoTableContextMenuComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableContextMenuModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTableContextMenuComponent],
      exports: [DxoTableContextMenuComponent]
    }]
  }], null, null);
})();
var DxoHtmlEditorTableResizing = class _DxoHtmlEditorTableResizing extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get minColumnWidth() {
    return this._getOption("minColumnWidth");
  }
  set minColumnWidth(value) {
    this._setOption("minColumnWidth", value);
  }
  get minRowHeight() {
    return this._getOption("minRowHeight");
  }
  set minRowHeight(value) {
    this._setOption("minRowHeight", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoHtmlEditorTableResizing_BaseFactory;
    return function DxoHtmlEditorTableResizing_Factory(__ngFactoryType__) {
      return (ɵDxoHtmlEditorTableResizing_BaseFactory || (ɵDxoHtmlEditorTableResizing_BaseFactory = ɵɵgetInheritedFactory(_DxoHtmlEditorTableResizing)))(__ngFactoryType__ || _DxoHtmlEditorTableResizing);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHtmlEditorTableResizing,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHtmlEditorTableResizing_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorTableResizing, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTableResizingComponent = class _DxoTableResizingComponent extends DxoHtmlEditorTableResizing {
  get _optionPath() {
    return "tableResizing";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTableResizingComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTableResizingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTableResizingComponent,
    selectors: [["dxo-table-resizing"]],
    inputs: {
      enabled: "enabled",
      minColumnWidth: "minColumnWidth",
      minRowHeight: "minRowHeight"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTableResizingComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableResizingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-table-resizing",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["enabled", "minColumnWidth", "minRowHeight"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoTableResizingModule = class _DxoTableResizingModule {
  /** @nocollapse */
  static ɵfac = function DxoTableResizingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTableResizingModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTableResizingModule,
    declarations: [DxoTableResizingComponent],
    exports: [DxoTableResizingComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableResizingModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTableResizingComponent],
      exports: [DxoTableResizingComponent]
    }]
  }], null, null);
})();
var DxoTasksComponent = class _DxoTasksComponent extends NestedOption {
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get endExpr() {
    return this._getOption("endExpr");
  }
  set endExpr(value) {
    this._setOption("endExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get parentIdExpr() {
    return this._getOption("parentIdExpr");
  }
  set parentIdExpr(value) {
    this._setOption("parentIdExpr", value);
  }
  get progressExpr() {
    return this._getOption("progressExpr");
  }
  set progressExpr(value) {
    this._setOption("progressExpr", value);
  }
  get startExpr() {
    return this._getOption("startExpr");
  }
  set startExpr(value) {
    this._setOption("startExpr", value);
  }
  get titleExpr() {
    return this._getOption("titleExpr");
  }
  set titleExpr(value) {
    this._setOption("titleExpr", value);
  }
  get _optionPath() {
    return "tasks";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTasksComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTasksComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTasksComponent,
    selectors: [["dxo-tasks"]],
    inputs: {
      colorExpr: "colorExpr",
      dataSource: "dataSource",
      endExpr: "endExpr",
      keyExpr: "keyExpr",
      parentIdExpr: "parentIdExpr",
      progressExpr: "progressExpr",
      startExpr: "startExpr",
      titleExpr: "titleExpr"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTasksComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTasksComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tasks",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    colorExpr: [{
      type: Input
    }],
    dataSource: [{
      type: Input
    }],
    endExpr: [{
      type: Input
    }],
    keyExpr: [{
      type: Input
    }],
    parentIdExpr: [{
      type: Input
    }],
    progressExpr: [{
      type: Input
    }],
    startExpr: [{
      type: Input
    }],
    titleExpr: [{
      type: Input
    }]
  });
})();
var DxoTasksModule = class _DxoTasksModule {
  /** @nocollapse */
  static ɵfac = function DxoTasksModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTasksModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTasksModule,
    declarations: [DxoTasksComponent],
    exports: [DxoTasksComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTasksModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTasksComponent],
      exports: [DxoTasksComponent]
    }]
  }], null, null);
})();
var DxoTextComponent = class _DxoTextComponent extends NestedOption {
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get indent() {
    return this._getOption("indent");
  }
  set indent(value) {
    this._setOption("indent", value);
  }
  get _optionPath() {
    return "text";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTextComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTextComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTextComponent,
    selectors: [["dxo-text"]],
    inputs: {
      customizeText: "customizeText",
      font: "font",
      format: "format",
      indent: "indent"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTextComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextComponent, [{
    type: Component,
    args: [{
      selector: "dxo-text",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    customizeText: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    format: [{
      type: Input
    }],
    indent: [{
      type: Input
    }]
  });
})();
var DxoTextModule = class _DxoTextModule {
  /** @nocollapse */
  static ɵfac = function DxoTextModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTextModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTextModule,
    declarations: [DxoTextComponent],
    exports: [DxoTextComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTextComponent],
      exports: [DxoTextComponent]
    }]
  }], null, null);
})();
var DxoGanttHeaderFilterTexts = class _DxoGanttHeaderFilterTexts extends NestedOption {
  get fix() {
    return this._getOption("fix");
  }
  set fix(value) {
    this._setOption("fix", value);
  }
  get leftPosition() {
    return this._getOption("leftPosition");
  }
  set leftPosition(value) {
    this._setOption("leftPosition", value);
  }
  get rightPosition() {
    return this._getOption("rightPosition");
  }
  set rightPosition(value) {
    this._setOption("rightPosition", value);
  }
  get stickyPosition() {
    return this._getOption("stickyPosition");
  }
  set stickyPosition(value) {
    this._setOption("stickyPosition", value);
  }
  get unfix() {
    return this._getOption("unfix");
  }
  set unfix(value) {
    this._setOption("unfix", value);
  }
  get addRow() {
    return this._getOption("addRow");
  }
  set addRow(value) {
    this._setOption("addRow", value);
  }
  get cancelAllChanges() {
    return this._getOption("cancelAllChanges");
  }
  set cancelAllChanges(value) {
    this._setOption("cancelAllChanges", value);
  }
  get cancelRowChanges() {
    return this._getOption("cancelRowChanges");
  }
  set cancelRowChanges(value) {
    this._setOption("cancelRowChanges", value);
  }
  get confirmDeleteMessage() {
    return this._getOption("confirmDeleteMessage");
  }
  set confirmDeleteMessage(value) {
    this._setOption("confirmDeleteMessage", value);
  }
  get confirmDeleteTitle() {
    return this._getOption("confirmDeleteTitle");
  }
  set confirmDeleteTitle(value) {
    this._setOption("confirmDeleteTitle", value);
  }
  get deleteRow() {
    return this._getOption("deleteRow");
  }
  set deleteRow(value) {
    this._setOption("deleteRow", value);
  }
  get editRow() {
    return this._getOption("editRow");
  }
  set editRow(value) {
    this._setOption("editRow", value);
  }
  get saveAllChanges() {
    return this._getOption("saveAllChanges");
  }
  set saveAllChanges(value) {
    this._setOption("saveAllChanges", value);
  }
  get saveRowChanges() {
    return this._getOption("saveRowChanges");
  }
  set saveRowChanges(value) {
    this._setOption("saveRowChanges", value);
  }
  get undeleteRow() {
    return this._getOption("undeleteRow");
  }
  set undeleteRow(value) {
    this._setOption("undeleteRow", value);
  }
  get validationCancelChanges() {
    return this._getOption("validationCancelChanges");
  }
  set validationCancelChanges(value) {
    this._setOption("validationCancelChanges", value);
  }
  get exportAll() {
    return this._getOption("exportAll");
  }
  set exportAll(value) {
    this._setOption("exportAll", value);
  }
  get exportSelectedRows() {
    return this._getOption("exportSelectedRows");
  }
  set exportSelectedRows(value) {
    this._setOption("exportSelectedRows", value);
  }
  get exportTo() {
    return this._getOption("exportTo");
  }
  set exportTo(value) {
    this._setOption("exportTo", value);
  }
  get clearFilter() {
    return this._getOption("clearFilter");
  }
  set clearFilter(value) {
    this._setOption("clearFilter", value);
  }
  get createFilter() {
    return this._getOption("createFilter");
  }
  set createFilter(value) {
    this._setOption("createFilter", value);
  }
  get filterEnabledHint() {
    return this._getOption("filterEnabledHint");
  }
  set filterEnabledHint(value) {
    this._setOption("filterEnabledHint", value);
  }
  get groupByThisColumn() {
    return this._getOption("groupByThisColumn");
  }
  set groupByThisColumn(value) {
    this._setOption("groupByThisColumn", value);
  }
  get groupContinuedMessage() {
    return this._getOption("groupContinuedMessage");
  }
  set groupContinuedMessage(value) {
    this._setOption("groupContinuedMessage", value);
  }
  get groupContinuesMessage() {
    return this._getOption("groupContinuesMessage");
  }
  set groupContinuesMessage(value) {
    this._setOption("groupContinuesMessage", value);
  }
  get ungroup() {
    return this._getOption("ungroup");
  }
  set ungroup(value) {
    this._setOption("ungroup", value);
  }
  get ungroupAll() {
    return this._getOption("ungroupAll");
  }
  set ungroupAll(value) {
    this._setOption("ungroupAll", value);
  }
  get cancel() {
    return this._getOption("cancel");
  }
  set cancel(value) {
    this._setOption("cancel", value);
  }
  get emptyValue() {
    return this._getOption("emptyValue");
  }
  set emptyValue(value) {
    this._setOption("emptyValue", value);
  }
  get ok() {
    return this._getOption("ok");
  }
  set ok(value) {
    this._setOption("ok", value);
  }
  get avg() {
    return this._getOption("avg");
  }
  set avg(value) {
    this._setOption("avg", value);
  }
  get avgOtherColumn() {
    return this._getOption("avgOtherColumn");
  }
  set avgOtherColumn(value) {
    this._setOption("avgOtherColumn", value);
  }
  get count() {
    return this._getOption("count");
  }
  set count(value) {
    this._setOption("count", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get maxOtherColumn() {
    return this._getOption("maxOtherColumn");
  }
  set maxOtherColumn(value) {
    this._setOption("maxOtherColumn", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get minOtherColumn() {
    return this._getOption("minOtherColumn");
  }
  set minOtherColumn(value) {
    this._setOption("minOtherColumn", value);
  }
  get sum() {
    return this._getOption("sum");
  }
  set sum(value) {
    this._setOption("sum", value);
  }
  get sumOtherColumn() {
    return this._getOption("sumOtherColumn");
  }
  set sumOtherColumn(value) {
    this._setOption("sumOtherColumn", value);
  }
  get allFields() {
    return this._getOption("allFields");
  }
  set allFields(value) {
    this._setOption("allFields", value);
  }
  get columnFields() {
    return this._getOption("columnFields");
  }
  set columnFields(value) {
    this._setOption("columnFields", value);
  }
  get dataFields() {
    return this._getOption("dataFields");
  }
  set dataFields(value) {
    this._setOption("dataFields", value);
  }
  get filterFields() {
    return this._getOption("filterFields");
  }
  set filterFields(value) {
    this._setOption("filterFields", value);
  }
  get rowFields() {
    return this._getOption("rowFields");
  }
  set rowFields(value) {
    this._setOption("rowFields", value);
  }
  get columnFieldArea() {
    return this._getOption("columnFieldArea");
  }
  set columnFieldArea(value) {
    this._setOption("columnFieldArea", value);
  }
  get dataFieldArea() {
    return this._getOption("dataFieldArea");
  }
  set dataFieldArea(value) {
    this._setOption("dataFieldArea", value);
  }
  get filterFieldArea() {
    return this._getOption("filterFieldArea");
  }
  set filterFieldArea(value) {
    this._setOption("filterFieldArea", value);
  }
  get rowFieldArea() {
    return this._getOption("rowFieldArea");
  }
  set rowFieldArea(value) {
    this._setOption("rowFieldArea", value);
  }
  get collapseAll() {
    return this._getOption("collapseAll");
  }
  set collapseAll(value) {
    this._setOption("collapseAll", value);
  }
  get dataNotAvailable() {
    return this._getOption("dataNotAvailable");
  }
  set dataNotAvailable(value) {
    this._setOption("dataNotAvailable", value);
  }
  get expandAll() {
    return this._getOption("expandAll");
  }
  set expandAll(value) {
    this._setOption("expandAll", value);
  }
  get exportToExcel() {
    return this._getOption("exportToExcel");
  }
  set exportToExcel(value) {
    this._setOption("exportToExcel", value);
  }
  get grandTotal() {
    return this._getOption("grandTotal");
  }
  set grandTotal(value) {
    this._setOption("grandTotal", value);
  }
  get noData() {
    return this._getOption("noData");
  }
  set noData(value) {
    this._setOption("noData", value);
  }
  get removeAllSorting() {
    return this._getOption("removeAllSorting");
  }
  set removeAllSorting(value) {
    this._setOption("removeAllSorting", value);
  }
  get showFieldChooser() {
    return this._getOption("showFieldChooser");
  }
  set showFieldChooser(value) {
    this._setOption("showFieldChooser", value);
  }
  get sortColumnBySummary() {
    return this._getOption("sortColumnBySummary");
  }
  set sortColumnBySummary(value) {
    this._setOption("sortColumnBySummary", value);
  }
  get sortRowBySummary() {
    return this._getOption("sortRowBySummary");
  }
  set sortRowBySummary(value) {
    this._setOption("sortRowBySummary", value);
  }
  get total() {
    return this._getOption("total");
  }
  set total(value) {
    this._setOption("total", value);
  }
  get addRowToNode() {
    return this._getOption("addRowToNode");
  }
  set addRowToNode(value) {
    this._setOption("addRowToNode", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoGanttHeaderFilterTexts_BaseFactory;
    return function DxoGanttHeaderFilterTexts_Factory(__ngFactoryType__) {
      return (ɵDxoGanttHeaderFilterTexts_BaseFactory || (ɵDxoGanttHeaderFilterTexts_BaseFactory = ɵɵgetInheritedFactory(_DxoGanttHeaderFilterTexts)))(__ngFactoryType__ || _DxoGanttHeaderFilterTexts);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoGanttHeaderFilterTexts,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoGanttHeaderFilterTexts_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttHeaderFilterTexts, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTextsComponent = class _DxoTextsComponent extends DxoGanttHeaderFilterTexts {
  get _optionPath() {
    return "texts";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTextsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTextsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTextsComponent,
    selectors: [["dxo-texts"]],
    inputs: {
      fix: "fix",
      leftPosition: "leftPosition",
      rightPosition: "rightPosition",
      stickyPosition: "stickyPosition",
      unfix: "unfix",
      addRow: "addRow",
      cancelAllChanges: "cancelAllChanges",
      cancelRowChanges: "cancelRowChanges",
      confirmDeleteMessage: "confirmDeleteMessage",
      confirmDeleteTitle: "confirmDeleteTitle",
      deleteRow: "deleteRow",
      editRow: "editRow",
      saveAllChanges: "saveAllChanges",
      saveRowChanges: "saveRowChanges",
      undeleteRow: "undeleteRow",
      validationCancelChanges: "validationCancelChanges",
      exportAll: "exportAll",
      exportSelectedRows: "exportSelectedRows",
      exportTo: "exportTo",
      clearFilter: "clearFilter",
      createFilter: "createFilter",
      filterEnabledHint: "filterEnabledHint",
      groupByThisColumn: "groupByThisColumn",
      groupContinuedMessage: "groupContinuedMessage",
      groupContinuesMessage: "groupContinuesMessage",
      ungroup: "ungroup",
      ungroupAll: "ungroupAll",
      cancel: "cancel",
      emptyValue: "emptyValue",
      ok: "ok",
      avg: "avg",
      avgOtherColumn: "avgOtherColumn",
      count: "count",
      max: "max",
      maxOtherColumn: "maxOtherColumn",
      min: "min",
      minOtherColumn: "minOtherColumn",
      sum: "sum",
      sumOtherColumn: "sumOtherColumn",
      allFields: "allFields",
      columnFields: "columnFields",
      dataFields: "dataFields",
      filterFields: "filterFields",
      rowFields: "rowFields",
      columnFieldArea: "columnFieldArea",
      dataFieldArea: "dataFieldArea",
      filterFieldArea: "filterFieldArea",
      rowFieldArea: "rowFieldArea",
      collapseAll: "collapseAll",
      dataNotAvailable: "dataNotAvailable",
      expandAll: "expandAll",
      exportToExcel: "exportToExcel",
      grandTotal: "grandTotal",
      noData: "noData",
      removeAllSorting: "removeAllSorting",
      showFieldChooser: "showFieldChooser",
      sortColumnBySummary: "sortColumnBySummary",
      sortRowBySummary: "sortRowBySummary",
      total: "total",
      addRowToNode: "addRowToNode"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTextsComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-texts",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["fix", "leftPosition", "rightPosition", "stickyPosition", "unfix", "addRow", "cancelAllChanges", "cancelRowChanges", "confirmDeleteMessage", "confirmDeleteTitle", "deleteRow", "editRow", "saveAllChanges", "saveRowChanges", "undeleteRow", "validationCancelChanges", "exportAll", "exportSelectedRows", "exportTo", "clearFilter", "createFilter", "filterEnabledHint", "groupByThisColumn", "groupContinuedMessage", "groupContinuesMessage", "ungroup", "ungroupAll", "cancel", "emptyValue", "ok", "avg", "avgOtherColumn", "count", "max", "maxOtherColumn", "min", "minOtherColumn", "sum", "sumOtherColumn", "allFields", "columnFields", "dataFields", "filterFields", "rowFields", "columnFieldArea", "dataFieldArea", "filterFieldArea", "rowFieldArea", "collapseAll", "dataNotAvailable", "expandAll", "exportToExcel", "grandTotal", "noData", "removeAllSorting", "showFieldChooser", "sortColumnBySummary", "sortRowBySummary", "total", "addRowToNode"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoTextsModule = class _DxoTextsModule {
  /** @nocollapse */
  static ɵfac = function DxoTextsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTextsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTextsModule,
    declarations: [DxoTextsComponent],
    exports: [DxoTextsComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextsModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTextsComponent],
      exports: [DxoTextsComponent]
    }]
  }], null, null);
})();
var DxoTickIntervalComponent = class _DxoTickIntervalComponent extends NestedOption {
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "tickInterval";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTickIntervalComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTickIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTickIntervalComponent,
    selectors: [["dxo-tick-interval"]],
    inputs: {
      days: "days",
      hours: "hours",
      milliseconds: "milliseconds",
      minutes: "minutes",
      months: "months",
      quarters: "quarters",
      seconds: "seconds",
      weeks: "weeks",
      years: "years"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTickIntervalComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tick-interval",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    days: [{
      type: Input
    }],
    hours: [{
      type: Input
    }],
    milliseconds: [{
      type: Input
    }],
    minutes: [{
      type: Input
    }],
    months: [{
      type: Input
    }],
    quarters: [{
      type: Input
    }],
    seconds: [{
      type: Input
    }],
    weeks: [{
      type: Input
    }],
    years: [{
      type: Input
    }]
  });
})();
var DxoTickIntervalModule = class _DxoTickIntervalModule {
  /** @nocollapse */
  static ɵfac = function DxoTickIntervalModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTickIntervalModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTickIntervalModule,
    declarations: [DxoTickIntervalComponent],
    exports: [DxoTickIntervalComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTickIntervalComponent],
      exports: [DxoTickIntervalComponent]
    }]
  }], null, null);
})();
var DxoTickComponent = class _DxoTickComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get shift() {
    return this._getOption("shift");
  }
  set shift(value) {
    this._setOption("shift", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "tick";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTickComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTickComponent,
    selectors: [["dxo-tick"]],
    inputs: {
      color: "color",
      length: "length",
      opacity: "opacity",
      shift: "shift",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTickComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tick",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    length: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    shift: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoTickModule = class _DxoTickModule {
  /** @nocollapse */
  static ɵfac = function DxoTickModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTickModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTickModule,
    declarations: [DxoTickComponent],
    exports: [DxoTickComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTickComponent],
      exports: [DxoTickComponent]
    }]
  }], null, null);
})();
var DxoTileComponent = class _DxoTileComponent extends NestedOption {
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "tile";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTileComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTileComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTileComponent,
    selectors: [["dxo-tile"]],
    inputs: {
      border: "border",
      color: "color",
      hoverStyle: "hoverStyle",
      label: "label",
      selectionStyle: "selectionStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTileComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTileComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tile",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    hoverStyle: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    selectionStyle: [{
      type: Input
    }]
  });
})();
var DxoTileModule = class _DxoTileModule {
  /** @nocollapse */
  static ɵfac = function DxoTileModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTileModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTileModule,
    declarations: [DxoTileComponent],
    exports: [DxoTileComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTileModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTileComponent],
      exports: [DxoTileComponent]
    }]
  }], null, null);
})();
var DxoTitleComponent = class _DxoTitleComponent extends NestedOption {
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get subtitle() {
    return this._getOption("subtitle");
  }
  set subtitle(value) {
    this._setOption("subtitle", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get _optionPath() {
    return "title";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTitleComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTitleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTitleComponent,
    selectors: [["dxo-title"]],
    inputs: {
      font: "font",
      horizontalAlignment: "horizontalAlignment",
      margin: "margin",
      placeholderSize: "placeholderSize",
      subtitle: "subtitle",
      text: "text",
      verticalAlignment: "verticalAlignment",
      textOverflow: "textOverflow",
      wordWrap: "wordWrap",
      alignment: "alignment"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTitleComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTitleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-title",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    font: [{
      type: Input
    }],
    horizontalAlignment: [{
      type: Input
    }],
    margin: [{
      type: Input
    }],
    placeholderSize: [{
      type: Input
    }],
    subtitle: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    verticalAlignment: [{
      type: Input
    }],
    textOverflow: [{
      type: Input
    }],
    wordWrap: [{
      type: Input
    }],
    alignment: [{
      type: Input
    }]
  });
})();
var DxoTitleModule = class _DxoTitleModule {
  /** @nocollapse */
  static ɵfac = function DxoTitleModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTitleModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTitleModule,
    declarations: [DxoTitleComponent],
    exports: [DxoTitleComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTitleModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTitleComponent],
      exports: [DxoTitleComponent]
    }]
  }], null, null);
})();
var DxoToComponent = class _DxoToComponent extends DxoAnimationState {
  get _optionPath() {
    return "to";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoToComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoToComponent,
    selectors: [["dxo-to"]],
    inputs: {
      left: "left",
      opacity: "opacity",
      position: "position",
      scale: "scale",
      top: "top"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoToComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToComponent, [{
    type: Component,
    args: [{
      selector: "dxo-to",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["left", "opacity", "position", "scale", "top"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoToModule = class _DxoToModule {
  /** @nocollapse */
  static ɵfac = function DxoToModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoToModule,
    declarations: [DxoToComponent],
    exports: [DxoToComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoToComponent],
      exports: [DxoToComponent]
    }]
  }], null, null);
})();
var DxoDataGridToolbar = class _DxoDataGridToolbar extends NestedOption {
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get fileSelectionItems() {
    return this._getOption("fileSelectionItems");
  }
  set fileSelectionItems(value) {
    this._setOption("fileSelectionItems", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get multiline() {
    return this._getOption("multiline");
  }
  set multiline(value) {
    this._setOption("multiline", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoDataGridToolbar_BaseFactory;
    return function DxoDataGridToolbar_Factory(__ngFactoryType__) {
      return (ɵDxoDataGridToolbar_BaseFactory || (ɵDxoDataGridToolbar_BaseFactory = ɵɵgetInheritedFactory(_DxoDataGridToolbar)))(__ngFactoryType__ || _DxoDataGridToolbar);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoDataGridToolbar,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoDataGridToolbar_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataGridToolbar, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoToolbarComponent = class _DxoToolbarComponent extends DxoDataGridToolbar {
  get _optionPath() {
    return "toolbar";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get fileSelectionItemsChildren() {
    return this._getOption("fileSelectionItems");
  }
  set fileSelectionItemsChildren(value) {
    this.setChildren("fileSelectionItems", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoToolbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoToolbarComponent,
    selectors: [["dxo-toolbar"]],
    contentQueries: function DxoToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiFileSelectionItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileSelectionItemsChildren = _t);
      }
    },
    inputs: {
      disabled: "disabled",
      items: "items",
      visible: "visible",
      fileSelectionItems: "fileSelectionItems",
      container: "container",
      multiline: "multiline"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoToolbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-toolbar",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["disabled", "items", "visible", "fileSelectionItems", "container", "multiline"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    itemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiItemComponent)]
    }],
    fileSelectionItemsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiFileSelectionItemComponent)]
    }]
  });
})();
var DxoToolbarModule = class _DxoToolbarModule {
  /** @nocollapse */
  static ɵfac = function DxoToolbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToolbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoToolbarModule,
    declarations: [DxoToolbarComponent],
    exports: [DxoToolbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoToolbarComponent],
      exports: [DxoToolbarComponent]
    }]
  }], null, null);
})();
var DxoToolboxComponent = class _DxoToolboxComponent extends NestedOption {
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get shapeIconsPerRow() {
    return this._getOption("shapeIconsPerRow");
  }
  set shapeIconsPerRow(value) {
    this._setOption("shapeIconsPerRow", value);
  }
  get showSearch() {
    return this._getOption("showSearch");
  }
  set showSearch(value) {
    this._setOption("showSearch", value);
  }
  get visibility() {
    return this._getOption("visibility");
  }
  set visibility(value) {
    this._setOption("visibility", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "toolbox";
  }
  get groupsChildren() {
    return this._getOption("groups");
  }
  set groupsChildren(value) {
    this.setChildren("groups", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoToolboxComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToolboxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoToolboxComponent,
    selectors: [["dxo-toolbox"]],
    contentQueries: function DxoToolboxComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiGroupComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupsChildren = _t);
      }
    },
    inputs: {
      groups: "groups",
      shapeIconsPerRow: "shapeIconsPerRow",
      showSearch: "showSearch",
      visibility: "visibility",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoToolboxComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolboxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-toolbox",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    groups: [{
      type: Input
    }],
    shapeIconsPerRow: [{
      type: Input
    }],
    showSearch: [{
      type: Input
    }],
    visibility: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    groupsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiGroupComponent)]
    }]
  });
})();
var DxoToolboxModule = class _DxoToolboxModule {
  /** @nocollapse */
  static ɵfac = function DxoToolboxModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoToolboxModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoToolboxModule,
    declarations: [DxoToolboxComponent],
    exports: [DxoToolboxComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolboxModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoToolboxComponent],
      exports: [DxoToolboxComponent]
    }]
  }], null, null);
})();
var DxoTooltipComponent = class _DxoTooltipComponent extends NestedOption {
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get contentTemplate() {
    return this._getOption("contentTemplate");
  }
  set contentTemplate(value) {
    this._setOption("contentTemplate", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get interactive() {
    return this._getOption("interactive");
  }
  set interactive(value) {
    this._setOption("interactive", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get zIndex() {
    return this._getOption("zIndex");
  }
  set zIndex(value) {
    this._setOption("zIndex", value);
  }
  get argumentFormat() {
    return this._getOption("argumentFormat");
  }
  set argumentFormat(value) {
    this._setOption("argumentFormat", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get shared() {
    return this._getOption("shared");
  }
  set shared(value) {
    this._setOption("shared", value);
  }
  get isShown() {
    return this._getOption("isShown");
  }
  set isShown(value) {
    this._setOption("isShown", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get showMode() {
    return this._getOption("showMode");
  }
  set showMode(value) {
    this._setOption("showMode", value);
  }
  get customizeLinkTooltip() {
    return this._getOption("customizeLinkTooltip");
  }
  set customizeLinkTooltip(value) {
    this._setOption("customizeLinkTooltip", value);
  }
  get customizeNodeTooltip() {
    return this._getOption("customizeNodeTooltip");
  }
  set customizeNodeTooltip(value) {
    this._setOption("customizeNodeTooltip", value);
  }
  get linkTooltipTemplate() {
    return this._getOption("linkTooltipTemplate");
  }
  set linkTooltipTemplate(value) {
    this._setOption("linkTooltipTemplate", value);
  }
  get nodeTooltipTemplate() {
    return this._getOption("nodeTooltipTemplate");
  }
  set nodeTooltipTemplate(value) {
    this._setOption("nodeTooltipTemplate", value);
  }
  get _optionPath() {
    return "tooltip";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoTooltipComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTooltipComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoTooltipComponent,
    selectors: [["dxo-tooltip"]],
    inputs: {
      arrowLength: "arrowLength",
      border: "border",
      color: "color",
      container: "container",
      contentTemplate: "contentTemplate",
      cornerRadius: "cornerRadius",
      customizeTooltip: "customizeTooltip",
      enabled: "enabled",
      font: "font",
      format: "format",
      interactive: "interactive",
      opacity: "opacity",
      paddingLeftRight: "paddingLeftRight",
      paddingTopBottom: "paddingTopBottom",
      shadow: "shadow",
      zIndex: "zIndex",
      argumentFormat: "argumentFormat",
      location: "location",
      shared: "shared",
      isShown: "isShown",
      text: "text",
      position: "position",
      showMode: "showMode",
      customizeLinkTooltip: "customizeLinkTooltip",
      customizeNodeTooltip: "customizeNodeTooltip",
      linkTooltipTemplate: "linkTooltipTemplate",
      nodeTooltipTemplate: "nodeTooltipTemplate"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoTooltipComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTooltipComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tooltip",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    arrowLength: [{
      type: Input
    }],
    border: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    container: [{
      type: Input
    }],
    contentTemplate: [{
      type: Input
    }],
    cornerRadius: [{
      type: Input
    }],
    customizeTooltip: [{
      type: Input
    }],
    enabled: [{
      type: Input
    }],
    font: [{
      type: Input
    }],
    format: [{
      type: Input
    }],
    interactive: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    paddingLeftRight: [{
      type: Input
    }],
    paddingTopBottom: [{
      type: Input
    }],
    shadow: [{
      type: Input
    }],
    zIndex: [{
      type: Input
    }],
    argumentFormat: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    shared: [{
      type: Input
    }],
    isShown: [{
      type: Input
    }],
    text: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    showMode: [{
      type: Input
    }],
    customizeLinkTooltip: [{
      type: Input
    }],
    customizeNodeTooltip: [{
      type: Input
    }],
    linkTooltipTemplate: [{
      type: Input
    }],
    nodeTooltipTemplate: [{
      type: Input
    }]
  });
})();
var DxoTooltipModule = class _DxoTooltipModule {
  /** @nocollapse */
  static ɵfac = function DxoTooltipModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoTooltipModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoTooltipModule,
    declarations: [DxoTooltipComponent],
    exports: [DxoTooltipComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTooltipModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoTooltipComponent],
      exports: [DxoTooltipComponent]
    }]
  }], null, null);
})();
var DxiUser = class _DxiUser extends CollectionNestedOption {
  get avatarAlt() {
    return this._getOption("avatarAlt");
  }
  set avatarAlt(value) {
    this._setOption("avatarAlt", value);
  }
  get avatarUrl() {
    return this._getOption("avatarUrl");
  }
  set avatarUrl(value) {
    this._setOption("avatarUrl", value);
  }
  get id() {
    return this._getOption("id");
  }
  set id(value) {
    this._setOption("id", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxiUser_BaseFactory;
    return function DxiUser_Factory(__ngFactoryType__) {
      return (ɵDxiUser_BaseFactory || (ɵDxiUser_BaseFactory = ɵɵgetInheritedFactory(_DxiUser)))(__ngFactoryType__ || _DxiUser);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiUser,
    selectors: [["base-dxi-user"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiUser_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiUser, [{
    type: Component,
    args: [{
      selector: "base-dxi-user",
      template: ""
    }]
  }], null, null);
})();
var DxiTypingUserComponent = class _DxiTypingUserComponent extends DxiUser {
  get _optionPath() {
    return "typingUsers";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiTypingUserComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTypingUserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiTypingUserComponent,
    selectors: [["dxi-typing-user"]],
    inputs: {
      avatarAlt: "avatarAlt",
      avatarUrl: "avatarUrl",
      id: "id",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiTypingUserComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTypingUserComponent, [{
    type: Component,
    args: [{
      selector: "dxi-typing-user",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["avatarAlt", "avatarUrl", "id", "name"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxiTypingUserModule = class _DxiTypingUserModule {
  /** @nocollapse */
  static ɵfac = function DxiTypingUserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiTypingUserModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiTypingUserModule,
    declarations: [DxiTypingUserComponent],
    exports: [DxiTypingUserComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTypingUserModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiTypingUserComponent],
      exports: [DxiTypingUserComponent]
    }]
  }], null, null);
})();
var DxoUploadComponent = class _DxoUploadComponent extends NestedOption {
  get chunkSize() {
    return this._getOption("chunkSize");
  }
  set chunkSize(value) {
    this._setOption("chunkSize", value);
  }
  get maxFileSize() {
    return this._getOption("maxFileSize");
  }
  set maxFileSize(value) {
    this._setOption("maxFileSize", value);
  }
  get _optionPath() {
    return "upload";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoUploadComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUploadComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoUploadComponent,
    selectors: [["dxo-upload"]],
    inputs: {
      chunkSize: "chunkSize",
      maxFileSize: "maxFileSize"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoUploadComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUploadComponent, [{
    type: Component,
    args: [{
      selector: "dxo-upload",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    chunkSize: [{
      type: Input
    }],
    maxFileSize: [{
      type: Input
    }]
  });
})();
var DxoUploadModule = class _DxoUploadModule {
  /** @nocollapse */
  static ɵfac = function DxoUploadModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUploadModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoUploadModule,
    declarations: [DxoUploadComponent],
    exports: [DxoUploadComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUploadModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoUploadComponent],
      exports: [DxoUploadComponent]
    }]
  }], null, null);
})();
var DxoUrlComponent = class _DxoUrlComponent extends NestedOption {
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get _optionPath() {
    return "url";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoUrlComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUrlComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoUrlComponent,
    selectors: [["dxo-url"]],
    inputs: {
      rangeMaxPoint: "rangeMaxPoint",
      rangeMinPoint: "rangeMinPoint"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoUrlComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUrlComponent, [{
    type: Component,
    args: [{
      selector: "dxo-url",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    rangeMaxPoint: [{
      type: Input
    }],
    rangeMinPoint: [{
      type: Input
    }]
  });
})();
var DxoUrlModule = class _DxoUrlModule {
  /** @nocollapse */
  static ɵfac = function DxoUrlModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUrlModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoUrlModule,
    declarations: [DxoUrlComponent],
    exports: [DxoUrlComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUrlModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoUrlComponent],
      exports: [DxoUrlComponent]
    }]
  }], null, null);
})();
var DxoUserComponent = class _DxoUserComponent extends DxoUser {
  get _optionPath() {
    return "user";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoUserComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoUserComponent,
    selectors: [["dxo-user"]],
    inputs: {
      avatarAlt: "avatarAlt",
      avatarUrl: "avatarUrl",
      id: "id",
      name: "name"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoUserComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUserComponent, [{
    type: Component,
    args: [{
      selector: "dxo-user",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["avatarAlt", "avatarUrl", "id", "name"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoUserModule = class _DxoUserModule {
  /** @nocollapse */
  static ɵfac = function DxoUserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoUserModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoUserModule,
    declarations: [DxoUserComponent],
    exports: [DxoUserComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUserModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoUserComponent],
      exports: [DxoUserComponent]
    }]
  }], null, null);
})();
var DxoValidationComponent = class _DxoValidationComponent extends NestedOption {
  get autoUpdateParentTasks() {
    return this._getOption("autoUpdateParentTasks");
  }
  set autoUpdateParentTasks(value) {
    this._setOption("autoUpdateParentTasks", value);
  }
  get enablePredecessorGap() {
    return this._getOption("enablePredecessorGap");
  }
  set enablePredecessorGap(value) {
    this._setOption("enablePredecessorGap", value);
  }
  get validateDependencies() {
    return this._getOption("validateDependencies");
  }
  set validateDependencies(value) {
    this._setOption("validateDependencies", value);
  }
  get _optionPath() {
    return "validation";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoValidationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValidationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoValidationComponent,
    selectors: [["dxo-validation"]],
    inputs: {
      autoUpdateParentTasks: "autoUpdateParentTasks",
      enablePredecessorGap: "enablePredecessorGap",
      validateDependencies: "validateDependencies"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoValidationComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValidationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-validation",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    autoUpdateParentTasks: [{
      type: Input
    }],
    enablePredecessorGap: [{
      type: Input
    }],
    validateDependencies: [{
      type: Input
    }]
  });
})();
var DxoValidationModule = class _DxoValidationModule {
  /** @nocollapse */
  static ɵfac = function DxoValidationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValidationModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoValidationModule,
    declarations: [DxoValidationComponent],
    exports: [DxoValidationComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValidationModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoValidationComponent],
      exports: [DxoValidationComponent]
    }]
  }], null, null);
})();
var DxiValueAxisComponent = class _DxiValueAxisComponent extends CollectionNestedOption {
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get autoBreaksEnabled() {
    return this._getOption("autoBreaksEnabled");
  }
  set autoBreaksEnabled(value) {
    this._setOption("autoBreaksEnabled", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get customPosition() {
    return this._getOption("customPosition");
  }
  set customPosition(value) {
    this._setOption("customPosition", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxAutoBreakCount() {
    return this._getOption("maxAutoBreakCount");
  }
  set maxAutoBreakCount(value) {
    this._setOption("maxAutoBreakCount", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get multipleAxesSpacing() {
    return this._getOption("multipleAxesSpacing");
  }
  set multipleAxesSpacing(value) {
    this._setOption("multipleAxesSpacing", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get showZero() {
    return this._getOption("showZero");
  }
  set showZero(value) {
    this._setOption("showZero", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get synchronizedValue() {
    return this._getOption("synchronizedValue");
  }
  set synchronizedValue(value) {
    this._setOption("synchronizedValue", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  categoriesChange;
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visualRangeChange;
  get _optionPath() {
    return "valueAxis";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "categoriesChange"
    }, {
      emit: "visualRangeChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiValueAxisComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiValueAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiValueAxisComponent,
    selectors: [["dxi-value-axis"]],
    contentQueries: function DxiValueAxisComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
      }
    },
    inputs: {
      aggregatedPointsPosition: "aggregatedPointsPosition",
      allowDecimals: "allowDecimals",
      autoBreaksEnabled: "autoBreaksEnabled",
      axisDivisionFactor: "axisDivisionFactor",
      breaks: "breaks",
      breakStyle: "breakStyle",
      categories: "categories",
      color: "color",
      constantLines: "constantLines",
      constantLineStyle: "constantLineStyle",
      customPosition: "customPosition",
      discreteAxisDivisionMode: "discreteAxisDivisionMode",
      endOnTick: "endOnTick",
      grid: "grid",
      inverted: "inverted",
      label: "label",
      linearThreshold: "linearThreshold",
      logarithmBase: "logarithmBase",
      maxAutoBreakCount: "maxAutoBreakCount",
      maxValueMargin: "maxValueMargin",
      minorGrid: "minorGrid",
      minorTick: "minorTick",
      minorTickCount: "minorTickCount",
      minorTickInterval: "minorTickInterval",
      minValueMargin: "minValueMargin",
      minVisualRangeLength: "minVisualRangeLength",
      multipleAxesSpacing: "multipleAxesSpacing",
      name: "name",
      offset: "offset",
      opacity: "opacity",
      pane: "pane",
      placeholderSize: "placeholderSize",
      position: "position",
      showZero: "showZero",
      strips: "strips",
      stripStyle: "stripStyle",
      synchronizedValue: "synchronizedValue",
      tick: "tick",
      tickInterval: "tickInterval",
      title: "title",
      type: "type",
      valueMarginsEnabled: "valueMarginsEnabled",
      valueType: "valueType",
      visible: "visible",
      visualRange: "visualRange",
      visualRangeUpdateMode: "visualRangeUpdateMode",
      wholeRange: "wholeRange",
      width: "width"
    },
    outputs: {
      categoriesChange: "categoriesChange",
      visualRangeChange: "visualRangeChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiValueAxisComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValueAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxi-value-axis",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    aggregatedPointsPosition: [{
      type: Input
    }],
    allowDecimals: [{
      type: Input
    }],
    autoBreaksEnabled: [{
      type: Input
    }],
    axisDivisionFactor: [{
      type: Input
    }],
    breaks: [{
      type: Input
    }],
    breakStyle: [{
      type: Input
    }],
    categories: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    constantLines: [{
      type: Input
    }],
    constantLineStyle: [{
      type: Input
    }],
    customPosition: [{
      type: Input
    }],
    discreteAxisDivisionMode: [{
      type: Input
    }],
    endOnTick: [{
      type: Input
    }],
    grid: [{
      type: Input
    }],
    inverted: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    linearThreshold: [{
      type: Input
    }],
    logarithmBase: [{
      type: Input
    }],
    maxAutoBreakCount: [{
      type: Input
    }],
    maxValueMargin: [{
      type: Input
    }],
    minorGrid: [{
      type: Input
    }],
    minorTick: [{
      type: Input
    }],
    minorTickCount: [{
      type: Input
    }],
    minorTickInterval: [{
      type: Input
    }],
    minValueMargin: [{
      type: Input
    }],
    minVisualRangeLength: [{
      type: Input
    }],
    multipleAxesSpacing: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    pane: [{
      type: Input
    }],
    placeholderSize: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    showZero: [{
      type: Input
    }],
    strips: [{
      type: Input
    }],
    stripStyle: [{
      type: Input
    }],
    synchronizedValue: [{
      type: Input
    }],
    tick: [{
      type: Input
    }],
    tickInterval: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    valueMarginsEnabled: [{
      type: Input
    }],
    valueType: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    visualRange: [{
      type: Input
    }],
    visualRangeUpdateMode: [{
      type: Input
    }],
    wholeRange: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    categoriesChange: [{
      type: Output
    }],
    visualRangeChange: [{
      type: Output
    }],
    breaksChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiBreakComponent)]
    }],
    constantLinesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiConstantLineComponent)]
    }],
    stripsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiStripComponent)]
    }]
  });
})();
var DxiValueAxisModule = class _DxiValueAxisModule {
  /** @nocollapse */
  static ɵfac = function DxiValueAxisModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiValueAxisModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiValueAxisModule,
    declarations: [DxiValueAxisComponent],
    exports: [DxiValueAxisComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValueAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiValueAxisComponent],
      exports: [DxiValueAxisComponent]
    }]
  }], null, null);
})();
var DxoValueAxisComponent = class _DxoValueAxisComponent extends NestedOption {
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get showZero() {
    return this._getOption("showZero");
  }
  set showZero(value) {
    this._setOption("showZero", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  visualRangeChange;
  get _optionPath() {
    return "valueAxis";
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "visualRangeChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoValueAxisComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoValueAxisComponent,
    selectors: [["dxo-value-axis"]],
    contentQueries: function DxoValueAxisComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
        ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
      }
    },
    inputs: {
      allowDecimals: "allowDecimals",
      axisDivisionFactor: "axisDivisionFactor",
      categories: "categories",
      color: "color",
      constantLines: "constantLines",
      constantLineStyle: "constantLineStyle",
      discreteAxisDivisionMode: "discreteAxisDivisionMode",
      endOnTick: "endOnTick",
      grid: "grid",
      inverted: "inverted",
      label: "label",
      linearThreshold: "linearThreshold",
      logarithmBase: "logarithmBase",
      maxValueMargin: "maxValueMargin",
      minorGrid: "minorGrid",
      minorTick: "minorTick",
      minorTickCount: "minorTickCount",
      minorTickInterval: "minorTickInterval",
      minValueMargin: "minValueMargin",
      minVisualRangeLength: "minVisualRangeLength",
      opacity: "opacity",
      showZero: "showZero",
      strips: "strips",
      stripStyle: "stripStyle",
      tick: "tick",
      tickInterval: "tickInterval",
      type: "type",
      valueMarginsEnabled: "valueMarginsEnabled",
      valueType: "valueType",
      visible: "visible",
      visualRange: "visualRange",
      visualRangeUpdateMode: "visualRangeUpdateMode",
      wholeRange: "wholeRange",
      width: "width",
      max: "max",
      min: "min"
    },
    outputs: {
      visualRangeChange: "visualRangeChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoValueAxisComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-axis",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowDecimals: [{
      type: Input
    }],
    axisDivisionFactor: [{
      type: Input
    }],
    categories: [{
      type: Input
    }],
    color: [{
      type: Input
    }],
    constantLines: [{
      type: Input
    }],
    constantLineStyle: [{
      type: Input
    }],
    discreteAxisDivisionMode: [{
      type: Input
    }],
    endOnTick: [{
      type: Input
    }],
    grid: [{
      type: Input
    }],
    inverted: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    linearThreshold: [{
      type: Input
    }],
    logarithmBase: [{
      type: Input
    }],
    maxValueMargin: [{
      type: Input
    }],
    minorGrid: [{
      type: Input
    }],
    minorTick: [{
      type: Input
    }],
    minorTickCount: [{
      type: Input
    }],
    minorTickInterval: [{
      type: Input
    }],
    minValueMargin: [{
      type: Input
    }],
    minVisualRangeLength: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    showZero: [{
      type: Input
    }],
    strips: [{
      type: Input
    }],
    stripStyle: [{
      type: Input
    }],
    tick: [{
      type: Input
    }],
    tickInterval: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    valueMarginsEnabled: [{
      type: Input
    }],
    valueType: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    visualRange: [{
      type: Input
    }],
    visualRangeUpdateMode: [{
      type: Input
    }],
    wholeRange: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    visualRangeChange: [{
      type: Output
    }],
    constantLinesChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiConstantLineComponent)]
    }],
    stripsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiStripComponent)]
    }]
  });
})();
var DxoValueAxisModule = class _DxoValueAxisModule {
  /** @nocollapse */
  static ɵfac = function DxoValueAxisModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueAxisModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoValueAxisModule,
    declarations: [DxoValueAxisComponent],
    exports: [DxoValueAxisComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoValueAxisComponent],
      exports: [DxoValueAxisComponent]
    }]
  }], null, null);
})();
var DxoValueErrorBarComponent = class _DxoValueErrorBarComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get edgeLength() {
    return this._getOption("edgeLength");
  }
  set edgeLength(value) {
    this._setOption("edgeLength", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get lineWidth() {
    return this._getOption("lineWidth");
  }
  set lineWidth(value) {
    this._setOption("lineWidth", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get _optionPath() {
    return "valueErrorBar";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoValueErrorBarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueErrorBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoValueErrorBarComponent,
    selectors: [["dxo-value-error-bar"]],
    inputs: {
      color: "color",
      displayMode: "displayMode",
      edgeLength: "edgeLength",
      highValueField: "highValueField",
      lineWidth: "lineWidth",
      lowValueField: "lowValueField",
      opacity: "opacity",
      type: "type",
      value: "value"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoValueErrorBarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueErrorBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-error-bar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    displayMode: [{
      type: Input
    }],
    edgeLength: [{
      type: Input
    }],
    highValueField: [{
      type: Input
    }],
    lineWidth: [{
      type: Input
    }],
    lowValueField: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    value: [{
      type: Input
    }]
  });
})();
var DxoValueErrorBarModule = class _DxoValueErrorBarModule {
  /** @nocollapse */
  static ɵfac = function DxoValueErrorBarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueErrorBarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoValueErrorBarModule,
    declarations: [DxoValueErrorBarComponent],
    exports: [DxoValueErrorBarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueErrorBarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoValueErrorBarComponent],
      exports: [DxoValueErrorBarComponent]
    }]
  }], null, null);
})();
var DxoValueFormatComponent = class _DxoValueFormatComponent extends DxoFormat {
  get _optionPath() {
    return "valueFormat";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoValueFormatComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoValueFormatComponent,
    selectors: [["dxo-value-format"]],
    inputs: {
      currency: "currency",
      formatter: "formatter",
      parser: "parser",
      precision: "precision",
      type: "type",
      useCurrencyAccountingStyle: "useCurrencyAccountingStyle"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoValueFormatComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-format",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["currency", "formatter", "parser", "precision", "type", "useCurrencyAccountingStyle"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoValueFormatModule = class _DxoValueFormatModule {
  /** @nocollapse */
  static ɵfac = function DxoValueFormatModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueFormatModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoValueFormatModule,
    declarations: [DxoValueFormatComponent],
    exports: [DxoValueFormatComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoValueFormatComponent],
      exports: [DxoValueFormatComponent]
    }]
  }], null, null);
})();
var DxoValueIndicatorComponent = class _DxoValueIndicatorComponent extends DxoGaugeIndicator {
  get _optionPath() {
    return "valueIndicator";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoValueIndicatorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoValueIndicatorComponent,
    selectors: [["dxo-value-indicator"]],
    inputs: {
      arrowLength: "arrowLength",
      backgroundColor: "backgroundColor",
      baseValue: "baseValue",
      beginAdaptingAtRadius: "beginAdaptingAtRadius",
      color: "color",
      horizontalOrientation: "horizontalOrientation",
      indentFromCenter: "indentFromCenter",
      length: "length",
      offset: "offset",
      palette: "palette",
      secondColor: "secondColor",
      secondFraction: "secondFraction",
      size: "size",
      spindleGapSize: "spindleGapSize",
      spindleSize: "spindleSize",
      text: "text",
      type: "type",
      verticalOrientation: "verticalOrientation",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoValueIndicatorComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-indicator",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["arrowLength", "backgroundColor", "baseValue", "beginAdaptingAtRadius", "color", "horizontalOrientation", "indentFromCenter", "length", "offset", "palette", "secondColor", "secondFraction", "size", "spindleGapSize", "spindleSize", "text", "type", "verticalOrientation", "width"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoValueIndicatorModule = class _DxoValueIndicatorModule {
  /** @nocollapse */
  static ɵfac = function DxoValueIndicatorModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoValueIndicatorModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoValueIndicatorModule,
    declarations: [DxoValueIndicatorComponent],
    exports: [DxoValueIndicatorComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoValueIndicatorComponent],
      exports: [DxoValueIndicatorComponent]
    }]
  }], null, null);
})();
var DxoHtmlEditorVariables = class _DxoHtmlEditorVariables extends NestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get escapeChar() {
    return this._getOption("escapeChar");
  }
  set escapeChar(value) {
    this._setOption("escapeChar", value);
  }
  /** @nocollapse */
  static ɵfac = /* @__PURE__ */ (() => {
    let ɵDxoHtmlEditorVariables_BaseFactory;
    return function DxoHtmlEditorVariables_Factory(__ngFactoryType__) {
      return (ɵDxoHtmlEditorVariables_BaseFactory || (ɵDxoHtmlEditorVariables_BaseFactory = ɵɵgetInheritedFactory(_DxoHtmlEditorVariables)))(__ngFactoryType__ || _DxoHtmlEditorVariables);
    };
  })();
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoHtmlEditorVariables,
    selectors: [["ng-component"]],
    standalone: false,
    features: [ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoHtmlEditorVariables_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorVariables, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoVariablesComponent = class _DxoVariablesComponent extends DxoHtmlEditorVariables {
  get _optionPath() {
    return "variables";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoVariablesComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoVariablesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoVariablesComponent,
    selectors: [["dxo-variables"]],
    inputs: {
      dataSource: "dataSource",
      escapeChar: "escapeChar"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoVariablesComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVariablesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-variables",
      template: "",
      providers: [NestedOptionHost],
      inputs: ["dataSource", "escapeChar"]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var DxoVariablesModule = class _DxoVariablesModule {
  /** @nocollapse */
  static ɵfac = function DxoVariablesModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoVariablesModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoVariablesModule,
    declarations: [DxoVariablesComponent],
    exports: [DxoVariablesComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVariablesModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoVariablesComponent],
      exports: [DxoVariablesComponent]
    }]
  }], null, null);
})();
var DxoVerticalLineComponent = class _DxoVerticalLineComponent extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "verticalLine";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoVerticalLineComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoVerticalLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoVerticalLineComponent,
    selectors: [["dxo-vertical-line"]],
    inputs: {
      color: "color",
      dashStyle: "dashStyle",
      label: "label",
      opacity: "opacity",
      visible: "visible",
      width: "width"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoVerticalLineComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVerticalLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-vertical-line",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    color: [{
      type: Input
    }],
    dashStyle: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    width: [{
      type: Input
    }]
  });
})();
var DxoVerticalLineModule = class _DxoVerticalLineModule {
  /** @nocollapse */
  static ɵfac = function DxoVerticalLineModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoVerticalLineModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoVerticalLineModule,
    declarations: [DxoVerticalLineComponent],
    exports: [DxoVerticalLineComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVerticalLineModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoVerticalLineComponent],
      exports: [DxoVerticalLineComponent]
    }]
  }], null, null);
})();
var DxiViewComponent = class _DxiViewComponent extends CollectionNestedOption {
  get agendaDuration() {
    return this._getOption("agendaDuration");
  }
  set agendaDuration(value) {
    this._setOption("agendaDuration", value);
  }
  get allDayPanelMode() {
    return this._getOption("allDayPanelMode");
  }
  set allDayPanelMode(value) {
    this._setOption("allDayPanelMode", value);
  }
  get appointmentCollectorTemplate() {
    return this._getOption("appointmentCollectorTemplate");
  }
  set appointmentCollectorTemplate(value) {
    this._setOption("appointmentCollectorTemplate", value);
  }
  get appointmentTemplate() {
    return this._getOption("appointmentTemplate");
  }
  set appointmentTemplate(value) {
    this._setOption("appointmentTemplate", value);
  }
  get appointmentTooltipTemplate() {
    return this._getOption("appointmentTooltipTemplate");
  }
  set appointmentTooltipTemplate(value) {
    this._setOption("appointmentTooltipTemplate", value);
  }
  get cellDuration() {
    return this._getOption("cellDuration");
  }
  set cellDuration(value) {
    this._setOption("cellDuration", value);
  }
  get dataCellTemplate() {
    return this._getOption("dataCellTemplate");
  }
  set dataCellTemplate(value) {
    this._setOption("dataCellTemplate", value);
  }
  get dateCellTemplate() {
    return this._getOption("dateCellTemplate");
  }
  set dateCellTemplate(value) {
    this._setOption("dateCellTemplate", value);
  }
  get dropDownAppointmentTemplate() {
    return this._getOption("dropDownAppointmentTemplate");
  }
  set dropDownAppointmentTemplate(value) {
    this._setOption("dropDownAppointmentTemplate", value);
  }
  get endDayHour() {
    return this._getOption("endDayHour");
  }
  set endDayHour(value) {
    this._setOption("endDayHour", value);
  }
  get firstDayOfWeek() {
    return this._getOption("firstDayOfWeek");
  }
  set firstDayOfWeek(value) {
    this._setOption("firstDayOfWeek", value);
  }
  get groupByDate() {
    return this._getOption("groupByDate");
  }
  set groupByDate(value) {
    this._setOption("groupByDate", value);
  }
  get groupOrientation() {
    return this._getOption("groupOrientation");
  }
  set groupOrientation(value) {
    this._setOption("groupOrientation", value);
  }
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get intervalCount() {
    return this._getOption("intervalCount");
  }
  set intervalCount(value) {
    this._setOption("intervalCount", value);
  }
  get maxAppointmentsPerCell() {
    return this._getOption("maxAppointmentsPerCell");
  }
  set maxAppointmentsPerCell(value) {
    this._setOption("maxAppointmentsPerCell", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get resourceCellTemplate() {
    return this._getOption("resourceCellTemplate");
  }
  set resourceCellTemplate(value) {
    this._setOption("resourceCellTemplate", value);
  }
  get scrolling() {
    return this._getOption("scrolling");
  }
  set scrolling(value) {
    this._setOption("scrolling", value);
  }
  get startDate() {
    return this._getOption("startDate");
  }
  set startDate(value) {
    this._setOption("startDate", value);
  }
  get startDayHour() {
    return this._getOption("startDayHour");
  }
  set startDayHour(value) {
    this._setOption("startDayHour", value);
  }
  get timeCellTemplate() {
    return this._getOption("timeCellTemplate");
  }
  set timeCellTemplate(value) {
    this._setOption("timeCellTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "views";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxiViewComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiViewComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxiViewComponent,
    selectors: [["dxi-view"]],
    inputs: {
      agendaDuration: "agendaDuration",
      allDayPanelMode: "allDayPanelMode",
      appointmentCollectorTemplate: "appointmentCollectorTemplate",
      appointmentTemplate: "appointmentTemplate",
      appointmentTooltipTemplate: "appointmentTooltipTemplate",
      cellDuration: "cellDuration",
      dataCellTemplate: "dataCellTemplate",
      dateCellTemplate: "dateCellTemplate",
      dropDownAppointmentTemplate: "dropDownAppointmentTemplate",
      endDayHour: "endDayHour",
      firstDayOfWeek: "firstDayOfWeek",
      groupByDate: "groupByDate",
      groupOrientation: "groupOrientation",
      groups: "groups",
      intervalCount: "intervalCount",
      maxAppointmentsPerCell: "maxAppointmentsPerCell",
      name: "name",
      offset: "offset",
      resourceCellTemplate: "resourceCellTemplate",
      scrolling: "scrolling",
      startDate: "startDate",
      startDayHour: "startDayHour",
      timeCellTemplate: "timeCellTemplate",
      type: "type"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxiViewComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiViewComponent, [{
    type: Component,
    args: [{
      selector: "dxi-view",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    agendaDuration: [{
      type: Input
    }],
    allDayPanelMode: [{
      type: Input
    }],
    appointmentCollectorTemplate: [{
      type: Input
    }],
    appointmentTemplate: [{
      type: Input
    }],
    appointmentTooltipTemplate: [{
      type: Input
    }],
    cellDuration: [{
      type: Input
    }],
    dataCellTemplate: [{
      type: Input
    }],
    dateCellTemplate: [{
      type: Input
    }],
    dropDownAppointmentTemplate: [{
      type: Input
    }],
    endDayHour: [{
      type: Input
    }],
    firstDayOfWeek: [{
      type: Input
    }],
    groupByDate: [{
      type: Input
    }],
    groupOrientation: [{
      type: Input
    }],
    groups: [{
      type: Input
    }],
    intervalCount: [{
      type: Input
    }],
    maxAppointmentsPerCell: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    offset: [{
      type: Input
    }],
    resourceCellTemplate: [{
      type: Input
    }],
    scrolling: [{
      type: Input
    }],
    startDate: [{
      type: Input
    }],
    startDayHour: [{
      type: Input
    }],
    timeCellTemplate: [{
      type: Input
    }],
    type: [{
      type: Input
    }]
  });
})();
var DxiViewModule = class _DxiViewModule {
  /** @nocollapse */
  static ɵfac = function DxiViewModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxiViewModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxiViewModule,
    declarations: [DxiViewComponent],
    exports: [DxiViewComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiViewModule, [{
    type: NgModule,
    args: [{
      declarations: [DxiViewComponent],
      exports: [DxiViewComponent]
    }]
  }], null, null);
})();
var DxoViewToolbarComponent = class _DxoViewToolbarComponent extends NestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "viewToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoViewToolbarComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoViewToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoViewToolbarComponent,
    selectors: [["dxo-view-toolbar"]],
    contentQueries: function DxoViewToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
      }
    },
    inputs: {
      commands: "commands",
      visible: "visible"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoViewToolbarComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoViewToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-view-toolbar",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    commands: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    commandsChildren: [{
      type: ContentChildren,
      args: [forwardRef(() => DxiCommandComponent)]
    }]
  });
})();
var DxoViewToolbarModule = class _DxoViewToolbarModule {
  /** @nocollapse */
  static ɵfac = function DxoViewToolbarModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoViewToolbarModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoViewToolbarModule,
    declarations: [DxoViewToolbarComponent],
    exports: [DxoViewToolbarComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoViewToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoViewToolbarComponent],
      exports: [DxoViewToolbarComponent]
    }]
  }], null, null);
})();
var DxoWidthComponent = class _DxoWidthComponent extends NestedOption {
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get end() {
    return this._getOption("end");
  }
  set end(value) {
    this._setOption("end", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get _optionPath() {
    return "width";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoWidthComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoWidthComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoWidthComponent,
    selectors: [["dxo-width"]],
    inputs: {
      rangeMaxPoint: "rangeMaxPoint",
      rangeMinPoint: "rangeMinPoint",
      end: "end",
      start: "start"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoWidthComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoWidthComponent, [{
    type: Component,
    args: [{
      selector: "dxo-width",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    rangeMaxPoint: [{
      type: Input
    }],
    rangeMinPoint: [{
      type: Input
    }],
    end: [{
      type: Input
    }],
    start: [{
      type: Input
    }]
  });
})();
var DxoWidthModule = class _DxoWidthModule {
  /** @nocollapse */
  static ɵfac = function DxoWidthModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoWidthModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoWidthModule,
    declarations: [DxoWidthComponent],
    exports: [DxoWidthComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoWidthModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoWidthComponent],
      exports: [DxoWidthComponent]
    }]
  }], null, null);
})();
var DxoZoomAndPanComponent = class _DxoZoomAndPanComponent extends NestedOption {
  get allowMouseWheel() {
    return this._getOption("allowMouseWheel");
  }
  set allowMouseWheel(value) {
    this._setOption("allowMouseWheel", value);
  }
  get allowTouchGestures() {
    return this._getOption("allowTouchGestures");
  }
  set allowTouchGestures(value) {
    this._setOption("allowTouchGestures", value);
  }
  get argumentAxis() {
    return this._getOption("argumentAxis");
  }
  set argumentAxis(value) {
    this._setOption("argumentAxis", value);
  }
  get dragBoxStyle() {
    return this._getOption("dragBoxStyle");
  }
  set dragBoxStyle(value) {
    this._setOption("dragBoxStyle", value);
  }
  get dragToZoom() {
    return this._getOption("dragToZoom");
  }
  set dragToZoom(value) {
    this._setOption("dragToZoom", value);
  }
  get panKey() {
    return this._getOption("panKey");
  }
  set panKey(value) {
    this._setOption("panKey", value);
  }
  get valueAxis() {
    return this._getOption("valueAxis");
  }
  set valueAxis(value) {
    this._setOption("valueAxis", value);
  }
  get _optionPath() {
    return "zoomAndPan";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoZoomAndPanComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoZoomAndPanComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoZoomAndPanComponent,
    selectors: [["dxo-zoom-and-pan"]],
    inputs: {
      allowMouseWheel: "allowMouseWheel",
      allowTouchGestures: "allowTouchGestures",
      argumentAxis: "argumentAxis",
      dragBoxStyle: "dragBoxStyle",
      dragToZoom: "dragToZoom",
      panKey: "panKey",
      valueAxis: "valueAxis"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoZoomAndPanComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomAndPanComponent, [{
    type: Component,
    args: [{
      selector: "dxo-zoom-and-pan",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    allowMouseWheel: [{
      type: Input
    }],
    allowTouchGestures: [{
      type: Input
    }],
    argumentAxis: [{
      type: Input
    }],
    dragBoxStyle: [{
      type: Input
    }],
    dragToZoom: [{
      type: Input
    }],
    panKey: [{
      type: Input
    }],
    valueAxis: [{
      type: Input
    }]
  });
})();
var DxoZoomAndPanModule = class _DxoZoomAndPanModule {
  /** @nocollapse */
  static ɵfac = function DxoZoomAndPanModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoZoomAndPanModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoZoomAndPanModule,
    declarations: [DxoZoomAndPanComponent],
    exports: [DxoZoomAndPanComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomAndPanModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoZoomAndPanComponent],
      exports: [DxoZoomAndPanComponent]
    }]
  }], null, null);
})();
var DxoZoomLevelComponent = class _DxoZoomLevelComponent extends NestedOption {
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  /**
  
   * This member supports the internal infrastructure and is not intended to be used directly from your code.
  
   */
  valueChange;
  get _optionPath() {
    return "zoomLevel";
  }
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([{
      emit: "valueChange"
    }]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
  /** @nocollapse */
  static ɵfac = function DxoZoomLevelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoZoomLevelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _DxoZoomLevelComponent,
    selectors: [["dxo-zoom-level"]],
    inputs: {
      items: "items",
      value: "value"
    },
    outputs: {
      valueChange: "valueChange"
    },
    standalone: false,
    features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature],
    decls: 0,
    vars: 0,
    template: function DxoZoomLevelComponent_Template(rf, ctx) {
    },
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomLevelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-zoom-level",
      template: "",
      providers: [NestedOptionHost]
    }]
  }], () => [{
    type: NestedOptionHost,
    decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }]
  }, {
    type: NestedOptionHost,
    decorators: [{
      type: Host
    }]
  }], {
    items: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }]
  });
})();
var DxoZoomLevelModule = class _DxoZoomLevelModule {
  /** @nocollapse */
  static ɵfac = function DxoZoomLevelModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DxoZoomLevelModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _DxoZoomLevelModule,
    declarations: [DxoZoomLevelComponent],
    exports: [DxoZoomLevelComponent]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomLevelModule, [{
    type: NgModule,
    args: [{
      declarations: [DxoZoomLevelComponent],
      exports: [DxoZoomLevelComponent]
    }]
  }], null, null);
})();

export {
  DxoAdapterComponent,
  DxoAdapterModule,
  DxoAdaptiveLayoutComponent,
  DxoAdaptiveLayoutModule,
  DxoAggregationIntervalComponent,
  DxoAggregationIntervalModule,
  DxoAggregationComponent,
  DxoAggregationModule,
  DxiAlertComponent,
  DxiAlertModule,
  DxoAnimationComponent,
  DxoAnimationModule,
  DxiAnnotationComponent,
  DxiAnnotationModule,
  DxoApiKeyComponent,
  DxoApiKeyModule,
  DxoAppointmentDraggingComponent,
  DxoAppointmentDraggingModule,
  DxoAreaComponent,
  DxoAreaModule,
  DxiBreakComponent,
  DxiBreakModule,
  DxiConstantLineComponent,
  DxiConstantLineModule,
  DxiStripComponent,
  DxiStripModule,
  DxoArgumentAxisComponent,
  DxoArgumentAxisModule,
  DxoArgumentFormatComponent,
  DxoArgumentFormatModule,
  DxoAtComponent,
  DxoAtModule,
  DxoAuthorComponent,
  DxoAuthorModule,
  DxoAutoLayoutComponent,
  DxoAutoLayoutModule,
  DxoBackgroundColorComponent,
  DxoBackgroundColorModule,
  DxoBackgroundComponent,
  DxoBackgroundModule,
  DxoBarComponent,
  DxoBarModule,
  DxoBehaviorComponent,
  DxoBehaviorModule,
  DxoBorderComponent,
  DxoBorderModule,
  DxoBoundaryOffsetComponent,
  DxoBoundaryOffsetModule,
  DxiValidationRuleComponent,
  DxiValidationRuleModule,
  DxiCommandComponent,
  DxiCommandModule,
  DxiGroupComponent,
  DxiGroupModule,
  DxiTabComponent,
  DxiTabModule,
  DxiLocationComponent,
  DxiLocationModule,
  DxiItemComponent,
  DxiItemModule,
  DxoBoxComponent,
  DxoBoxModule,
  DxoBreakStyleComponent,
  DxoBreakStyleModule,
  DxoBubbleComponent,
  DxoBubbleModule,
  DxiButtonComponent,
  DxiButtonModule,
  DxoButtonOptionsComponent,
  DxoButtonOptionsModule,
  DxoCalendarOptionsComponent,
  DxoCalendarOptionsModule,
  DxoCandlestickComponent,
  DxoCandlestickModule,
  DxiCenterComponent,
  DxiCenterModule,
  DxiChangeComponent,
  DxiChangeModule,
  DxiSeriesComponent,
  DxiSeriesModule,
  DxoChartComponent,
  DxoChartModule,
  DxoColCountByScreenComponent,
  DxoColCountByScreenModule,
  DxiColComponent,
  DxiColModule,
  DxoCollisionComponent,
  DxoCollisionModule,
  DxoColorComponent,
  DxoColorModule,
  DxoColorizerComponent,
  DxoColorizerModule,
  DxoColumnChooserComponent,
  DxoColumnChooserModule,
  DxiColumnComponent,
  DxiColumnModule,
  DxoColumnFixingComponent,
  DxoColumnFixingModule,
  DxoCommonAnnotationSettingsComponent,
  DxoCommonAnnotationSettingsModule,
  DxoCommonAxisSettingsComponent,
  DxoCommonAxisSettingsModule,
  DxoCommonPaneSettingsComponent,
  DxoCommonPaneSettingsModule,
  DxoCommonSeriesSettingsComponent,
  DxoCommonSeriesSettingsModule,
  DxiConnectionPointComponent,
  DxiConnectionPointModule,
  DxoConnectorComponent,
  DxoConnectorModule,
  DxoConstantLineStyleComponent,
  DxoConstantLineStyleModule,
  DxoContextMenuComponent,
  DxoContextMenuModule,
  DxoContextToolboxComponent,
  DxoContextToolboxModule,
  DxoControlBarComponent,
  DxoControlBarModule,
  DxoConverterComponent,
  DxoConverterModule,
  DxoCrosshairComponent,
  DxoCrosshairModule,
  DxoCursorOffsetComponent,
  DxoCursorOffsetModule,
  DxiCustomOperationComponent,
  DxiCustomOperationModule,
  DxiCustomShapeComponent,
  DxiCustomShapeModule,
  DxoDataPrepareSettingsComponent,
  DxoDataPrepareSettingsModule,
  DxoDayHeaderFormatComponent,
  DxoDayHeaderFormatModule,
  DxoDefaultItemPropertiesComponent,
  DxoDefaultItemPropertiesModule,
  DxoDelayComponent,
  DxoDelayModule,
  DxoDependenciesComponent,
  DxoDependenciesModule,
  DxoDetailsComponent,
  DxoDetailsModule,
  DxoDisplayFormatComponent,
  DxoDisplayFormatModule,
  DxoDragBoxStyleComponent,
  DxoDragBoxStyleModule,
  DxiToolbarItemComponent,
  DxiToolbarItemModule,
  DxoDropDownOptionsComponent,
  DxoDropDownOptionsModule,
  DxoEdgesComponent,
  DxoEdgesModule,
  DxoEditingComponent,
  DxoEditingModule,
  DxoExportComponent,
  DxoExportModule,
  DxoFieldChooserComponent,
  DxoFieldChooserModule,
  DxiFieldComponent,
  DxiFieldModule,
  DxoFieldPanelComponent,
  DxoFieldPanelModule,
  DxiFileSelectionItemComponent,
  DxiFileSelectionItemModule,
  DxoFileUploaderOptionsComponent,
  DxoFileUploaderOptionsModule,
  DxoFilterBuilderPopupComponent,
  DxoFilterBuilderPopupModule,
  DxoFilterBuilderComponent,
  DxoFilterBuilderModule,
  DxoFilterOperationDescriptionsComponent,
  DxoFilterOperationDescriptionsModule,
  DxoFilterPanelComponent,
  DxoFilterPanelModule,
  DxoFilterRowComponent,
  DxoFilterRowModule,
  DxoFontComponent,
  DxoFontModule,
  DxoFormItemComponent,
  DxoFormItemModule,
  DxoFormComponent,
  DxoFormModule,
  DxoFormatComponent,
  DxoFormatModule,
  DxoFromComponent,
  DxoFromModule,
  DxoFullstackedareaComponent,
  DxoFullstackedareaModule,
  DxoFullstackedbarComponent,
  DxoFullstackedbarModule,
  DxoFullstackedlineComponent,
  DxoFullstackedlineModule,
  DxoFullstackedsplineComponent,
  DxoFullstackedsplineModule,
  DxoFullstackedsplineareaComponent,
  DxoFullstackedsplineareaModule,
  DxoGeometryComponent,
  DxoGeometryModule,
  DxoGridSizeComponent,
  DxoGridSizeModule,
  DxoGridComponent,
  DxoGridModule,
  DxiGroupItemComponent,
  DxiGroupItemModule,
  DxoGroupOperationDescriptionsComponent,
  DxoGroupOperationDescriptionsModule,
  DxoGroupPanelComponent,
  DxoGroupPanelModule,
  DxoGroupComponent,
  DxoGroupModule,
  DxoGroupingComponent,
  DxoGroupingModule,
  DxoHatchingComponent,
  DxoHatchingModule,
  DxoHeaderFilterComponent,
  DxoHeaderFilterModule,
  DxoHeightComponent,
  DxoHeightModule,
  DxoHideEventComponent,
  DxoHideEventModule,
  DxoHideComponent,
  DxoHideModule,
  DxoHistoryToolbarComponent,
  DxoHistoryToolbarModule,
  DxoHorizontalLineComponent,
  DxoHorizontalLineModule,
  DxoHoverStyleComponent,
  DxoHoverStyleModule,
  DxoIconsComponent,
  DxoIconsModule,
  DxoImageUploadComponent,
  DxoImageUploadModule,
  DxoImageComponent,
  DxoImageModule,
  DxoIndentComponent,
  DxoIndentModule,
  DxoItemDraggingComponent,
  DxoItemDraggingModule,
  DxoItemTextFormatComponent,
  DxoItemTextFormatModule,
  DxoItemViewComponent,
  DxoItemViewModule,
  DxoItemComponent,
  DxoItemModule,
  DxoKeyboardNavigationComponent,
  DxoKeyboardNavigationModule,
  DxoLabelComponent,
  DxoLabelModule,
  DxiLayerComponent,
  DxiLayerModule,
  DxiLegendComponent,
  DxiLegendModule,
  DxoLegendComponent,
  DxoLegendModule,
  DxoLineComponent,
  DxoLineModule,
  DxoLinkComponent,
  DxoLinkModule,
  DxoLoadPanelComponent,
  DxoLoadPanelModule,
  DxoLoadingIndicatorComponent,
  DxoLoadingIndicatorModule,
  DxoLookupComponent,
  DxoLookupModule,
  DxoMainToolbarComponent,
  DxoMainToolbarModule,
  DxoMarginComponent,
  DxoMarginModule,
  DxiMarkerComponent,
  DxiMarkerModule,
  DxoMarkerComponent,
  DxoMarkerModule,
  DxoMasterDetailComponent,
  DxoMasterDetailModule,
  DxoMaxRangeComponent,
  DxoMaxRangeModule,
  DxoMediaResizingComponent,
  DxoMediaResizingModule,
  DxiMentionComponent,
  DxiMentionModule,
  DxiMenuItemComponent,
  DxiMenuItemModule,
  DxoMessageTimestampFormatComponent,
  DxoMessageTimestampFormatModule,
  DxoMinRangeComponent,
  DxoMinRangeModule,
  DxoMinVisualRangeLengthComponent,
  DxoMinVisualRangeLengthModule,
  DxoMinorGridComponent,
  DxoMinorGridModule,
  DxoMinorTickIntervalComponent,
  DxoMinorTickIntervalModule,
  DxoMinorTickComponent,
  DxoMinorTickModule,
  DxoMyComponent,
  DxoMyModule,
  DxoNodeComponent,
  DxoNodeModule,
  DxoNodesComponent,
  DxoNodesModule,
  DxoNotificationsComponent,
  DxoNotificationsModule,
  DxoOffsetComponent,
  DxoOffsetModule,
  DxoOperationDescriptionsComponent,
  DxoOperationDescriptionsModule,
  DxoOptionsComponent,
  DxoOptionsModule,
  DxoPageSizeComponent,
  DxoPageSizeModule,
  DxoPagerComponent,
  DxoPagerModule,
  DxoPagingComponent,
  DxoPagingModule,
  DxiPaneComponent,
  DxiPaneModule,
  DxoPermissionsComponent,
  DxoPermissionsModule,
  DxoPointComponent,
  DxoPointModule,
  DxoPopupComponent,
  DxoPopupModule,
  DxoPositionComponent,
  DxoPositionModule,
  DxoProjectionComponent,
  DxoProjectionModule,
  DxoPropertiesPanelComponent,
  DxoPropertiesPanelModule,
  DxoProviderConfigComponent,
  DxoProviderConfigModule,
  DxiRangeComponent,
  DxiRangeModule,
  DxoRangeContainerComponent,
  DxoRangeContainerModule,
  DxoRangeareaComponent,
  DxoRangeareaModule,
  DxoRangebarComponent,
  DxoRangebarModule,
  DxoReductionComponent,
  DxoReductionModule,
  DxoRemoteOperationsComponent,
  DxoRemoteOperationsModule,
  DxoResourceAssignmentsComponent,
  DxoResourceAssignmentsModule,
  DxiResourceComponent,
  DxiResourceModule,
  DxoResourcesComponent,
  DxoResourcesModule,
  DxiRouteComponent,
  DxiRouteModule,
  DxoRowDraggingComponent,
  DxoRowDraggingModule,
  DxiRowComponent,
  DxiRowModule,
  DxoScaleTypeRangeComponent,
  DxoScaleTypeRangeModule,
  DxoScaleComponent,
  DxoScaleModule,
  DxoScatterComponent,
  DxoScatterModule,
  DxoScrollBarComponent,
  DxoScrollBarModule,
  DxoScrollingComponent,
  DxoScrollingModule,
  DxoSearchEditorOptionsComponent,
  DxoSearchEditorOptionsModule,
  DxoSearchPanelComponent,
  DxoSearchPanelModule,
  DxoSearchComponent,
  DxoSearchModule,
  DxoSelectionStyleComponent,
  DxoSelectionStyleModule,
  DxoSelectionComponent,
  DxoSelectionModule,
  DxoSeriesTemplateComponent,
  DxoSeriesTemplateModule,
  DxoShadowComponent,
  DxoShadowModule,
  DxoShowEventComponent,
  DxoShowEventModule,
  DxoShowFirstSubmenuModeComponent,
  DxoShowFirstSubmenuModeModule,
  DxoShowSubmenuModeComponent,
  DxoShowSubmenuModeModule,
  DxoShowComponent,
  DxoShowModule,
  DxoShutterComponent,
  DxoShutterModule,
  DxoSizeComponent,
  DxoSizeModule,
  DxoSliderHandleComponent,
  DxoSliderHandleModule,
  DxoSliderMarkerComponent,
  DxoSliderMarkerModule,
  DxoSmallValuesGroupingComponent,
  DxoSmallValuesGroupingModule,
  DxiSortByGroupSummaryInfoComponent,
  DxiSortByGroupSummaryInfoModule,
  DxoSortingComponent,
  DxoSortingModule,
  DxoSourceComponent,
  DxoSourceModule,
  DxoSplineComponent,
  DxoSplineModule,
  DxoSplineareaComponent,
  DxoSplineareaModule,
  DxoSplitterComponent,
  DxoSplitterModule,
  DxoStackedareaComponent,
  DxoStackedareaModule,
  DxoStackedbarComponent,
  DxoStackedbarModule,
  DxoStackedlineComponent,
  DxoStackedlineModule,
  DxoStackedsplineComponent,
  DxoStackedsplineModule,
  DxoStackedsplineareaComponent,
  DxoStackedsplineareaModule,
  DxoStateStoringComponent,
  DxoStateStoringModule,
  DxoStepareaComponent,
  DxoStepareaModule,
  DxoSteplineComponent,
  DxoSteplineModule,
  DxoStockComponent,
  DxoStockModule,
  DxiStripLineComponent,
  DxiStripLineModule,
  DxoStripStyleComponent,
  DxoStripStyleModule,
  DxoSubtitleComponent,
  DxoSubtitleModule,
  DxoSubvalueIndicatorComponent,
  DxoSubvalueIndicatorModule,
  DxiTotalItemComponent,
  DxiTotalItemModule,
  DxoSummaryComponent,
  DxoSummaryModule,
  DxoTabPanelOptionsComponent,
  DxoTabPanelOptionsModule,
  DxoTableContextMenuComponent,
  DxoTableContextMenuModule,
  DxoTableResizingComponent,
  DxoTableResizingModule,
  DxoTasksComponent,
  DxoTasksModule,
  DxoTextComponent,
  DxoTextModule,
  DxoTextsComponent,
  DxoTextsModule,
  DxoTickIntervalComponent,
  DxoTickIntervalModule,
  DxoTickComponent,
  DxoTickModule,
  DxoTileComponent,
  DxoTileModule,
  DxoTitleComponent,
  DxoTitleModule,
  DxoToComponent,
  DxoToModule,
  DxoToolbarComponent,
  DxoToolbarModule,
  DxoToolboxComponent,
  DxoToolboxModule,
  DxoTooltipComponent,
  DxoTooltipModule,
  DxiTypingUserComponent,
  DxiTypingUserModule,
  DxoUploadComponent,
  DxoUploadModule,
  DxoUrlComponent,
  DxoUrlModule,
  DxoUserComponent,
  DxoUserModule,
  DxoValidationComponent,
  DxoValidationModule,
  DxiValueAxisComponent,
  DxiValueAxisModule,
  DxoValueAxisComponent,
  DxoValueAxisModule,
  DxoValueErrorBarComponent,
  DxoValueErrorBarModule,
  DxoValueFormatComponent,
  DxoValueFormatModule,
  DxoValueIndicatorComponent,
  DxoValueIndicatorModule,
  DxoVariablesComponent,
  DxoVariablesModule,
  DxoVerticalLineComponent,
  DxoVerticalLineModule,
  DxiViewComponent,
  DxiViewModule,
  DxoViewToolbarComponent,
  DxoViewToolbarModule,
  DxoWidthComponent,
  DxoWidthModule,
  DxoZoomAndPanComponent,
  DxoZoomAndPanModule,
  DxoZoomLevelComponent,
  DxoZoomLevelModule
};
/*! Bundled license information:

devextreme-angular/fesm2022/devextreme-angular-ui-nested.mjs:
  (*!
   * devextreme-angular
   * Version: 24.2.7
   * Build date: Mon Apr 28 2025
   *
   * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-angular
   *)
*/
//# sourceMappingURL=chunk-745C4RJI.js.map
